<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-04-12T22:25:29+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby を使ってGmailの内容を別のアカウントのGmailへ移す方法]]></title>
    <link href="http://www.monaka.org/blog/2014/01/14/gmail-imap-sync-with-ruby/"/>
    <updated>2014-01-14T19:37:18+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/14/gmail-imap-sync-with-ruby</id>
    <content type="html"><![CDATA[<h1>まくら</h1>

<p>明日の東京は，予想最高気温4℃とか降雪とか，もう勘弁して下さいという感じのようなのですが．
数ヶ月もすれば暖かくもなりましょう．
そしてやってくるのは，別れと出会いの春でございます．</p>

<p>いまどき，IT関連でなくてもメールくらいは日用品になっておるわけでして．
所属が変わるときには，自分も，自分の所属組織も，この扱いに困ったりするわけです．
私が最初にメアドなるものを貰ってから20年以上経ちますが，この辺りは何の進歩も見られないなと，思ったりするような，しないような．</p>

<h1>Gmailの内容保全について考える．</h1>

<p>今や社会インフラといえるよなサービスの代表として Gmail は筆頭でしょう．
個人，学生のみならず，Google Apps for Bysiness (GAB)などで会社でも使われていることも多いですし．</p>

<p>学生が学校のアカウントとして Gmail を持っている場合は，卒業と同時にそれを失うのが一般的なはずです．
卒業後を見越していればよいのですが，新入生の頃は右も左も判らないので，つい学校の Gmail に頼っちゃった，ということは十分に有り得るでしょう．</p>

<p>会社の場合は，退職と同時に，その持ち出しを禁止されるのが一般的だろうと思います．
この場合，困るのは，会社に残った側です．
メールのやり取りは，退職者が行っていた仕事のログでもあり，保全したいと思うはずです．
が，GABのアカウントは有料でして，アカウントを消して経費節減に繋げたいという経営経理側の言い分もわかります．
その辺を上手く調整しないと…</p>

<p><a href="https://twitter.com/KanjiruWaio/status/421468843513376768">https://twitter.com/KanjiruWaio/status/421468843513376768</a>">https://twitter.com/KanjiruWaio/status/421468843513376768">https://twitter.com/KanjiruWaio/status/421468843513376768</a></a></p>

<p>…こういう哀しいできごとがおこるわけです．(この例はメールではありませんが)</p>

<!-- more -->


<h1>それ，Rubyでやってみよう．</h1>

<p>いや別に Ruby でなくてもできますが…(汗．閑話休題．</p>

<p>一般的に言うと，Gmail の保全には，imapsync などの汎用ツールを使うだろうと思います．
しかし，ここでは，独自にスクリプトを書くという提案をします．</p>

<p>Ruby には，強力なIMAPライブラリがあるので，あんまり難しくはありません．
あと，Ruby 入門の日記ではありませんので，処理の詳細は説明しません．</p>

<h2>注目は X-GM-RAW</h2>

<p>注目していただきたいのは，「 <strong>#ここに注目</strong> 」の行です．
Gmail は IMAP の SEARCH に X-GM-RAW なる指定ができます．
これは，Gmail のweb画面にある検索窓に入力する書式を，そのまま指定できます．
この例では，Googleグループのandroid-x86というグループから来ているメールを抽出してコピーしています．</p>

<p>Gmail はディスク容量が大きく，検索のスピードも早いため，一般的なメールフォルダよりも多くのメールを溜め込みがちです(個人差はありますが)．
これを，imapsync などの汎用ツールを使って全コピーしようとすると，涙目になります．</p>

<h2>まとめ</h2>

<p>スクリプトの中には，いろいろ細かいネタが仕込まれているのですが，それらもサックリと省略します．
汎用ツールで開発時間を短縮するという考え方も間違いではありませんが，汎用ツールでは対応できない機能を見つけたときには，小さなスクリプトを作るのもアリですよね，と．
まとめになっていませんが，今日はこんな感じで．</p>

<p>```</p>

<h1>!/usr/bin/env ruby</h1>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<h1>Copyright &copy; 2014 Masaki &ldquo;monaka&rdquo; Muranaka.</h1>

<h1>License: MIT.</h1>

<p>require &lsquo;net/imap&rsquo;
require &lsquo;time&rsquo;</p>

<p>src_imap = Net::IMAP.new(&lsquo;imap.gmail.com&rsquo;, 993, true)
dst_imap = Net::IMAP.new(&lsquo;imap.gmail.com&rsquo;, 993, true)</p>

<p>def parseHeader(msg)
  msg =~/\A(.<em>?)\r\n\r\n(.</em>)\Z/m
  head,body=$1,$2
  head=head.split(/\r\n/).map{|i|i[0]+i}.join(&ldquo;\r\n&rdquo;)[1..-1].split(/\r\n[^\s]/).map{|i|i.split(/\r\n\s\s/).join(&ldquo;&rdquo;)}
  Hash[<em>head.map{|i|i=~/^(.</em>?):\s(.*)$/;[$1,$2]}.flatten]
end</p>

<h6>#</h6>

<h1>ここは設定</h1>

<p>searchParams = [</p>

<pre><code>            ['FROM', 'tomono@example.com'],
            ['X-GM-RAW', 'list:(&lt;android-x86.googlegroups.com&gt;)'],      #ここに注目
            ['X-GM-RAW', 'list:(&lt;receipt.movsign.info&gt;)']
           ]
</code></pre>

<p>src_imap.login(&lsquo;<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#109;&#111;&#x6e;&#97;&#x6b;&#97;&#x40;&#115;&#x6f;&#109;&#x65;&#119;&#104;&#101;&#114;&#x65;&#x2d;&#117;&#x73;&#x69;&#x6e;&#x67;&#45;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x2e;&#x6a;&#112;">&#x6d;&#111;&#110;&#x61;&#x6b;&#97;&#x40;&#115;&#111;&#x6d;&#101;&#x77;&#x68;&#x65;&#x72;&#101;&#45;&#117;&#x73;&#x69;&#110;&#x67;&#x2d;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x2e;&#106;&#x70;</a>&rsquo;, &lsquo;password&rsquo;)            #コピー元
dst_imap.login(&lsquo;<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#97;&#x6e;&#x6f;&#x74;&#104;&#x65;&#114;&#45;&#109;&#x6f;&#110;&#97;&#107;&#x61;&#45;&#111;&#114;&#x2d;&#x73;&#x6f;&#109;&#101;&#x74;&#104;&#105;&#110;&#x67;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#110;&#x6f;&#116;&#104;&#x65;&#114;&#45;&#109;&#111;&#110;&#x61;&#107;&#x61;&#45;&#111;&#x72;&#45;&#x73;&#x6f;&#x6d;&#101;&#x74;&#x68;&#105;&#x6e;&#x67;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a>&rsquo;, &lsquo;another-password&rsquo;) #コピー先</p>

<h1>この辺もお好みで．</h1>

<p>src_imap.select(&lsquo;INBOX&rsquo;)
dst_imap.select(&lsquo;INBOX&rsquo;)</p>

<h6>#</h6>

<p>searchParams.each do |searchArray|
  puts &ldquo;Searching #{searchArray[1]}&rdquo;
  searchIds = src_imap.search(searchArray).each do |id|</p>

<pre><code>msg = src_imap.fetch(id, 'RFC822')[0].attr['RFC822']
head = parseHeader(msg)

searchIds = dst_imap.search(['X-GM-RAW', "rfc822msgid:#{head[%q{Message-ID}]}"])
if (searchIds.length == 0) # このチェックを省くと遅くなる
  dst_imap.append('INBOX', msg, nil, Time.parse(head['Date']))
  putc 'w'
else
  putc '.'
end
</code></pre>

<p>  end
  puts
end</p>

<p>src_imap.logout()
dst_imap.logout()</p>

<p>src_imap.disconnect()
dst_imap.disconnect()
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OneBox リリースしました．]]></title>
    <link href="http://www.monaka.org/blog/2013/05/14/onebox-tools/"/>
    <updated>2013-05-14T16:41:00+09:00</updated>
    <id>http://www.monaka.org/blog/2013/05/14/onebox-tools</id>
    <content type="html"><![CDATA[<p>ざっくりいうと，non-rooted な Android 端末で，コマンドラインツールを使える幸せな環境を得る方法，です．</p>

<!-- more -->


<p>Androidを使っていると，せっかくLinuxなのだからコマンドラインツールを使わせろ，という気分にしばしばなります．
そういう人は，大抵 rooted な端末にして使ったりします．</p>

<p>しかし，Playストアからダウンロードしたものでもマルウェアに当たるような状況で，rooted にするのは，リスクが低いかというと，腕組みしてしまいます．
いやいやリスク管理できてるから，というは，それはそれでよいわけですけれども．</p>

<p>BYOD なんていうキーワードも踊る昨今，そうでなくてもスマホなんて個人情報の束なわけです．
rooted な端末と非 rooted な端末の2台持ちで解決するのですが，何のために端末が小型になったのか，本末転倒な雰囲気がそこはかとなく，します．え? しません???</p>

<p>同様のことを考えている人はどうやら少なくないようで，busybox を追加で入れている人もいるようです．
でも，パス環境変数の問題とか，いろいろ苦労も多いです．
かつての私がそうでした．</p>

<p>広く世界を見渡すと，<a href="http://kevinboone.net/kbox2.html">kbox2</a> というツールプロジェクトがあります．
ファイルパス周りに関して，Cygwin や MSYS のようなトリックを加えて，種々の問題を解決しようとしています．
このアプローチには副作用も無くもないのですが，まあ，あらゆるモノゴトはトレードオフの問題ですから．</p>

<p>kbox2 は，なかなか良くできているのですが，インストールに一手間かかります．
Android端末エミュレータ (jackpal.androidterm) に依存しているので，環境の保守維持も手間です．</p>

<p>こういう手の煩雑さは，ツールで解決するのがスジです．
…というわけで，GUIツールをいくつか作りました．</p>

<p>細かいことは，<a href="http://www.monami-ya.jp/onebox-tools">会社のWebサイトに製品紹介があります</a>ので，そちらをご参照ください．
無償のものだけで環境構築は楽になりますが，315円支払うともっと楽になりますよ，という感じです．
苦労してでも無償で済ませたいという気持ちは良く解りますので．
私がそうですから．</p>

<p>今回リリースしたパッケージマネージャでは，kbox2 のベースシステムがインストールできる程度の機能しかありません．
あとは手動で整備して頂くことになります．
当然，これが完成のはずはありません．
「パッケージマネージャ」と名付けたからには，各種のdebパッケージを管理できるようにします．
そうしないと，困るからです，私が．</p>

<p>会社の製品にしているのに，こう言うのは宜しくないのですが，この製品は，儲ける目的で作っていません．
315円は，今後パッケージが増えてきたときのS3ストレージ代に消えるはずです．
完全に，"俺得"なソフトウェアです．
なので，たぶん同じ悩みをお持ちの方には，ジャストフィットするかなと思ったりしています．</p>

<p>ジャストフィットしないときは，無償/オープンソースで公開されている部分について，是非 <a href="https://bitbucket.org/onebox/oneboxpackagemanager/pull-requests">pull request を投げ</a>てください．
検討します．</p>
]]></content>
  </entry>
  
</feed>
