<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://www.monaka.org/"/>
  <updated>2016-01-03T06:20:41+00:00</updated>
  <id>http://www.monaka.org/</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RaspberryPi の GPIO アダプタは，便利]]></title>
    <link href="http://www.monaka.orgblog/2014/06/27/an-application-rpi-gpio-adapter/"/>
    <updated>2014-06-27T00:29:32+00:00</updated>
    <id>http://www.monaka.orgblog/2014/06/27/an-application-rpi-gpio-adapter</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>Arduino を始めとする，省ピンのマイコンを使っている方にはピンと来ない話かもしれませんが．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/1row-boards.jpg" alt="1列ピンのCPUボードたち" /></p>

<p>ある程度のピン数を持つ，機器組み込み向けのCPUボードには，ベースボードの接続用に，2列のヘッダピンを使っています．</p>

<p>作業机にあった，CPUボードを幾つか見繕ってきました．こんな感じ．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/2row-boards.jpg" alt="2列ピンのCPUボードたち" /></p>

<p>組み込み向けのCPUというのは，センサやらアクチュエータやらを操作することが多く，やたらとI/O端子がついています．
それらを一列に配置すると，基板のサイズが大きくなってしまいます．</p>

<p>そういう理由は解るのですが，一方で，試作する側としては2列では困る時があります．
<strong>2列だとブレッドボードに刺せないのです．ショートします．</strong></p>

<p>最初からきちんとしたベースボードの基板を起こしたり，ユニバーサル基板で頑張ればよいのではあります．
しかし，ブレッドボードはお手軽です．一度楽を味わってしまうと，人間は後戻りできません．</p>

<p>そんなわけで，ケーブルを自作したりするのですが，それもなかなか骨の折れる作業です．</p>

<p>手抜きをして，接触が不安定になりがちなメスのジャンパワイヤーを使って，3D配線を行うという暴挙に出たりします．
それはいけません．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/anti_pattern.jpg" alt="アンチパターン" /></p>

<p>など考えながら，CPUボードを仕舞おうとして，私の会社で製造販売している製品が目に入りました．</p>

<h2>RaspberryPi対応GPIO変換基板キット</h2>

<!-- more -->


<p>そのコストパフォーマンスの凄まじさに，一時代を築いた感もある Raspberry Pi ですが，お手軽電子工作のツールとして見た時に，一つだけ欠点があります．
それは，GPIO の端子が，13x2列のピンヘッダであることです．</p>

<p>これをケーブルで引き出しても，<strong>2列だとブレッドボードにさせないのです．ショートします．</strong></p>

<p>…あれ?</p>

<p>そのため，ブレッドボードに刺しやすくするような変換基板が売られています．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/rpi-gpio-connected.jpg" alt="RaspberryPi対応GPIO変換基板キット" /></p>

<p>…あれ?</p>

<p>これ， Raspberry Pi 以外の組み込み用CPUボードにも使えるのでは…?</p>

<h2>やってみた</h2>

<p>弊社ジャンク棚から，基板を2枚拾ってきました．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/rpi-gpio-boards.jpg" alt="基板2枚" /></p>

<p>Amazon で販売中の，<a href="http://www.amazon.co.jp/o/ASIN/B00GN3YQK8/monamiya-22">RaspberryPi対応GPIO変換基板キット (ケーブル無し)</a>の基板です．
製造過程で小キズがあったため，出荷から弾いたものです．</p>

<p>本来，リボンケーブルで繋いで使います．例えばこんなふうに．</p>

<p>ただ，このままの使用法だと，ケーブルコネクタの両脇に幅があるため，CPU基板のピンヘッダと干渉しそうです．
なので，13x2列のピンフレームと置換します．</p>

<p>そして，はんだ付けをします．
今回の私の用途では，左右両方にコネクタが必要でしたので，片方の基板は裏返して鏡像なるようにしました．</p>

<p>結果，こんな感じになります．
専有面積は大きくなりますが，ベースボードの設計について，ある程度の目処が付くまでの試験的なものですので．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/1row-connected.jpg" alt="1列化" /></p>

<p>この方法で1列化できるのは，通常の方法(そうでない方法については後述)では連続した26ピンになります．
多くの組み込み向けCPUボードは，それよりも遥かに多くのピン数があります．
しかし，特定の機能に関するピンは，ある程度近い位置に配置されるでしょう．
目的を絞って使う際には，便利に使えるのではと思います．
接触が不安定になりがちなメスのジャンパワイヤーを使うよりも，安心できるのではないでしょうか．</p>

<h2>余談: 最大30ピンまでOK</h2>

<p>実は，この変換基板，30ピンまで対応できます．</p>

<p>本稿を書く目的で，秋月まで行ったのですが，13x2列のピンフレームが品切れでした．
(Raspberry Pi 人気のせいでしょうか．)
仕方なく14x2列の品を買ってきたのですが…，</p>

<p>基板に当ててみて，ひらめきました．</p>

<p>基板には，LED点灯など，ちょっとした機能をブレッドボードなしで実装できるよう，ユニバーサル基板と同等の箇所を用意してあります．この部分を使うと，最大30ピンまで一列化ができます．</p>

<p><img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/30cols.jpg" alt="" />
<img src="/blog/2014/06/27/an-application-rpi-gpio-adapter/30cols-2.jpg" alt="" /></p>

<p>今回，一列化を試みるきっかけとなった<a href="http://kaneko-sys.co.jp/shop/00016.html">UCB-BF512基板</a>は，15x2列のピンヘッダがついています．
つまり，やろうと思えば，30の全ピンを一列化できるのでした．</p>

<p>基板のアートワークをした私自身，想定外のことでした．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monami-ya.mrb の開発環境(2014年6月版)]]></title>
    <link href="http://www.monaka.orgblog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/"/>
    <updated>2014-06-24T06:05:33+00:00</updated>
    <id>http://www.monaka.orgblog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb</id>
    <content type="html"><![CDATA[<p>SNS の外でご意見頂きまして．</p>

<blockquote><p>Monami-ya.mrb って，twitter 辺りでは目にするけれど，どんな環境で作っているのか判らない</p></blockquote>

<p>はい．断片的にはtweetなどしていますし，<a href="https://bitbucket.org/monami_ya_mrb/sample-env-jsp-bfin">OSX 上でのビルド環境等も(今のところ消極的に)公開</a>しているのではありますが．</p>

<p>ハードウェアがどんな感じなのかは，なかなか想像つかないという方も多いと思います．
特に Ruby 系の方は，組み込みボードそのものに面識が無かったりするでしょうし．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/target-all.jpg" alt="ターゲットハードウェア" /></p>

<p>写真を撮ったので，並べておきます．</p>

<!-- more -->


<h2>開発ホスト機</h2>

<p>しょっぱなから写真を撮り忘れました．
でもまあ機種名を挙げれば，想像つくかと思います．</p>

<p>MacBook Pro 2.8 GHz Intel Core 2 Duo．
すいぶんと古い箱です．
メモリは8GB．HDDは500GB．</p>

<p>この程度のスペックでも，monami-ya.mrb のビルドは，1分以内に終わります．</p>

<p>正直言うと，もう少し良いのが欲しいですけれどね…GCCのビルドまで行う場合には…．
(会社では，GCCのビルドは，クラウド上のビルドサーバを活用しています)</p>

<h2>ターゲット</h2>

<h3>CPU ボード + マザーボード</h3>

<p>開発のメインとなるターゲットボードは， <a href="http://wlst.jp/ele/bf533cb/">BF533CB</a> です．
Blackfin という DSP を積んでいます．メモリは RAM 16MB + 内蔵若干，永続ストレージは SPI Flash．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/bf533cb.jpg" alt="BF533CB" /></p>

<p>DSP というと特殊なプロセッサという印象を持たれるかもしれません．
char のビット幅が16だったり32だったりという変態，みたいな．</p>

<p>しかし，Blackfin に関して言えば，普通の RISC プロセッサとして使えます．char のビット幅は 8 ですし．
あまり知られてませんが，品番によっては Microsoft .NET-MF が動きます．uClinux も動きます．
しかも 500MHz の高速動作です．</p>

<p>問題は，情報が少ないことです．
特に日本語の情報をwebで求めようとすると，片手で収まるくらいの開発者にしか当たりません．
(いや，商社やメーカの中などに入れば，日本人の開発者も，もちろんそれなりにいらっしゃいます)</p>

<p>CPUボードだけでも monami-ya.mrb は動作しますが，シリアルポートのコネクタが便利なので，マザーボードを併用しています．</p>

<p>BF533CB は，シンプルでとてもよいボードなのですが，今後の量産計画は未定のようなのが難点です．
近日中に，BF533CB から，<a href="http://www.kaneko-sys.co.jp/shop/00016.html">金子システム製の UCB-BF512</a>へ変更する予定でいます．</p>

<h3>USB-serial アダプタ</h3>

<p>最近の廉価帯ARMボードだと，USB-serialのアダプタをオンボードで積んでいる場合も多いですが，現在使っている BF533CB にはありませんので，外付けしています．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/usb-serial.jpg" alt="USB-serial" /></p>

<p>シグナルが3.3Vレベルであれば，何を使っても良いのでしょうけれども，私は秋月電子通商の<a href="http://akizukidenshi.com/catalog/g/gK-01977/">FT232RL USBシリアル変換モジュール</a>を使っています．
モジュールのみで900円と，微妙なお値段ではあります．
しかし，UART は，Lチカが済んだあとから開発終了までデバッグ用として永く使うものですので，安定していることと，壊れても代替がすぐに手に入るほうがよいと思います．</p>

<h3>JTAG アダプタ</h3>

<p>UCB-BF512 は，出荷時点でブートローダとして u-boot が書き込まれていますし，BF533CB も一度 JTAG 経由で書き込めば，同様に u-boot が使えます．</p>

<p>monami-ya.mrb は，uClinux と同様に u-boot 経由でブートできます．
よって，JTAG デバッグアダプタは不要です．
…と言えれば話は楽なのですが，GDB 無しでは PC 上の mruby 開発が難しいのと同様に，JTAG デバッガなしでの monami-ya.mrb の開発は困難を極めます．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/sashimi-knife.jpg" alt="刺身包丁" /></p>

<p>私が使っているのは，<a href="http://www.amazon.co.jp/o/ASIN/B003MG4BH2/monamiya-22">PizzaFactory Tiny JTAG</a> です．
つまるところ JTAG ですので，ARM用の JTAG アダプタや FT2232 が載ったモジュールを使うことはできるはずなのですが…．
私自身が PizzaFactory Tiny JTAG の開発を行った時に，BF533 プロセッサで謎の相性問題を引き起こした経験があります．</p>

<p>納期の無い趣味なら，相性問題でアタマを抱えるのも愉しみのうちでしょう．
少しでもお仕事が絡んでいるのなら，人件費と比べて，サクッと買ったほうが安いです．</p>

<h2></h2>

<p>ざっとこんな感じです．
(組み込み開発 == ロジアナやオシロといった計測器が積まれた机)，のような印象を持たれるかもしれませんが，実際のところ，RTOS や VM のコア部分での開発では，それらの計測器はあっても無駄です．プローブを挿す場所がありませんから．</p>

<p>開発ホスト機を除くと，予算的には，1万5千円もあればお釣りが来るという感じでしょうか．
「STM32F4-discovery は 2千円でお釣りが来るのに！」っていう気もしますが，スペックが違うので比べるのは野暮かなぁとも思います．
STM32F4-discoverty は .NET-MF は走りますが，uClinux が走らないですし．</p>

<p>取り留めもないですが，本稿は日記なので，纏めなくても良いですね．それでは．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTOS は monami-ya.mrb を遅くするか?]]></title>
    <link href="http://www.monaka.orgblog/2014/06/17/rtos-makes-mruby-slow-p/"/>
    <updated>2014-06-17T02:01:52+00:00</updated>
    <id>http://www.monaka.orgblog/2014/06/17/rtos-makes-mruby-slow-p</id>
    <content type="html"><![CDATA[<p>とある，案件契約ではない非公式なやりとりから．
個人が特定されるような内容ではないので，これくらいなら許され…ますよね．</p>

<blockquote><p>mruby 自身もC言語に比べて処理に時間がかかるところに，RTOSが入るとさらに遅くなったりしないのか少し心配です．</p></blockquote>

<p>個人が特定されるどころか，同じような直感を持たれる方，案外多いのではないかなと思います．
機器組み込み業界で働いておられるエンジニアの中にもいらっしゃるのではないかな，とも．</p>

<p>端的に言うと，RTOS が入ると遅くなるというのは，概ね誤解です．
いやもちろん RTOS がゼロオーバヘッドだと言っているわけではありません．</p>

<p>いまや<a href="http://www.monami-ya.jp/product/monami-ya.mrb/about/index.html">会社の製品の機能として提供されている部分</a>なので，本来なら会社の公式ページに書くべきところですが，そうすると定量計測してホワイトペーパーにしないと格好がつきません．
そこまで喫緊の話でもない(非公式なやりとりですし)ので，こちらに書いておきます．</p>

<h2>RTOS とは何か?</h2>

<!-- more -->


<h3>そもそも OS とは何か</h3>

<p>RTOS の前に OS とは何か，から確認していきましょう．
多くのデスクトップ環境では，CPUのコア数はたかだか8個程度でしょうけれども，OS上ではより多くのCPUが存在しているかのように見えています．
本当は1つしかないメモリ空間は，MMUなどメモリ管理ハードウェアの支援を得て，プロセス毎に分けつつも，プロセス内では全メモリを専有しているように見せかけています．
ストレージも，本当は1つしかなくても，ファイルシステムという構造を導入することで，複数のプロセスに競合しないように調停されます．</p>

<p>ざっくり言うと，OS というのは，何かを抽象化し管理し保護するソフトウェアです．
現在的なOSのほとんどは，プロセスと呼ぶ抽象化した計算機を管理し，処理がプロセスから外に漏れないようにして，物理的な計算機資源を保護しています．</p>

<h3>RTOS は何を保護するものか</h3>

<p>RTOS の抽象化対象は，CPUです．
実際には全ての処理は時分割されているのですが，それぞれの処理はCPUを専有しているものと(RTOSによって)勘違いさせられています．
そして保護対象は，RT == Real Time が示す通り，時間です．
なので，多くの RTOS は時間以外のリソースの保護については，かなり無頓着です．
最近になって，セキュリティや機能安全についての世論が固まったため，リソース保護機能付きのRTOSも増えました．
それでも，リソース保護機能が時間保護を阻害するとなれば，時間保護のほうが優先されます．</p>

<p>ここでいう時間には，2種類あります．</p>

<p>ひとつは物理時間です．これは一般的な「壁時計」と同じと思って頂いて構いません．
RTOS自身オーバヘッドが影響するので，重要といえば重要ではあります．
しかし，CPUに与えるクロック次第で改善されやすいものでもあります．</p>

<p>もう一つは実行順序制約です．RTOS ではこちらのほうが重要です．
RTOS では，実行順序が事前に見積もれなければならない，とされます．
そして，優先されるべき処理については，他の処理を止めてでも実行して良い，とされます．
他の処理を止めれば，実行順序を見積もりやすくなりますから．</p>

<p>通常のOSにも実行優先度の概念はあります．しかしRTOSの場合は強烈です．
アプリケーション設計者が必要と思うなら，デバイスへの割り込みすら止めることができます．
CPUが持つ計算資源の全てを，特定の処理に割り当てられる．
それが RTOS の特徴です．</p>

<p>RTOS は時間を管理する OS なので，これは当然の特徴と言えます．
(計算資源 == 計算に要するクロック数 == 時間)ですから．</p>

<h2>RTOS のオーバヘッド</h2>

<p>RTOS は，複数の処理(タスク)に対して，それぞれが CPU が専有しているかのように見せかける抽象化を行っています．
抽象化の裏には，オーバヘッドがあります．
これは，時間量として見ると，コンテキストスイッチに要する時間で表されます．
商用 RTOS の星取表で，この数値が俎上にあるのを見たことがある方も多いでしょう．</p>

<p>あまりにも商用 RTOS の営業さん達がけたたましく言うので，このオーバヘッドが無視できないと誤解する方が後を絶ちません．
しかし実際のところ，このオーバヘッドが致命的かどうかは，アプリケーションに依ります．</p>

<p>mruby は，大目に見ても C言語で書くよりも2桁のオーダで遅くなります．
「週に何度も口にしない飴玉のカロリーを気にするなら，まず毎日の三食を見直しましょう」という喩えでお分かり頂けますでしょうか．</p>

<p>なお，RTOS のオーバヘッドとして有名な指標には，コンテキストスイッチの他に，割り込みへの応答時間もあります．
こちらも，似たような議論が成り立ちます．</p>

<h2>「RTOS は重い」神話の，ミもフタもない理由</h2>

<p>とはいえ，「RTOS は重い」にも相応の理由は思いつきます．
それは，優先度設計の難しさ，です．</p>

<p>既述の通り，RTOS では，高優先度の処理は，CPUへの割り込みさえも止められます．
このような条件で，高優先度で実行される処理の設計が悪くCPUを専有した場合は，システムは最悪の状態になります．
低優先度の処理にはいつまでたっても，処理の機会が与えられません．
(ちなみに，このような状態に陥った低優先度の処理は，RTOS 界隈の用語では，"飢餓状態"としばしば言われます．)</p>

<p>日本の組み込み業界では，優先度設計から詳細実装まで全てを一人でこなす例もありますが，
上流が検討もしないで適当に優先度を割り振った仕様書を元に，受託で(再受託で(再々受託で))詳細を実装するということが，しばしば行われます．
こういうケースでは，組み上げてみたら真っ当に動かない，ということは，珍しくなかったりします．</p>

<p>それは設計の不備であり，RTOS が悪いわけではないのですが．
外から買ってきた RTOS をスケープゴートにする，ということが起こるのは，人として理解できないわけでもありません．</p>

<h2>monami-ya.mrb は，RTOS で処理が重くなったりはしません．</h2>

<p>…もちろん，高優先度の処理で無限ループなどされるとダメですけれども．</p>

<p>優先度の設定に気をつけている限りにおいて，monami-ya.mrbはRTOSと併用しても処理が重くなったりはしません．
その辺りには，20年前から RTOS 関わり，TOPPERS/FI4 など RTOS の実装にも関わった経験を活かしてあります．</p>

<p>本家 mruby は…? メモリアロケータの部分をキチンとケアできれば，大丈夫にできると思いますよ．たぶん．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb が sandbox サポートを追加する理由]]></title>
    <link href="http://www.monaka.orgblog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/"/>
    <updated>2014-06-15T00:58:37+00:00</updated>
    <id>http://www.monaka.orgblog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support/">先ほど</a>の続き．</p>

<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">sandbox の需要を理解するには，前提として，Webサーバと RTOS とで，スレッドの使われた方が違う，ということを，知識ではなく，腹に落としていないといけない．世界観の問題．&#10;mruby のコアを弄るような方々は，知識としては心得ているはず，だが．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/status/477722322862759938">June 14, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>など言って，実装理由を詳説しないのは，ちょっとイケ好かないかなということで．</p>

<p>本題に入るには，OS が提供する thread の使い方について，寄り道をする必要があります．</p>

<p>注: 本稿は，mruby の内部構造，特に，mrb_state と mrbgems の関係を理解していることを前提にしています．</p>

<!-- more -->


<h2>thread の使い方，2通り</h2>

<p>thread は，たかが機構なので，使い方は幾通りもありえます．</p>

<p>しかし，代表的なパターンとして，2通りの使い方があります．
たぶんデザインパターン的な名前がありそうですが，知らないのでオレオレ命名で．</p>

<h3>対称(symmetric)なスレッド</h3>

<p>同じデータ構造で同じ処理を持つスレッドが，多数あるパターンです．</p>

<p>非同期に起こる多数の要求を裁くときに，しばしば見られます．
具体例としては，サーバのワーカースレッドや，ファイルシステム内の処理などがあります．</p>

<p><img src="symmetric.png" alt="対称なスレッド" /></p>

<h3>非対称なスレッド</h3>

<p>複数のスレッドが，それぞれ異なるデータ構造を管理するパターンです．
データ構造が異なるのですから，各スレッドが行う処理も，当然異なります．</p>

<p>「そういう時はプロセス分けるだろ」と思った方は，POSIX や Windows に頭を侵されています．</p>

<p>多くの RTOS では，スレッドに相当する概念はあります．
しかし，プロセスに相当するリソース抽象化概念がありません．(注: 持っている RTOS もあります)</p>

<p>また，POSIX や Windows も，OS の内部では，スレッドに相当する概念はありますが，リソース抽象化の概念は無いか，希薄です．
OSが抽象化を提供しているので，当然です．</p>

<p><img src="asymmetric.png" alt="非対称なスレッド" /></p>

<h2>mruby のスレッドバインディングとmrbgems</h2>

<p>mruby は，言語としては，今のところスレッドを提供していません．
しかし，マルチスレッディングの要求は，上記の2通りのいずれにせよ，間違いなくあります．</p>

<p>mruby を下位 OS のスレッドとバインドする典型的手法として，スレッド毎に mrb_state を割り当てる手法があります．</p>

<p>私は mod_mruby のソースコードを精読したわけではないですが．
サーバへの mruby 活用の代表である， mod_mruby も，Apache のワーカースレッドに対し 1 つの mrb_state を割り当てているようです．
この場合は，各スレッドは「対称」です．
全ての mrb_state は，同じように初期化されて構いません．
使える mrbgems も全てのスレッド(mrb_state)で同じもので構いません．</p>

<h2>さて，本稿の本題．</h2>

<p>非対称なスレッド構成を取ったシステムを考えてみます．</p>

<p>実例として，uITRON, OSEK/VDX クラスの RTOS 上にファイルシステムとユーザアプリを mruby のみで作るとします．</p>

<p>構成としては，デバドラ + ファイルシステム + ユーザアプリになります．</p>

<p>デバドラとファイルシステムは，再利用性が高いので，おそらく mrbgems として実装するでしょう．
そして，非同期処理になりますので，(デバドラ + ファイルシステム)のスレッドと，ユーザアプリのスレッドに分けるでしょう．スレッド間通信も mrbgems として提供するかもしれません．
常識的な RTOS のアプリ設計です．</p>

<p>ここで，思い出してみましょう．
現在の mruby では，全ての mrb_state で，全ての mrbgems を共有します．
つまり，スレッドを分けても，ユーザアプリは，ファイルシステムを迂回して直接デバドラのメソッドを叩けます．</p>

<p><img src="sandbox.png" alt="sandboxの有無と非対称スレッド" /></p>

<p>これを気持ち悪くないと思う開発者が居たとしたら，別の職種にジョブチェンジしたほうがよいでしょう．</p>

<h2>なぜ他のmruby開発者はsandboxを必要と思わないのか．</h2>

<p>今のところ，mruby へ sandbox を仕掛ける実装は殆どみかけません．
mattn 氏が <a href="https://github.com/mattn/mruby-sandbox">mruby-sandbox</a> なる実験をしてはいますけれども．
私はかつて，<a href="https://github.com/mruby/mruby/pull/1844">lazy initialization なる提案</a>をしていて，これは sandbox を狙ったものだったのですが，意図がうまく伝わらなかったのか，フルボッコに終わりました．</p>

<p>実のところ，彼らでないので真の理由は解りません．
しかし，私の想像が及ぶ限りにおいて，必要と思わない理由は，2種類あります．</p>

<h3>説: Web サーバくらいまでしか考えてない</h3>

<p>ひとつは，"くみこみ！"など言いながらも，結局 web サーバのことまでしか考えが及ばないから．
対称なスレッドだけですむ世界なら，今の実装でも十分です．</p>

<p>もちろん，世界最高水準の開発者集団ですから，非対称スレッドの設計についても，頭では理解できておられるでしょう．
それと，腹に落として理解できるというのは，必ずしも一致しません．
技術というものの難しいところであります．</p>

<h3>説: コードゴルフに偏りすぎている</h3>

<p>もう一つは，組み込み系技術者たちは，小さな機器組み込みに偏りすぎているから．
ちっちゃいもの好きは，ニッポンの組み込みのガラパゴ特徴ですが，mruby も漏れずに思えます．
Mindstorms/NXT やらFM3-USBSTICKやら STM32F4 やら，RTOSを載せるのさえも一苦労な環境に，開発者たちの視線が集中しています．</p>

<p>コードゴルフは私も嫌いではないですが．
現在でもオンチップ 256KB は珍しくないマイコン世界．
MB 級の RAM がオンチップになるのは時間の問題なのになぁ…．
盆栽みたいなものですかね．</p>

<p>ともあれ，mrb_state をひとつ持たせるのがやっとの環境では，スレッドと mrb_state の組が複数存在する環境で起こることを想定するのは難しいでしょう．
私は，Mocloudos や mruby + TOPPERS + Blackfin といった，潤沢なスペックを持つ(とはいってもデスクトップやサーバに比べると極めて貧弱な)環境上で mruby を動作させています．
そのため，早期に気がついた，ということはあるでしょう．</p>

<h2></h2>

<p>というわけで，mruby で sandbox が何故必要なのか，なぜ本家に登場しないのか，ざざっと意見表明いたしました．</p>

<p>こう言ってはナンですが，今の体制のままだと，本家mrubyがベアメタルな機器組み込みに応用されるようになるのは，ずいぶんと先になるんじゃないかな…．</p>

<p>まあ，別に，"本家"に拘る必要も無いといえば無いのですが．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb での sandbox サポート]]></title>
    <link href="http://www.monaka.orgblog/2014/06/14/monami-ya-dot-mrb-sandbox-support/"/>
    <updated>2014-06-14T23:45:14+00:00</updated>
    <id>http://www.monaka.orgblog/2014/06/14/monami-ya-dot-mrb-sandbox-support</id>
    <content type="html"><![CDATA[<p>たぶん会社の公式サイトに乗るべき情報のような気もしますが．
まだ master ブランチどころか develop ブランチにも入っていないので，メモとして，こちらに書いておきます．</p>

<p>mruby の機器組み込み向け fork である monami-ya.mrb に，mrbgems の sandbox 機能を追加しました．
何故この機能が必要なのか，という話は<a href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/">後日する</a>として，どう使うかということを記しておきます．
master ブランチに入るまでに，API 等の変更があるかもしれません．</p>

<p>また，mruby 本体に取り込まれるかどうかは，解りません．</p>

<h2>機能概要</h2>

<!-- more -->


<h3>前提知識</h3>

<p>本家 mruby では，mrbgems による機能拡張がサポートされています．
これは，monami-ya.mrb でも同様です．</p>

<p>mruby は，複数の実行環境を持てます．
実行環境は mrb_state という構造体が代表します．</p>

<p>mrb_state は，mrb_open() の呼び出しによって作成されます．
mrb_open() の実行時には，build_config.rb で静的に指定した全ての mrbgems が，
mrb_state で使用するものとして初期化されます．</p>

<h3>sandbox が提供する機能</h3>

<p>mrb_state ごとに，利用する mrbgems を限定できます．
限定する mrbgems は，静的に指定します．</p>

<h2>実装</h2>

<p>実例として，monami-ya-mrb/mruby-sqlite3 と monami-ya-mrb/mruby-bin-sqlite3 のみを含む sandbox を挙げます．</p>

<p>monami-ya-mrb/mruby-sqlite3 は monami-ya-mrb/mruby-bin-sqlite3 に依存しています．</p>

<h3>build_config.rb への記述</h3>

<p>build_config.rb に，sandbox メソッドを記述できるようになりました．</p>

<p>```
MRuby::CrossBuild.new(&lsquo;jsp-bfin&rsquo;) do |conf|
&hellip;
  conf.sandbox(&lsquo;sqlite&rsquo;) do</p>

<pre><code>gem :github =&gt; 'monami-ya-mrb/mruby-sqlite3'
gem :github =&gt; 'monami-ya-mrb/mruby-bin-sqlite3'
</code></pre>

<p>  end
&hellip;
```</p>

<p>この例では &lsquo;sqilte&rsquo; という名前の sandbox を指定しています．
ブロック内の gem は，従来のと同じです．</p>

<p>このような記述があるとき，minirake を実行すると，build/jsp-bfin/mrbgems/gem_init.c には，従来に加えていくつかの定義が生成されます．</p>

<p>```
void
mrb_init_sqlite_sandbox(mrb_state *mrb) {
  GENERATED_TMP_mrb_mruby_bin_sqlite3_gem_init(mrb);
  GENERATED_TMP_mrb_mruby_sqlite3_gem_init(mrb);
}</p>

<p>void
mrb_final_sqlite_sandbox(mrb_state *mrb) {
  GENERATED_TMP_mrb_mruby_bin_sqlite3_gem_final(mrb);
  GENERATED_TMP_mrb_mruby_sqlite3_gem_final(mrb);
}</p>

<p>struct mrb_sandbox_inib mrb_sandbox_inib_array[] = {
  {</p>

<pre><code>mrb_init_sqlite_sandbox,
mrb_final_sqlite_sandbox,
</code></pre>

<p>  },
  { NULL, NULL }
};
```</p>

<p>さらに， build/jsp-bfin/mrb_sandbox_id.h というヘッダファイルが生成されます．</p>

<p>```
/<em>
 * IMPORTANT:
 *   This file was generated!
 *   All manual changes will get lost.
 </em>/</p>

<h1>define MRB_SANDBOX_SQLITE (1u)</h1>

<p>```</p>

<h3>依存性チェック</h3>

<p>もし， mruby-sqlite3 のみを指定し，依存性のある mruby-bin-sqlite3 を
含め忘れたとします．</p>

<p>```
MRuby::CrossBuild.new(&lsquo;jsp-bfin&rsquo;) do |conf|
&hellip;
  conf.sandbox(&lsquo;sqlite&rsquo;) do</p>

<pre><code>gem :github =&gt; 'monami-ya-mrb/mruby-sqlite3'
</code></pre>

<p>  end
&hellip;
```</p>

<p>このような依存性の破れを含む記述で minirake を実行した場合には，エラーとなります．</p>

<p><code>
(in /Users/monaka/git/monami-ya.mrb/monami-ya.mrb)
rake aborted!
GEM mruby-bin-sqlite3 not found in the sandbox `sqlite'
rakefile:27:in `load'
</code></p>

<h3>実行時の sandbox 生成</h3>

<p>API として mrb_open_sandbox() および mrb_open_sandbox_allocf() が追加になりました．</p>

<p><code>
mrb_state* mrb_open_sandbox(unsigned int sandbox_id);
mrb_state* mrb_open_sandbox_allocf(mrb_allocf, uintptr_t ud, unsigned int sandbox_id);
</code></p>

<p>引数 sandbox_id は，mrb_sandbox_id.h にある定義を与えます．</p>

<p><code>
  mrb = mrb_open_sandbox(MRB_SANDBOX_SQLITE);
</code></p>

<p>sandbox_id が 0 のときは，mrb_open() を呼んだ時と同じになります．
すなわち，登録されている全ての mrbgems が初期化されます．</p>

<p>どの sandbox を指定したかは，mrb_state に保持されます．
そのため，mrb_state を破棄する際には，単に mrb_close() を呼び出してください．</p>
]]></content>
  </entry>
  
</feed>
