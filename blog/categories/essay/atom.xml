<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: essay | もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//blog/categories/essay/atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-06-17T13:06:32+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RTOS は monami-ya.mrb を遅くするか?]]></title>
    <link href="http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p/"/>
    <updated>2014-06-17T11:01:52+09:00</updated>
    <id>http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p</id>
    <content type="html"><![CDATA[<p>とある，案件契約ではない非公式なやりとりから．
個人が特定されるような内容ではないので，これくらいなら許され…ますよね．</p>

<blockquote><p>mruby 自身もC言語に比べて処理に時間がかかるところに，RTOSが入るとさらに遅くなったりしないのか少し心配です．</p></blockquote>

<p>個人が特定されるどころか，同じような直感を持たれる方，案外多いのではないかなと思います．
機器組み込み業界で働いておられるエンジニアの中にもいらっしゃるのではないかな，とも．</p>

<p>端的に言うと，RTOS が入ると遅くなるというのは，概ね誤解です．
いやもちろん RTOS がゼロオーバヘッドだと言っているわけではありません．</p>

<p>いまや<a href="http://www.monami-ya.jp/product/monami-ya.mrb/about/index.html">会社の製品の機能として提供されている部分</a>なので，本来なら会社の公式ページに書くべきところですが，そうすると定量計測してホワイトペーパーにしないと格好がつきません．
そこまで喫緊の話でもない(非公式なやりとりですし)ので，こちらに書いておきます．</p>

<h2>RTOS とは何か?</h2>

<!-- more -->


<h3>そもそも OS とは何か</h3>

<p>RTOS の前に OS とは何か，から確認していきましょう．
多くのデスクトップ環境では，CPUのコア数はたかだか8個程度でしょうけれども，OS上ではより多くのCPUが存在しているかのように見えています．
本当は1つしかないメモリ空間は，MMUなどメモリ管理ハードウェアの支援を得て，プロセス毎に分けつつも，プロセス内では全メモリを専有しているように見せかけています．
ストレージも，本当は1つしかなくても，ファイルシステムという構造を導入することで，複数のプロセスに競合しないように調停されます．</p>

<p>ざっくり言うと，OS というのは，何かを抽象化し管理し保護するソフトウェアです．
現在的なOSのほとんどは，プロセスと呼ぶ抽象化した計算機を管理し，処理がプロセスから外に漏れないようにして，物理的な計算機資源を保護しています．</p>

<h3>RTOS は何を保護するものか</h3>

<p>RTOS の抽象化対象は，CPUです．
実際には全ての処理は時分割されているのですが，それぞれの処理はCPUを専有しているものと(RTOSによって)勘違いさせられています．
そして保護対象は，RT == Real Time が示す通り，時間です．
なので，多くの RTOS は時間以外のリソースの保護については，かなり無頓着です．
最近になって，セキュリティや機能安全についての世論が固まったため，リソース保護機能付きのRTOSも増えました．
それでも，リソース保護機能が時間保護を阻害するとなれば，時間保護のほうが優先されます．</p>

<p>ここでいう時間には，2種類あります．</p>

<p>ひとつは物理時間です．これは一般的な「壁時計」と同じと思って頂いて構いません．
RTOS自身オーバヘッドが影響するので，重要といえば重要ではあります．
しかし，CPUに与えるクロック次第で改善されやすいものでもあります．</p>

<p>もう一つは実行順序制約です．RTOS ではこちらのほうが重要です．
RTOS では，実行順序が事前に見積もれなければならない，とされます．
そして，優先されるべき処理については，他の処理を止めてでも実行して良い，とされます．
他の処理を止めれば，実行順序を見積もりやすくなりますから．</p>

<p>通常のOSにも実行優先度の概念はあります．しかしRTOSの場合は強烈です．
アプリケーション設計者が必要と思うなら，デバイスへの割り込みすら止めることができます．
CPUが持つ計算資源の全てを，特定の処理に割り当てられる．
それが RTOS の特徴です．</p>

<p>RTOS は時間を管理する OS なので，これは当然の特徴と言えます．
(計算資源 == 計算に要するクロック数 == 時間)ですから．</p>

<h2>RTOS のオーバヘッド</h2>

<p>RTOS は，複数の処理(タスク)に対して，CPU が複数あるように見せかける抽象化を行っています．
抽象化の裏には，オーバヘッドがあります．
これは，時間量として見ると，コンテキストスイッチに要する時間で表されます．
商用 RTOS の星取表で，この数値が俎上にあるのを見たことがある方も多いでしょう．</p>

<p>あまりにも商用 RTOS の営業さん達がけたたましく言うので，このオーバヘッドが無視できないと誤解する方が後を絶ちません．
しかし実際のところ，このオーバヘッドが致命的かどうかは，アプリケーションに依ります．</p>

<p>mruby は，大目に見ても C言語で書くよりも2桁のオーダで遅くなります．
「週に何度も口にしない飴玉のカロリーを気にするなら，まず毎日の三食を見直しましょう」という喩えでお分かり頂けますでしょうか．</p>

<p>なお，RTOS のオーバヘッドとして有名な指標には，コンテキストスイッチの他に，割り込みへの応答時間もあります．
こちらも，似たような議論が成り立ちます．</p>

<h2>「RTOS は重い」神話の，ミもフタもない理由</h2>

<p>とはいえ，「RTOS は重い」にも相応の理由は思いつきます．
それは，優先度設計の難しさ，です．</p>

<p>既述の通り，RTOS では，高優先度の処理は，CPUへの割り込みさえも止められます．
このような条件で，高優先度で実行される処理の設計が悪くCPUを専有した場合は，システムは最悪の状態になります．
低優先度の処理にはいつまでたっても，処理の機会が与えられません．
(ちなみに，このような状態に陥った低優先度の処理は，RTOS 界隈の用語では，"飢餓状態"としばしば言われます．)</p>

<p>日本の組み込み業界では，優先度設計から詳細実装まで全てを一人でこなす例もありますが，
上流が検討もしないで適当に優先度を割り振った仕様書を元に，受託で(再受託で(再々受託で))詳細を実装するということが，しばしば行われます．
こういうケースでは，組み上げてみたら真っ当に動かない，ということは，珍しくなかったりします．</p>

<p>それは設計の不備であり，RTOS が悪いわけではないのですが．
外から買ってきた RTOS をスケープゴートにする，ということが起こるのは，人として理解できないわけでもありません．</p>

<h2>monami-ya.mrb は，RTOS で処理が重くなったりはしません．</h2>

<p>…もちろん，高優先度の処理で無限ループなどされるとダメですけれども．</p>

<p>優先度の設定に気をつけている限りにおいて，monami-ya.mrbはRTOSと併用しても処理が重くなったりはしません．
その辺りには，20年前から RTOS 関わり，TOPPERS/FI4 など RTOS の実装にも関わった経験を活かしてあります．</p>

<p>本家 mruby は…? メモリアロケータの部分をキチンとケアできれば，大丈夫にできると思いますよ．たぶん．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[過去の事例だとこの手のOSSは長期的には失われる結果になりそうです]]></title>
    <link href="http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly/"/>
    <updated>2014-05-31T18:52:30+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly</id>
    <content type="html"><![CDATA[<p>おお，さすが OSS 世界の長老．キレの良い予言でございます．</p>

<p><a href="https://twitter.com/yukihiro_matz/status/472033974219325440">https://twitter.com/yukihiro_matz/status/472033974219325440</a>">https://twitter.com/yukihiro_matz/status/472033974219325440">https://twitter.com/yukihiro_matz/status/472033974219325440</a></a></p>

<!--
https://twitter.com/yukihiro_matz/status/472033974219325440
@monamour555 まあ、どうforkするかはご自由で私から強制することはできませんが、過去の事例だとこの手のforkしたOSSは長期的には失われる結果になりそうです。
-->


<p>全く御意でございます．低頭拝聴です．</p>

<p>賤民である私も，OSS という言葉が無かったころ，Ruby が世に放流された頃には，この世界を見ていた気も無くもないですが．
きっと気のせいですね．
uClinux, Xen, Android で kernel の fork が起こったのは，失われる運命だったのですね．だめだ fork はダメだ．失われる！だめだ！</p>

<h2>やっぱ fork はダメだ失われる！</h2>

<p>あーやっぱり，私が書いたコードなんて，消えちゃうよなー．すべからく，そういう人生だったしなー．何しろ長老がそう言っているもんなー．
って陰惨に思いながら，残りのコードを書いていたのですが．</p>

<p>…あれ?</p>

<!-- more -->


<p>コンパイルが通らないよ?</p>

<p><code>
mrb_proc_new(mrb, mrb-&gt;irep[n],
</code></p>

<blockquote><p>んー? んー? ググル先生に聞いても解法がわからないよー．コピペできなよー．えーん．
こんな単純なところでコピペできない OSS なんか，使えないよー．マサカリ担いだ人しか使えない処理系なんてー (棒</p></blockquote>

<h2>自分で fork しまくる OSS は長期的には失われれる運命になりそうです．</h2>

<p>あはは，忘れていました．
IREP の扱い方，途中で，変わりました．
mruby のコア開発者なら，当たり前の知識ですよね．アテクシ，死ねばいいのに．</p>

<p>コードベースの進化は，OSS の華です．いいんじゃないですかね，
ただし，ユーザがその変更についていけていない OSS が，長期的には失われなかったのかな．</p>

<h2>タマにはマジメに．</h2>

<p>賤民の私に言わせてもらえるなら，これ，良くない兆候ですよ．</p>

<p>この節だけは，マジメに言いますけれど．</p>

<p>私が fork したコードなんてどうでもよいです．</p>

<p>良くない兆候ですよ． マージされ得ないオレオレ fork を繰り返して周りがついてこれなくなっている，<strong><em>本家のコード</em></strong> が．</p>

<p>過去の事例によると．
ブログエントリって，エッジ効いた技術に平民がどれだけついてこれているかを示す，解りやすい指標ですからね．</p>

<p>何言ってやがるんだと思うなら， mrb_proc_new か何かでググりゃいいんじゃないですかね．
軒なみ mrb->irep[n] ですから，記述が．少なくとも本稿執筆時点では．</p>

<p>角が立つのを承知で，(でももう，どーでもいいので)，事例を言えば，uT 以降の T-kernel とか，新世代以降の TOPPERS とかですね．
技術的に正しいながらも，説明不十分でプレゼンスを落としたOSS，しばしば見かけるのは気のせいですかね．</p>

<p>mruby，どうなのですかね? &ldquo;長期的な視点"を持っているグルには，答えが見えているに違いない．信じるのじゃ．
…ので，大丈夫ですかね．</p>

<p>どうなのですかね?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[機器組み込み屋がRailsアプリを出した理由]]></title>
    <link href="http://www.monaka.org/blog/2014/05/24/why-i-create-rails-app/"/>
    <updated>2014-05-24T14:57:08+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/24/why-i-create-rails-app</id>
    <content type="html"><![CDATA[<p>会社名義で出したサービスの裏話．</p>

<p>機能としては，ソフト屋さんから別段の注目を浴びるほどのものでもなく．
プレスリリース等派手なことはしませんでしたが．
<a href="http://www.monami-ya.jp/blog/2014/05/24/movsign-map-redirect-beta/">合同会社もなみ屋の名義で，Webアプリをリリース</a>しました．</p>

<!-- more -->


<p>ほんと，機能としては大したものではないです．</p>

<ul>
<li>緯度経度情報に対して，短縮URLを発行する．発行した人しか編集はできない．</li>
<li>短縮URLの呼び元のHTTPヘッダを読んで，適切なURL (Android だったら Android Mapsとか，フィーチャーフォンなら Google Static Maps とか)に飛ばす．</li>
<li>どの短縮URLが何回呼ばれたか，統計を取る．</li>
</ul>


<p>やる気になれば，誰でもやれるネタです．
しかし，調べてみたところ，意外なことに，全く同一の機能を提供するサービスは無いようです．</p>

<h2>別に遊んでいるわけではなくて</h2>

<p>たぶん，もなみ屋を知っている人にとって，リリース告知を受け取った時の第一声は，「機器組み込み屋がなに Rails で遊んでんの?」かなと思います．</p>

<p>でもこれ，実は，(もなみ屋にしては珍しく!)，技術先行ではなくて，需要先行のサービスだったりします．
ファーストユーザが既に決まっています．どうしたんだ，地に足付けているなんて，弊社らしくないぞ．</p>

<h2>やっぱり紙は最強だから．</h2>

<p>もなみ屋の活動拠点は，浅草が近くてスカイツリーも近く，外国人向けのゲストハウスも多いという，IT活用型観光にとっては最高のテスト環境だったりするわけです．</p>

<p>そんななかで，徐々に判ってきたことなのですが．
スマホ街歩きって，技術者と一部のオタクだけが盛り上がりはするけれども，実用的ではないのですよ．
(別に特定地区の頑張りを dis る意図は無いです)</p>

<p>紙，印刷物っていうのは，やはり最強です．
シャチハタスタンプのスタンプラリー，最強です．
A3折りたたみのグルメマップ，最強です．</p>

<p>次点で，パッシブNFCタグ辺りかな…．電池交換不要なパッシブタグは，紙に準じます．
使える端末が少ないじゃん，というデメリットもありますが．</p>

<p>BLE…うーん．まあ，保守体制が盤石なら．</p>

<p>専用スマホアプリ? ダメでしょ．全然ダメ．
地図の AR マッピングとか，カメラと液晶をブン回して，どんだけ電池持つと思ってるのよ，って話ですよね．(…言っちゃった)</p>

<p>しかし，道案内(ナビアプリ)は，重要です．
特に土地勘のない人を相手にする観光分野では．
この点で，スマホ・タブレット・ガラケーは大事．</p>

<p>そんなわけで，「観光客の満足度を高めたまま帰途について頂くには，offine to online の連続性を持たせつつ，どれだけ offilne の情報で済ませるかというのが重要である．」
てなことが見えてきたわけです．バッテリーを使わないことの正義，みたいなものを．</p>

<p>具体的に言うなら，印刷物や掲示物として存在するQRコードやパッシブNFCタグから，地図アプリへのスムーズな連携，とかですね．</p>

<h2>でも，統計情報が取れないと</h2>

<p>じゃあ QRコードに Google Maps へのリンクを込めときゃいいじゃん，という話なのですが．
それには 2つほど課題があります．</p>

<p>一つは，デバイスの多様性．
ガラケーとAndroidとiOSとで，ユーザにとって自然と思えるリダイレクト先が違うわけです．
Android と iOS については，吸収するバッドノウハウがありますけれど，ガラケーはつらい．
しかも地方から上京する方の中には，ガラケー所持の方も少なくないわけです．</p>

<p>あともう一つは，統計情報取得の問題．
観光って，概ね何かしら自治体からの公金が入ります．
そうすると，成果の測定が求められます．
しかし，QR コードに Google Maps へのリンクを含めるだけだと，どこにもログが残らないわけです．</p>

<p>短縮URLサービスの多くは，統計機能を持っています．
しかし，観光担当の方はITに詳しいとは限らないので，いろいろとつらい．
できれば専用サービスで，地名，緯度経度情報くらいで管理したい，と．
それなら，パート職員の方でも片手間でできるわけです．</p>

<h2>てなかんじで</h2>

<p>もなみ屋というのは，RTOS やら開発ツールやらのサポートという，ハードボイルドな商品も
取り扱ってはいるのですが．
結局のところ，人々の生活を愉しくするためのお手伝いを，ソフトウェアを通じて提供するというのがミッションなのであります．</p>

<p>スマホがパッテリー食いで，バッテリーのエネルギー密度が今のままなら，スマホを使わないシステムを提供する．これはミッションに矛盾しないので，始めたわけなのであります．</p>

<p>この話に限らず，地元で観光資料を作ろうとしているのだけれど…．
という方のご相談にも乗れますので，ご縁がありましたらお声掛け下さい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファンディングのためのファンディング，始めます．(その2)]]></title>
    <link href="http://www.monaka.org/blog/2014/05/19/funding-for-funding-2/"/>
    <updated>2014-05-19T16:09:22+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/19/funding-for-funding-2</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/05/19/funding-for-funding/">前回</a>の続きです．</p>

<!-- more -->


<h2>オンラインのカード決済サービス，日本の状況</h2>

<p>前回，米国での状況は説明しました．
小規模法人や個人が，ネット通販のサイトを開いていることからお判り頂ける通り，
オンラインのカード決済サービスは，いくつかあります．</p>

<p>しかし，目標額達成後，速やか(数営業日以内)に代金を回収できるのは，今のところ，
<a href="http://webpay.jp">WebPay</a> と <a href="https://fastpay.yahoo.co.jp/">Yahoo!ウォレットFastPay</a> の2社に限られます．とはいえ，今後，類似のサービスは，日本国内でも増えていくことでしょう．</p>

<p>現存する両社のAPIは，かなり似通っています．
(<a href="http://blog.webpay.co.jp/post/webpay%E3%81%A8yahoo%E3%82%A6%E3%82%A9%E3%83%AC%E3%83%83%E3%83%88fastpay%E3%81%AF%E7%AB%B6%E5%90%88%E3%81%A7%E3%81%99%EF%BC%81%E6%AD%93%E8%BF%8E%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81%E5%BE%B9%E5%BA%95">WebPayの運営者ブログで示唆</a>されているとおり，FastPay が WebPay の互換を狙っているように見えます．)</p>

<p>しかしながら，クラウドファンディングサイト構築のためのオープンソースが用いている <a href="https://www.balancedpayments.com/">Balanced Payment</a> や <a href="https://payments.amazon.com/home">Amazon Payments</a> とは，すくならず API が異なります．</p>

<p>やや悲観的な状況です．
しかし，逆説的にいうと，この部分を突破すれば，日本でもクラウドファンディングサイトの構築は圧倒的に容易になるということでもあります．</p>

<h2>この問題の解決って，もしかして社会起業的．</h2>

<p>例えば，地方自治体で，地元の産業活性化のために，クラウドファンディングを使いたいというような案件は，既にいくつかあります．最近だと<a href="http://www.city.yubari.lg.jp/contents/municipal/funding/">夕張市</a>や<a href="http://www.pref.hokkaido.lg.jp/kz/csk/crowdfundingsogyoumodel.htm">北海道</a>で見かけました．
各地観光協会や商工会など含めれば，潜在需要は大きなものでしょう．
それと，Fablab や発明クラブのような，民間団体にも需要はあるでしょう．</p>

<p>しかし，私は，それらの大きな潜在需要に食い込もうという気は，今のところ，ありません．
それは自分のビジネスではありません．</p>

<p>私は，単に私のビジネスのスタートアップの問題を解決したいだけなのです．
日本で使えるカード決済のモジュールを，既存のオープンソースに付け加えたい．</p>

<p>しかし，その副産物には，社会起業的なインパクトが…そんな気がしているのですが，どうでしょうか．</p>

<h2>問題: 日本人は，放っておいても作る人に寄付/投資をするか</h2>

<p>という感じで，話が大きくなりました．巻き戻しまして…．</p>

<p>私には，私が行おうとするビジネスに対して，一つだけ不安があります．
それは，「日本人は，放っておいても作る人に寄付/投資をするか否か」という点です．</p>

<p>また海外の比較になりますが，海外では，無料で入手できるオープンソース製品に対して，
バグフィックスや機能拡張に対してお金を払える，または投資を募ることができるという
サイトがいくつかあります．しかし，それらのサイトで，日本人らしきアカウントの姿は
見かけません．</p>

<p>言語の壁ということもあるかもしれませんが，もしや，</p>

<blockquote><p>どうせ，作りたい奴は勝手に作るし，できあがった成果(回路図やソースコードなど)が無料でwebサイトに上がったら使わせてもらうわ</p></blockquote>

<p>というメンタリティが主流だとすると，日本では，「電子工作好きのための小規模クラウドファンディング」は，成り立たないかもしれません．
その辺りについて，読みきれずにいます．</p>

<h2>お願い: テストマーケティングをさせてください</h2>

<p>「長々文章を読ませておいて，さいご，これかよ…」ということで，すみません．</p>

<ul>
<li>私は，オープンソースのクラウドファンディングサイトを日本で使えるようにするための決済モジュールを，夏前を目処に，作ります．</li>
<li>決済モジュールは WebPay に対応させます．FastPay は互換路線なので，追って使えるようになるはずです．</li>
<li>サイト用のオープンソース製品として，<a href="https://github.com/crowdtilt/crowdtiltopen">CrowdtitltOpen</a> を使います．</li>
<li>決済モジュールは，MIT License として公開します．改変も含めて自由にお使いいただけます．</li>
<li>目標額に未達でも，おそらく作ります．作りたいので．ただもしかすると，少し馬力は下がります．</li>
<li>目標額を超えたら，その分は，メッセージ和訳など，広く日本国内で使えるようにするために使います．</li>
</ul>


<p>ちなみに，作業は私が行う想定です．誰かに頼むにしても私が監修します．
本件に関する私のスペックは，下記のとおりです．</p>

<ul>
<li>Lokitron が提供しているサイトを FastPay に対応させるという hack をしました．(未運用:デモサイトは上がっています．)</li>
<li>Ruby on Rails のスキルは，そこそこ．</li>
<li>Ruby のスキルは，そこそこ．</li>
<li>mruby については，全網羅のスキル．</li>
</ul>


<p>本件のクラウドファンディングのサイトとして，オープンソース向けののクラウドファンディング機能がある <a href="https://www.bountysource.com/">Bountysource</a>を使います．
国内のほうが心理的に安心かもしれないと思いつつ，このお話を国内の大手クラウドファンディングサイトに持ちかけるほど，私の心臓は強くはありませんでした．</p>

<p><a href="https://www.bountysource.com/teams/crowdtiltopen-ja/fundraiser">ファンディングサイトへのリンクはこちら</a>です．</p>

<p>極めて勝手なお願いですが，ご協力頂ければ幸いです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファンディングのためのファンディング，始めます．(その1)]]></title>
    <link href="http://www.monaka.org/blog/2014/05/19/funding-for-funding/"/>
    <updated>2014-05-19T14:43:18+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/19/funding-for-funding</id>
    <content type="html"><![CDATA[<p><strong>社会起業を行おう，という結論に達しました．</strong></p>

<p>いや，いまさら，意識高い大学生のようなことを思い立ったわけではありません．
また，まだ40代前半ですから，社会貢献の余生を模索するには早すぎます．
私は私のビジネスも続けます．</p>

<p>ただ，私が取り掛かりたいビジネスの <strong><em>副産物</em></strong> に，社会起業的価値があるかもしれないと，ふと思いついたのです．</p>

<h2>当初，私が考えたこと</h2>

<!-- more -->


<p>私が何を考えたのかは，既に tweet し，<a href="http://togetter.com/li/668857">「クラウドファンディングサイトの未来」というタイトルで togetter にまとめました</a>．</p>

<p>一連の Tweet に対して，いくつかの反応も頂きました．
それぞれのご意見(共感も反論も総論賛成各論反対も)に傾聴した上で，小規模クラウドファンディングサイトの登場は必然だろうと思うようになりました．</p>

<p>当初，私が必要性を感じているのは，個人レベルの電子工作のコミュニティへの，クラウドファンディングでした．
このコミュニティは，オンライン/オフライン問わず，ソーシャルネットが，ある程度できています．
よって，「〇〇を作ります」と言っている人の技術レベルも，プロジェクトのリスクも，投資する側は，ある程度分かります．
大手サイトでは緻密に行わなければ担保できないリスク管理のコストは，ある程度低減できます．
低コストは，手数料を下げたり，より良いサービスの提供に振り分けたりできる，ということに繋がります．</p>

<p>このサービスは，大化けはしないでしょうけれども，赤字にはならない程度の需給はありそうに，私は思います．
なので，私は(もしくは私の会社は)，上記のクラウドファンディングサイトの構築に向けて，一定量の開発リソースを割り振ることにしました．</p>

<h2>クラウドファンディングサイトを構築する方法</h2>

<p>実は，海外では，クラウドファンディングは，もっと気楽に立ち上げられます．
そのための，オープンソースや決済基盤が存在しています．</p>

<p>有名どころを挙げるなら，<a href="http://lockitron.com/">Lockitron</a> があります．
彼らは，自社製品のためのクラウドファンディングサイトを作って，<a href="https://github.com/lockitron/selfstarter">オープンソースで公開</a>しています．</p>

<p>Lockitron のサイトを応用して自社のためのクラウドファンディングサイトを作った例は，記事となり， <a href="http://makezine.jp/blog/2013/03/roll-your-own-crowdfunding-the-scout-story.html">makezine.jp で読むことができます</a>．</p>

<p>また，<a href="http://www.moongift.jp/2014/03/crowdtiltopen-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%95%E3%82%A1%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/">クラウドファンディングサイトのための，もっと大規模なオープンソース製品</a>もあります．</p>

<h2>日本で構築する際の障壁</h2>

<p>ところが，日本では，大きな障壁があります．</p>

<p>それは，決済手段です．</p>

<p>クラウドファンディングは，当たり前ですが，クレジットカードへ課金をし(正確にはオーソリをかけ)，目標額の達成如何で集金をしたり返却をしたりという機能が不可欠です．</p>

<p>このような決済サービスは，米国では数多くあります．
しかし，先ほどご紹介した <a href="http://togetter.com/li/668857">togetter に含まれる tweet</a>でも示唆したのですが，日米の金融行政や租税関係により，日本から，米国のサービスを使うには，様々な制約があります．</p>

<p>具体的には，米国の金融機関に口座を持つ必要がある，租税に関する書類を米国に出す必要がある，送金に時間がかかることがある，などです．</p>

<p>つまり，日本では，海外(主に米国)では簡単に行えるクラウドファンディングサイトの構築が，容易ではありません．</p>

<p>もちろん，決済手段だけが問題というわけではありません．</p>

<p>集客のようなビジネス的な問題は当然として，特定商取引法を始めとする消費者保護行政や，言語(日本語と英語)の問題など，課題はいくつかあります．
しかし，特定商取引法は適切に表示すればよいですし，サイトに表示される文字は技術的には解決可能な問題です．</p>

<p>やはり，決済手段は，大きな課題として立ちはだかります．</p>

<h2></h2>

<p>以上，私がクラウドファンディングについて発言をしだした経緯と，海外での状況，日本での障壁について簡単にまとめました．</p>

<p>ここまでの話でしたら，「アメリカは，いいなぁ．それに引き換えニッポンときたら」という愚痴です．</p>

<p>長くなりましたので，<a href="/blog/2014/05/19/funding-for-funding-2%0A/">次回</a>と2回に分けたいと思います．</p>
]]></content>
  </entry>
  
</feed>
