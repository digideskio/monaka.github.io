<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: essay | もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//blog/categories/essay/atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2016-01-03T07:24:56+00:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[なぜ日本の「中堅IT企業」は優秀なプログラマを囲いきれないのか (1)]]></title>
    <link href="http://www.monaka.org/blog/2016/01/03/mismatch-1/"/>
    <updated>2016-01-03T05:39:17+00:00</updated>
    <id>http://www.monaka.org/blog/2016/01/03/mismatch-1</id>
    <content type="html"><![CDATA[<h1>書く気になった背景</h1>

<p>私は、プログラマだ。なんだかんだで職歴は20年を超えた。
同時に、かつて10年ほど小さなソフトハウスを経営していたし、今も代表1名の法人を持っている。</p>

<p>そんな経歴により、プログラマ諸氏からは概ねプログラマとして接していただき、経営者諸氏からは稀に経営者としての意見を求められる時がある。
2つの異なる立場についてほぼ同時並行で見聞きする機会に恵まれるのは、おそらく珍しいことだろう。
そんな経験の中で思ったことを、書き散らしておく。</p>

<p>もちろん、守秘義務や職業倫理というものもあり，複数の事案をミックスし曖昧にしてある。
特定の企業についての邪推は無用。ひとつよしなに。</p>

<h1>中堅IT業界における、人材受給のミスマッチ</h1>

<!-- more -->


<p>広くIT業界は、長きに渡って、「人手不足!」と叫んでいる。
そして「"使えない人"ばかり面接に来る」というボヤキが続く。
つまり、"デキる"&ldquo;人財"が来ない、または定着しない。そういうことらしい。</p>

<p>このボヤキは、スタートアップでも聞かれる。しかし私見では、圧倒的に、受託中心からの転換を狙っている中堅 IT 企業で多い。</p>

<p>考えると、もったいない話である。
スタートアップは成功すればリターンは大きいがリスクも大きいとされる。
ある期間を生き残ってそこそこの規模まで成功した会社なら、財務的なリスクは小さい。
&ldquo;人財"が定着すればその会社は大きく伸びるだろう。
"デキる&rdquo;&ldquo;人財"も、むしろ"デキる"からこそ、その辺りのソロバン勘定はできるだろう。</p>

<p>しかし、現実にはボヤキは消える気配がないどころか、大きくなる一方であるように思える。
日本人にありがちな謙遜のようにも見えない。なぜだろうか。</p>

<p>私には、2つの要因が思い浮かぶ。うち2つはすでに広く指摘されていて経営層にも周知の事項だ。
残りの1つは、ソフトウェアエンジニア界隈では形式化されつつある暗黙知だ。
しかし、経営層界隈、特に中堅IT界隈においての知見共有は、あんまりされていない気がしている。</p>

<h2>「中堅IT企業」のオレオレ定義</h2>

<p>定義を曖昧にすると例外事例が無駄に多くなるはずなので、ここで「中堅IT企業」についてスコープを絞っておきたい。
ここでは、概ね下記のような条件を設定する。</p>

<ul>
<li>ここ数年で業績を伸ばしている。</li>
<li>顧客とは、開発受託の関係から投資やジョイントベンチャなど協業を行う方向で変化している。</li>
<li>法が定める中小企業からは、もはや脱している。</li>
</ul>


<p>社員数で言うと300〜500人、年商で50億くらい。社歴は概ね20年以上。</p>

<p>この規模の会社は、全ソフトウェア業界のうちで、相対的に好調である。
このことは定性的・定量的の両面で示すことができる。</p>

<p>定量的には、ソフトウェア業界の懐事情は、経済産業省が行っている特定サービス産業実態調査によって調査されている。
<a href="http://www.meti.go.jp/statistics/tyo/tokusabizi/result-2/h26.html">最新データ</a>でも、他の規模が軒並みスコアを落とす中、この規模は相対的に好調であることがわかっている。</p>

<p>定性的にもこの規模は活発と言える。
環境性能や自動運転車をキーワードにして、自動車車載ソフトウェアの世界では国際競争が激しくなってきている。
そのような先端の話題に関連して業界系マスコミを賑わすのも、概ねこの「中堅IT企業」規模の独立系ベンダである。</p>

<h1>To be continued</h1>

<p>活発で景気も良い。
本稿では具体例を示さないが，日本のソフトウェアの品質は諸外国に比べて悪いわけでもないということも、定量データとして知られている。
なのになぜ中堅IT企業で人材不足なのだろうか。</p>

<p>問題意識の提示と定義だけで長文になってしまった。</p>

<p>続く。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[謹賀新年]]></title>
    <link href="http://www.monaka.org/blog/2016/01/01/newyear/"/>
    <updated>2016-01-01T00:00:00+00:00</updated>
    <id>http://www.monaka.org/blog/2016/01/01/newyear</id>
    <content type="html"><![CDATA[<p>Twitter にかまけている間に1年半も放置していたのですねぇ．
何か書こう．あとで．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[とある自殺報道について]]></title>
    <link href="http://www.monaka.org/blog/2014/08/12/jisatsu/"/>
    <updated>2014-08-12T12:14:21+00:00</updated>
    <id>http://www.monaka.org/blog/2014/08/12/jisatsu</id>
    <content type="html"><![CDATA[<p>とある事件により，自殺した研究者について．そしてその行為を否定する，特定マスコミ関係者について．</p>

<!-- more -->


<p>人を殺しても精神耗弱なら酌量されるわけです．少なくとも法的には．</p>

<p>ましてや，正常な精神状態なら一番愛おしい(ことに世間ではなっている)己を殺すっていうのは，よっぽどのことだろうと思うわけです．
高瀬舟どころの話ではないですよ．</p>

<p>…自殺には，おそらく，さまざまな動機があるでしょう．一律に云々は言えないでしょう．
その動機の軽さに憤慨するような例もあるでしょう．</p>

<p>ですが．</p>

<p>世間一般の常識として，肝臓大動脈瘤破裂のように，己の不摂生との関連はあれども健康な意志とは無関係な理由で急逝した人を，「護るべき人，履行すべき責任，それらがあるなかで捨てて死ぬなんて無責任」などとは言わないわけで．(…死を悼むレトリックとしてはしばしば言いますけれどね…)</p>

<p>一方で，脳の病に侵された人が急逝したときに「とっとと逃げ出した」と言えるのだとしたら，ナニカがおかしいと，私は思うわけです．</p>

<p>まあ，「死んじゃダメだ」くらいまでの気持ちまでは，同感なのですが．
明らかに有能な科学者が，どうやら手続きが杜撰だったらしいとはいえ，ここまで追い詰められる理由は，あったのだろうかと．</p>

<p>こういうエントリを書く…，マスコミお得意の，炎上マーケティングに踊らせれちゃいました…かね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monami-ya.mrb の開発環境(2014年6月版)]]></title>
    <link href="http://www.monaka.org/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/"/>
    <updated>2014-06-24T06:05:33+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb</id>
    <content type="html"><![CDATA[<p>SNS の外でご意見頂きまして．</p>

<blockquote><p>Monami-ya.mrb って，twitter 辺りでは目にするけれど，どんな環境で作っているのか判らない</p></blockquote>

<p>はい．断片的にはtweetなどしていますし，<a href="https://bitbucket.org/monami_ya_mrb/sample-env-jsp-bfin">OSX 上でのビルド環境等も(今のところ消極的に)公開</a>しているのではありますが．</p>

<p>ハードウェアがどんな感じなのかは，なかなか想像つかないという方も多いと思います．
特に Ruby 系の方は，組み込みボードそのものに面識が無かったりするでしょうし．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/target-all.jpg" alt="ターゲットハードウェア" /></p>

<p>写真を撮ったので，並べておきます．</p>

<!-- more -->


<h2>開発ホスト機</h2>

<p>しょっぱなから写真を撮り忘れました．
でもまあ機種名を挙げれば，想像つくかと思います．</p>

<p>MacBook Pro 2.8 GHz Intel Core 2 Duo．
すいぶんと古い箱です．
メモリは8GB．HDDは500GB．</p>

<p>この程度のスペックでも，monami-ya.mrb のビルドは，1分以内に終わります．</p>

<p>正直言うと，もう少し良いのが欲しいですけれどね…GCCのビルドまで行う場合には…．
(会社では，GCCのビルドは，クラウド上のビルドサーバを活用しています)</p>

<h2>ターゲット</h2>

<h3>CPU ボード + マザーボード</h3>

<p>開発のメインとなるターゲットボードは， <a href="http://wlst.jp/ele/bf533cb/">BF533CB</a> です．
Blackfin という DSP を積んでいます．メモリは RAM 16MB + 内蔵若干，永続ストレージは SPI Flash．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/bf533cb.jpg" alt="BF533CB" /></p>

<p>DSP というと特殊なプロセッサという印象を持たれるかもしれません．
char のビット幅が16だったり32だったりという変態，みたいな．</p>

<p>しかし，Blackfin に関して言えば，普通の RISC プロセッサとして使えます．char のビット幅は 8 ですし．
あまり知られてませんが，品番によっては Microsoft .NET-MF が動きます．uClinux も動きます．
しかも 500MHz の高速動作です．</p>

<p>問題は，情報が少ないことです．
特に日本語の情報をwebで求めようとすると，片手で収まるくらいの開発者にしか当たりません．
(いや，商社やメーカの中などに入れば，日本人の開発者も，もちろんそれなりにいらっしゃいます)</p>

<p>CPUボードだけでも monami-ya.mrb は動作しますが，シリアルポートのコネクタが便利なので，マザーボードを併用しています．</p>

<p>BF533CB は，シンプルでとてもよいボードなのですが，今後の量産計画は未定のようなのが難点です．
近日中に，BF533CB から，<a href="http://www.kaneko-sys.co.jp/shop/00016.html">金子システム製の UCB-BF512</a>へ変更する予定でいます．</p>

<h3>USB-serial アダプタ</h3>

<p>最近の廉価帯ARMボードだと，USB-serialのアダプタをオンボードで積んでいる場合も多いですが，現在使っている BF533CB にはありませんので，外付けしています．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/usb-serial.jpg" alt="USB-serial" /></p>

<p>シグナルが3.3Vレベルであれば，何を使っても良いのでしょうけれども，私は秋月電子通商の<a href="http://akizukidenshi.com/catalog/g/gK-01977/">FT232RL USBシリアル変換モジュール</a>を使っています．
モジュールのみで900円と，微妙なお値段ではあります．
しかし，UART は，Lチカが済んだあとから開発終了までデバッグ用として永く使うものですので，安定していることと，壊れても代替がすぐに手に入るほうがよいと思います．</p>

<h3>JTAG アダプタ</h3>

<p>UCB-BF512 は，出荷時点でブートローダとして u-boot が書き込まれていますし，BF533CB も一度 JTAG 経由で書き込めば，同様に u-boot が使えます．</p>

<p>monami-ya.mrb は，uClinux と同様に u-boot 経由でブートできます．
よって，JTAG デバッグアダプタは不要です．
…と言えれば話は楽なのですが，GDB 無しでは PC 上の mruby 開発が難しいのと同様に，JTAG デバッガなしでの monami-ya.mrb の開発は困難を極めます．</p>

<p><img src="/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/sashimi-knife.jpg" alt="刺身包丁" /></p>

<p>私が使っているのは，<a href="http://www.amazon.co.jp/o/ASIN/B003MG4BH2/monamiya-22">PizzaFactory Tiny JTAG</a> です．
つまるところ JTAG ですので，ARM用の JTAG アダプタや FT2232 が載ったモジュールを使うことはできるはずなのですが…．
私自身が PizzaFactory Tiny JTAG の開発を行った時に，BF533 プロセッサで謎の相性問題を引き起こした経験があります．</p>

<p>納期の無い趣味なら，相性問題でアタマを抱えるのも愉しみのうちでしょう．
少しでもお仕事が絡んでいるのなら，人件費と比べて，サクッと買ったほうが安いです．</p>

<h2></h2>

<p>ざっとこんな感じです．
(組み込み開発 == ロジアナやオシロといった計測器が積まれた机)，のような印象を持たれるかもしれませんが，実際のところ，RTOS や VM のコア部分での開発では，それらの計測器はあっても無駄です．プローブを挿す場所がありませんから．</p>

<p>開発ホスト機を除くと，予算的には，1万5千円もあればお釣りが来るという感じでしょうか．
「STM32F4-discovery は 2千円でお釣りが来るのに！」っていう気もしますが，スペックが違うので比べるのは野暮かなぁとも思います．
STM32F4-discoverty は .NET-MF は走りますが，uClinux が走らないですし．</p>

<p>取り留めもないですが，本稿は日記なので，纏めなくても良いですね．それでは．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb が最小スペックを追求しない理由]]></title>
    <link href="http://www.monaka.org/blog/2014/06/18/why-monami-ya-dot-mrb-dont-pursure-minimum-size/"/>
    <updated>2014-06-18T04:21:58+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/18/why-monami-ya-dot-mrb-dont-pursure-minimum-size</id>
    <content type="html"><![CDATA[<p>本稿は，軽量Rubyを軸にしたソリューションのアーキテクトとして，私はこう考えました，ということを述べています．</p>

<p>設計思想に関する話です．
一つのシステムに対して，設計思想は幾通りもあるのが普通です．
どの思想にも，一定の理があります．</p>

<p>読者が何かの拍子に，軽量Ruby系実装を選ぶことになった際に，参考になればと思います．</p>

<h2>サブセットは滅びの道?</h2>

<!-- more -->


<p>ムーアの法則は，まだしばらく正しい状態にあるでしょう．</p>

<p>つまり，市場シェアが高い(有り体にいうと開発資金のある)があるアーキテクチャには，まだまだ計算機資源が潤沢になる余地があります．
一方，市場シェアが低いアーキテクチャは，性能向上は伸び悩むでしょう．</p>

<p>別に特定のアーキテクチャを云々したいわけではありませんが，SuperH アーキテクチャは，一時期，動作クロック数をメキメキと上げていきました．
今は， ARM Cortex アーキテクチャがその状態のように見えます．
PIC32 も，他の PIC アーキテクチャが援軍となっているのか，頑張っているようです．</p>

<p>それが，市場原理というものであります．</p>

<p>このようなメインストリームのアーキテクチャ(今なら Cotrtex)では，ソフトウェアの規模がどんどんと成長します．
多くの RTOS は API が枯れているはずなのですが，ドライバやミドルウェアが成長していきます．
本棚と本の関係と一緒で，計算機資源があるかぎり，ソフトウェアは膨張していきます．</p>

<p>一方，シェアの低いアーキテクチャとそのユーザは，その姿を脇に見て，歯ぎしりをして済ますわけにはいきません．
死活問題ですから．
そのため，一部だけでも移植して，メインストリームが享受している生産性の，喩え一部でも得ようとします．</p>

<p>しかし，サブセットは，所詮サブセットです．
シェアの低さをひっくり返すことはできず，そのうち，アーキテクチャが消えます．
それが，市場原理というものであります．</p>

<p>動作環境がないソフトに価値はありません．
せっかく作ったサブセットは，ビット世界のどこかに霧散します．</p>

<h3>サブセットの全てが悪ではない</h3>

<p>もちろん，成功する例もあります．</p>

<p>機器組み込み屋からWeb屋まで幅広く知られている例として sqlite があるでしょう．
他の SQL データベースからすれば，サブセットです．
しかし，sqlite は，型が極端に少ない，ライブラリとして動作する，など，設計思想が他と一線を画しています．</p>

<p>mruby もまた，機器組み込み以外の分野で，一定の成功はしていると見てよいでしょう．
mruby も他の Ruby 実装から見ればサブセットです．
しかし，先行する Lua の VM 実装を研究し，他の Ruby 実装には無い特徴を有しています．</p>

<h3>サブセットのアンチパターン</h3>

<p>サブセットで危険なパターンというのがあります．</p>

<p>実装の一部を切り取ってきて，制約の多いアーキテクチャに移植する，というものです．</p>

<p>「8bit の PIC や AVR に uITRON のサブセットを頑張って実装する」というのは典型例の一つです．</p>

<p>アーキテクチャの制約のため，実装をサブセット化した，というものには，継続性に対するリスクがあります．
上記uTRONの例なら「16bit の使えばいいじゃん．値段変わらんよ」で存在価値は容易に0になりますから．</p>

<p>無論，全てのプロジェクトが失敗するとは限りません．</p>

<p>成功した一例として uClinux が挙げられるでしょう．
これは，MMU サポートのない CPU のために Linux のサブセットを作る，というプロジェクトでした．
uClinux の場合は，MMU をサポートしない CPU は，かなり長い期間存在する，という見切りの旨さがありました．
MMU が無いという前提を立てる一方で，メモリ容量やクロック数には制約がかかっていません．
それらは，MMU をサポートしない CPU であっても，性能向上が見込めるからでしょう．
そして，実際に，ハイエンドマイコンでは，そうなっています．</p>

<p>今手元にあるチップのメモリやクロックに制約があるから，という理由でのサブセットは，徒労に終わります．中長期的に見て．
(…って書くと呪いをかけているように思われるかもしれませんが．)</p>

<h3>サブセット化はあとからでもできる．芯がしっかりしていれば</h3>

<p>mruby のコミットログを見た人からは，</p>

<blockquote><p>そうは言っても，あなた，mruby から stdio.h サポートを外したり，さんざサブセットにしてきたじゃないの</p></blockquote>

<p>と言われるかもしれません．</p>

<p>ええ，その通りです．
そして，まだ，本家 mruby にも，その fork である monami-ya.mrb にも，サブセット化の余地が残っています．</p>

<p>しかし，それらは，特定のアーキテクチャで動かしたいからという動機から来るものではありません．
(C99標準が定める)freestanding 環境での実行を確約するためのものであったり，UARTすら用意できないという
機器組み込みシステムでは古今東西普遍的にあるシチュエーションへの対応だったりというものばかりです．</p>

<p>サブセット化をし易い &ldquo;芯&rdquo; を作っておくことは大事です．
しかし，詰め込むことを先にするのは，リスクが高い．
monami-ya.mrb での各種拡張を手掛ける際に，私は，そう考えて設計と実装を行いました．</p>

<h2>サブセット実装には不思議な魔力はあるが</h2>

<p>私も現役の組み込み屋ですから，「そうは言っても目の前の機器に組み込まないと成果にならないのよ」というお話は解ります．
案件ベースでは，サブセット実装をせざるを得ないでしょう．</p>

<p>そして，サブセット実装が持つ，得も知れぬ魔力が解らなくもないです．
私もガラパゴニッポンの組み込み業界で育ちましたので，
実装者として，純粋に，愉しい．不思議な魔力．</p>

<p>しかし，イマイマを乗り切るための方便と，この先何年か使われることを前提とした提案がどうあるべきか，
現在的実装がどうあるべきかというのは，分けて考える必要があるはずです．</p>

<p>なので，(サブセット実装の成果物である)最小サイズの追求を，当面の monami-ya.mrb では行わないのです．</p>
]]></content>
  </entry>
  
</feed>
