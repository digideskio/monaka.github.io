<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: essay | もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//blog/categories/essay/atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-02-03T16:50:13+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep good company]]></title>
    <link href="http://www.monaka.org//blog/2014/02/03/keep-good-company/"/>
    <updated>2014-02-03T15:30:22+09:00</updated>
    <id>http://www.monaka.org//blog/2014/02/03/keep-good-company</id>
    <content type="html"><![CDATA[<p>起業したいという方と話をしていると，必ず出るのが，雇用に関する話．</p>

<p>曰く，「起業をしたいのに，社員候補が居ない．」
経営と雇用を混同している起業志望者の．典型だ．</p>

<p>別のパターンもある．
同年代で先に起業した人たちの「社員の定着が悪い」とぼやくのを聞き，起業前から心配している．
中年から上の年代に多い．</p>

<p>こんなふうに，起業/経営と，雇用することが不可分になっている方は，想像以上に多い．
…というか，私自身が，割と長い間，不可分に考えていた．</p>

<h2></h2>

<p>今の私は，こう思う．
「雇用するから，社員の心配をしなければいけなくなる．雇用はしちゃダメ」</p>

<!-- more -->


<p>限られた例外は，人材派遣会社だ．
特に特定派遣は，雇用をしないわけにはいかない．社員にしないと派遣できないから．
私に思い浮かぶのはこの1例のみだが，その他，許認可等で，雇用が避けられない場合も無くはないだろう．</p>

<p>しかしそれでも，雇用は可能な限り避けるべきだと，思う．</p>

<p>ネットの進展で，特に経理総務系の仕事の多くはアウトソーシングできる．
10年前に Money Forward があったなら，私は総務雇用のみならず税理士との契約もしなかっただろう．
物販のロジスティクスは，月5000円からでAmazonが引き受けてくれる．</p>

<p>セールスだけは，どんな分野であれ自社で抱えたほうがよいと，私も思う．
しかし付随するPRやブランディングに関しては，外にだしたほうがよい結果が得られる．(もちろん，それらを商材としている会社は別)</p>

<p>技術者も，優秀な人は必ずしも雇用しなくてもよい時代だ．
もしIT関係なら，人材派遣や紹介業に頼らなくても，勉強会などで学生やフリーランスを一本釣りすることは不可能ではない．
サラリーマンでも，以前ほど副業規定はきつくない．
もちろん，一本釣りに見合うだけの目利きや信頼を，釣る側が備えている必要はあるけれども．</p>

<h2></h2>

<p>起業関連のセミナーに行くと，厚生労働省が数多くの雇用対策の助成を行っている，と紹介される．
なんとなくお得に感じるのは，解る．
でも，国が特定分野に助成を行うということは，
経済合理性に任せた場合には，誰も国の思惑通りには選択しない，ということでもある．</p>

<p>中規模老舗企業は，なんだかんだいって資金的にも総務人事機能的にも体力がある．
延命として，そういう貧乏くじを自ら引くのは，アリだろう．
しかし，資本力が無いスタートアップにとっては，まさに自殺行為だ．</p>

<p>少し考えると，解ることだと思うのだが．
目の前の現金に釣られたくなる気持ちも解るのだが．</p>

<h2></h2>

<p>こういったことを切々と説明しても，起業志望者たちの少なからずは，納得した顔にならない．</p>

<p>私の説明が舌足らずなのだろう．
そんなときは，「そうですね．気のいい社員が見つかって，愉しい会社ができるといいですね」
と作り笑顔で話を打ち切る．</p>

<p>作り笑顔ではあるけれども，発した言葉は嘘ではない．
そう．
気のいい社員と一緒に製品やサービスと世に問うのは，とても愉しいことなのだ．</p>

<p>だからこそ，起業家たちは，雇用には慎重にならなければならない．
気のいい社員を解雇する瞬間の絶望を，先回りして想像しなければならない．
経営をしたいのか，雇用をしたいのかを，常に自らに問わなければいけない．</p>

<p>悪いことは言わん．
絶望を味わったヤツの言うことは，聞いておけ．</p>

<p>この辺甘く考えていると，My own Limited Company しか残らない最後が来るよ．</p>

<h2></h2>

<p>その上で，雇用をしたいなら，すればいいと思う．</p>

<p>なお，言うまでもないことだけれども，雇用自身は絶対悪ではない．
費用対効果が得られる確証があっての雇用は，経営者が決断すべき仕事ではある．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加しないと見せないよ．を作った罪]]></title>
    <link href="http://www.monaka.org//blog/2014/02/01/my-fault/"/>
    <updated>2014-02-01T08:28:21+09:00</updated>
    <id>http://www.monaka.org//blog/2014/02/01/my-fault</id>
    <content type="html"><![CDATA[<p>140字以内で纏めると，こういうこと．</p>

<p><a href="https://twitter.com/monamour555/status/429207095041224704">https://twitter.com/monamour555/status/429207095041224704</a>">https://twitter.com/monamour555/status/429207095041224704">https://twitter.com/monamour555/status/429207095041224704</a></a></p>

<p>私は，TOPPERSプロジェクトという，組込み系OSSを担いだNPOに参加していた．
設立準備から手伝って，一応10年くらい理事もしていた．</p>

<p>NPO法人TOPPERSプロジェクトは，組込みソフトの団体として，成功したと思う．
電子ピアノにも，宇宙機にも，自動車にも載った．
私が書いたソースコードも，割と入っている．
そこらそんじょのOSSなんざ蹴散らすくらいの採用例，出荷総数はあるだろう．</p>

<p>今は辞めた．
理事も辞めたし，今や会員ですらない．</p>

<!-- more -->


<p>当時やっていた会社が傾いたとか，いろいろ直接的な理由はあるのだが．
大きな背景として， <strong>OSSプロジェクトとしてのアンチパターンを作っているのではないか</strong> ，という疑問が年を追う毎に，私の中で大きくなっていったのが，ある．</p>

<p>TOPPERSプロジェクトには，会員以外には見せないよ，という仕組みがある．
具体的には，いわゆる，早期リリースという制度．
当初から，会員企業が受託製品に使った場合の，ソースコードの扱いとか，厳密運用が難しいことは解っていた．
私が辞める頃には，会員が，先に開かれたOSS (って表現は変だが) として公開し，そのあとプロジェクトにコントリビュートするなんてこともあったりして，制度として崩壊していた気もする．</p>

<p>&ldquo;オープン"ソースを管理するプロジェクトがソースコードを隠す，というのは，少し考えればわかる．矛盾した話だ．なんで当時気づかなかったのだろうw．</p>

<p>そして，各方面が指摘しているとおり，オープンソースは，ソースコードもさることながら，生産や管理のプロセスの透明化にメリットがある．
生産や管理のプロセスを，参加者にしか見せないというのは，ソースコードを隠すのと同様に，スジとしては最悪手の部類だろう．
そこで，本稿最初に引用した tweet へ繋がる．</p>

<p>組織として成立させるためには，なんらかのメリットを出す必要はある．
その辺りの仕込みは大変なところだと思うのだがしかし．</p>

<p>言い訳になるが，TOPPERSプロジェクトが立ち上がった2000年当時，オープンソースは暗中模索だった．
私は他人様よりも愚かなので，間違いも多い．
でも，もうあれから月日は流れた．
私は愚かなままかもしれないが，他人様はそろそろ良手を編み出しても良い頃だろう．</p>

<p>良手を編み出す上で，悩ましいのが，TOPPERSプロジェクトの確かな成功ではないかという気がしている．
厳密に言うと，NPO組織としては，安定収入で成功しているという事実だ．
…というと不幸を望んでいるように読めそうだが，言うまでもなく，そうではない．
今は袂を分かつ立場だが，成功するように私も頑張った．
成功し続けていただかないと，日本の組込みソフト業界全体が困る．</p>

<p>しかし，言葉を慎重に選ぶべきかもしれないが，OSSプロジェクトとしてのTOPPERSは失敗だったとも思っている．
もともと「OSSは目的ではなく手段だ」という立ち位置の団体ではあった．
なので，OSSプロジェクトとして側面がどうなろうとも，TOPPERSプロジェクトには何らの傷がつくわけでもない．</p>

<p>私がマズいと思っているのは，TOPPERSプロジェクトの成功が，OSS系NPOのロールモデルになりそうな傾向だ．
実際，TOPPERSプロジェクトの定款を参照しました，という声は，他の{組込系|OSS系}NPOから，ずいぶんと頂いた．</p>

<p><a href="http://ossforum.jp/ossaward8th2">「第8回 日本OSS貢献者賞・日本OSS奨励賞」</a> が示す通り，ニッポンのOSSは，この点についてあまり深く考えていないか，判っていて目をつぶっているか，どちらからしい．
そして，そのロールモデルが確立するまでの10余年には，間違いなく私がいる．
割と中心に近いところに．</p>

<p>罪なことをしたなぁ，と，肩を落としている．ごめんなさい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今日現在のmrubyについて雑想]]></title>
    <link href="http://www.monaka.org//blog/2014/01/31/memorandom-about-mruby/"/>
    <updated>2014-01-31T10:28:44+09:00</updated>
    <id>http://www.monaka.org//blog/2014/01/31/memorandom-about-mruby</id>
    <content type="html"><![CDATA[<p>なんとなく，今日現在の mruby について，私自身が薄ぼんやりと考えていることを書いておく．
なんでこのタイミングなのかに，あまり深い意味はない．
一つのきっかけとして，イベントはある．
mruby を話題の中心に据えたイベントが，<a href="http://www.digitalfukuoka.jp/events/30?locale=ja">今日の午後開催される</a>．
私も聴講者として参加する予定だ．
参加した後だと，その感想と混じる．
なんとなく私見の純度が下がるかな，とか．</p>

<p>私は，何を書いても，誰かや何かをdisっているように受け取られがちだ．
けれども，本稿もdisりの意図は全くない．
徒然なるままに．</p>

<!-- more -->


<h2>小規模組込みも視野に入れている割に，Lチカに向かない言語</h2>

<p>この tweet が象徴的だと思う．</p>

<p><a href="https://twitter.com/fenrir_n/status/428290481617780738">https://twitter.com/fenrir_n/status/428290481617780738</a>">https://twitter.com/fenrir_n/status/428290481617780738">https://twitter.com/fenrir_n/status/428290481617780738</a></a></p>

<p>IIJさんが pack/unpack を提供する mrbgem を提供しているのではあるけれども．
小規模組込みでは，ペリフェラルレジスタの操作で，ビット演算を多用する．
しかし mruby は，言語仕様からして，数値に対して態度が煮え切っていない．と，思う．</p>

<p>オブジェクト指向脳でいうと，pack/unpack じゃなくて，GPIOクラスとかSPIクラスとかを作るのが正道だろう，製品開発の実務では，それらを作りこまないでいては生産性も上がらないとも思う．</p>

<p>しかし，ボードが届いて最初にやるのは，Lチカなのだ．</p>

<p>プロジェクトのスタートアップで手間がかかるというのは，製品採用にあたっては致命的に痛い．</p>

<h2>不安定が活況を生み，それゆえ採用が難しい言語</h2>

<p>これも他人様の tweet から．</p>

<p><a href="https://twitter.com/kimu_shu/status/427641049054322688">https://twitter.com/kimu_shu/status/427641049054322688</a>">https://twitter.com/kimu_shu/status/427641049054322688">https://twitter.com/kimu_shu/status/427641049054322688</a></a></p>

<p><a href="https://twitter.com/take_cheeze/status/428792261032177664">https://twitter.com/take_cheeze/status/428792261032177664</a>">https://twitter.com/take_cheeze/status/428792261032177664">https://twitter.com/take_cheeze/status/428792261032177664</a></a></p>

<p>本家 mruby は走り続ける．
おそらく永遠に不安定だ．
それは，mruby の設計や実装がダメだからでは(もちろん)無い．
原作者である Matz 氏の根本的な考え方が反映されているものだろう．
本人が，こう tweet している．</p>

<p><a href="https://twitter.com/yukihiro_matz/status/416389827181826048">https://twitter.com/yukihiro_matz/status/416389827181826048</a>">https://twitter.com/yukihiro_matz/status/416389827181826048">https://twitter.com/yukihiro_matz/status/416389827181826048</a></a></p>

<blockquote><p>タダ乗りしただけでは置いて行かれてしまう進化の速さ</p></blockquote>

<p>こういった性質は，ハッカーと呼ばれる人たちのマインドに火をつけやすい．
実際，あっというまに mrbgem が量産された．
今では Ruby の代替として考えてもよいのでは，と思える程の充実ぶりだ．</p>

<p>この性質は，機器組込み屋にとっては，酷く辛く痛い．
他の保守部品と同様に，機器組込み向けソフトウェアも，バージョン固定するのが基本線だから．</p>

<h2>とはいえ，安定版にあまり意味は無い</h2>

<p>mruby が抱えるサグラダ・ファミリア的性質と，機器組込み業界との親和性の無さは，私もどこかに登壇するたびに言ってきた．</p>

<p>その言動と関係があるのかどうかは知らないが，mrubyを担いでいる方々も，安定版を出す方向で動いているらしい．
私は軽量Rubyフォーラムに参加していないので，詳しいことは知らない．</p>

<p>安定版の登場は，確かに，ビジネス的には意味がある．
開発者をかき集めるときに，スキルセットを設定しやすくなる．
応用製品を作る際に，準拠バージョンを設定しやすくなる．</p>

<p>こういったメリットは，非技術系経営層への対策としては，一定の意味がある．とても大事なことだ．しかし，技術者たちは，あまり歓迎しないかもしれない．</p>

<p>安定していることを再優先にしつつも， <strong>最新版に最も近いもの</strong> を，機器組込み系エンジニアは，使いたがる傾向がある．
バージョン固定で永く付き合うことになるので，最初の時点で古いのは嫌なのだ．</p>

<p>なので，機器組込み系エンジニアは，安定版を採用しないだろう．
安定版が 3ヶ月おきに更新される，というような，想像しづらいリリース体制が構築されれば別だが．</p>

<p>かつて「プロジェクトの数だけITRONは存在する」と言われたように，「プロジェクトの数だけ mruby が存在する」というような状況が展開されると予測する．
コード規模で見ても，mruby は ITRON に各種ミドルウェアを付けた状態と概ね似ているので，同じような運用が為される可能性は高い．
規格適合のための処理系テストスイートが，もてはやされることになるだろう．</p>

<p>歴史に学ぶ，という観点では，TOPPERSプロジェクトの第一世代カーネル群が，おそらく参考になる．
FI4カーネルは新規設計したほうが綺麗になるのは明らかだったのに，JSPカーネルへの拡張で済むように作った．
そのようにした理由はいくつかあるが，JSPカーネルとFI4カーネルの中間的なカーネルを，実製品開発プロジェクト毎に作れるようにしたかったから．
設計思想としては，mruby と mrbgems の関係に割と近い．
そして，FI4カーネルは，目論見通りに使われた．</p>

<p>だから何なのだ，という話ではないのだけれど．
過去の分析と近未来予測は，使い方を考える上で重要だろうとは思う．</p>

<p>あ，ぐだぐだ書いていたら，そろそろ会場へ向かう時間だ．
そろそろ着替えるか．</p>
]]></content>
  </entry>
  
</feed>
