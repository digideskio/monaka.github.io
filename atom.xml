<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-02-14T21:56:14+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[howto と way]]></title>
    <link href="http://www.monaka.org/blog/2014/02/14/way-and-howto/"/>
    <updated>2014-02-14T21:49:23+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/14/way-and-howto</id>
    <content type="html"><![CDATA[<h2>一言で纏めると</h2>

<blockquote class="twitter-tweet"><p>一時期流行った，〇〇やらない人のtweetと〇〇やる人のtweetみたいな話だもんなぁ．「OSSやりたいです」は一生やらない．「パッチ投げました」でしか前には進めない．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/433831823135621120">February 13, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>みたいなエントリは，地べた這いつくばっている私みたいな雑魚が書くのはいいけれど，
OSSコミュニティの後進育成とか考えているひとは思案のしどころですよね，てな話．</p>

<h2>政治家と議員</h2>

<p>何年か前に読んで「へぇなるほど」と思って，曖昧な記憶のまま，何度か引用しているブログエントリがある．
本稿を書くにあたり探してみたら，割と難なくみつかった．</p>

<!-- more -->


<p>「<a href="http://www.t-ken.jp/">田中けんWeb事務所</a>」の「<a href="http://www.t-ken.jp/diary/20101213">職業としての地方議員</a>」から引用する．</p>

<blockquote><p>　一般的には政治家と議員を同意語として使っている場合が多い。その点、私は政治家と議員を別の言葉として分けて使っている。</p>

<p>　政治家というのは、生き方の問題。政治的な主張をして具体的な行動をしている人間は広義で全て政治家である。</p></blockquote>

<p>(中略)</p>

<blockquote><p>　それに比べて、議員とは、狭義で言う政治家の更に狭い範囲である、現職議員にしか使えない言葉だ。働いて報酬をもらう。つまりその多くが職業でなければ、議員とは言わない。</p></blockquote>

<p>本稿に関係ないところは中略した．また，私は江戸川区に居住しておらず，引用に政治的な何らの意図もないことも述べておく．</p>

<p>引用した理由は，シンプル．
&ldquo;しごと&#8221;には，&#8221;生き方(ライフスタイル，主義，信条)&#8221;と&#8221;職業&#8221;の2つの側面で成立するという例示が欲しかったから．</p>

<h2>生き方と職業</h2>

<p>世の中では，&#8221;しごと&#8221;の2つの側面に関する微妙な差は無視されることが多い．
議員と政治家の呼び分けなんて，ふつうは深く考えない．</p>

<p>でも，経営層はこの辺りについて，実に敏感だ．</p>

<p>数年前に，トヨタが「トヨタ・ウェイ」という本を出して書店のビジネス棚を賑わした．
世界企業のトヨタが，微々たる印税を期待して本を出すはずがない．
これは，国際企業として成長するトヨタが，関連企業向けに，自社の精神を説くべく作られた本である．</p>

<p>IT関連でいえば，ある時期，Microsoft press から「私がマイクロソフトで学んだこと」系のライトビジネス書がぼこぼこと出た．
本体であるマイクロソフトの経営層の流れと出版年を見比べると，なるほどと思うだろう
．</p>

<p>IBMの「巨象も踊る」も，社外への広告宣伝の要素もあれば，自社関連企業への要素もあるだろう．</p>

<p>これら巨大企業は，当然のこととして，自社内従業員のための作業手順書を完備している．
それでもなお，各社は，各社の哲学や精神論を通じ，身の処し方のレベルまで従業員に考えさせ，考えを合わせていく．</p>

<p>そういう潮流を，キモチワルイと切り捨てたくなるとしたら，その気持ちは判る．
ただ，かつて国家のレベルで行っていたことが，国境を軽々と跨ぐようになってきて，多国籍巨大企業が自ら行わなければならなくなった，と考えると，それは必要なこと…必要悪なのかもしれないが…ではないだろうか．</p>

<p>これはたぶん営利企業に限らない．
NPO/NGO無しでは今の世界は回らず，それぞれにそれぞれのアイデンティティがあり，構成員は自らの生き方と組織の生き方をすりあわせているのだろう．</p>

<h2>howto と way</h2>

<p>そして，私は思うのだ．
OSSエンジニアにも，職業と生き方との，2側面が存在するのでは，と．</p>

<p>本稿では，２つの側面を表現する適切な語が思いつかなかったので，howto と way という言葉を使う．</p>

<p>howto は，OSSエンジニアが開発を遂行するに当たって直接的に必要な知識，直接的に賃金を得るための手段．つまり職業に相当する．
一例を挙げるなら，Linux界隈で膨大に存在する howto 文書を理解し開発なり設定なりする能力だ．</p>

<p>一方，way は，OSSエンジニアとして円滑に生き続けられるために必要な知恵．つまり，生き方，に相当する．
具体的には，ソフトウェアの自由に対する知識と自分なりの見解，ハッカーマインドの実践，などなど．</p>

<p>これらは，両方必要に見えて，短期ならば，片方でも割とどうにかなる．</p>

<p>顧客や上司からLinuxを指定された，という理由でOSSに関わる技術者は，howto だけ心得ておけばよい．
実際そういう技術者も，世の中には少なくない．
ときどき GPL のコードをコピペして炎上するかもしれないが，まあ，なんとかなる．</p>

<p>wayだけ理解して食いっぱぐれないでいるのは，エンジニアとしては厳しい．
しかし，ヒョーロンカとか扇動家としてなら，wayだけでも関与はできる．
某巨大匿名掲示板などを眺めていると，この層も，案外多いように思う．</p>

<p>ただしもちろん，両方備えるのがスタートラインではある．
片方だけでは，エコシステムに参加できず，やがて消えていくであろう．</p>

<h2>howto と way，何にフォーカスするか</h2>

<p>OSS関連のコミュニティ活動を傍から見ていて，不思議だなと思うことがある．
参加したいと思う側も受け入れる側も，howto と way の区別があんまりついていないのではないか．
これがニッポン固有のことなのか，世界普遍な傾向なのかは判らない．</p>

<p>壇上に登るような方々は，OSSエンジニアとして大成しており，両者は不可分のものとして会得してるものだろう．だからこそ大成したという言い方もできるだろうとも思う．</p>

<p>一方で，「OSSにあこがれています．スーパーハカーすごいと思います」「でも VCS よくわかりません苦手です．英語もダメです．上司の説得が」という層は，howto と way の両側面があるということも，理解できていないだろう．</p>

<p>その辺り，整理できていないと，伝わるべき情報が上手く伝授されないのではないか．
「憧れたけれど，何をすれば判らなくて，やっぱ俺には無理だったわ」と，情熱の無駄使いだけが起きて終わるのではないだろうか．</p>

<p>さて，冒頭の私の tweet は，howto についてのみ言及している．
そして，howto には way も伴うと，根拠なく期待している．
おそらくスジの悪い言い回しだ．
しかし私はそういう tweet でも許される．</p>

<p>だって，私が気にする必要なんてあるの?
tweetを眺めていると，後進育成の文脈で目立つ方々も，深く考えていなさげなのに．</p>

<h2>そして神格化と娯楽化で終わる</h2>

<p>かくして壇上は「よくわからないけれど，すごい」一代芸を持つエンジニアの舞台となる．
行き着く先は，神格化と娯楽化．</p>

<p>義務教育では，なぜかやたらと偉人の伝記を読ませられる．
それらは，偉人たちにとっては(脚色はあるかもしれないが)リアルな人生だ．
しかし，読む子供たちには，ファンタジーの一種である．
なぜすごいのか，近づくためにはどうすればよいのか．
そういうことをリアルに感じられない物語は，容易にファンタジー化する．
たぶん成人でも一緒だ．意識高い層の，奇妙なジョブズ信仰をみればいい．</p>

<p>「OSSの仲間を増やしたい」「興味のある人に伝えたい」
そう思っても，至るのは，神格化と，娯楽化．
聴衆に与えるのは一時の高揚感と，名刺交換をしたという事実．</p>

<p>それで十分だ，という人もいるだろう．
解る人には解る，伝わる人には伝わる．</p>

<p>…まあ，それはそれでもよいのかもしれないが．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハッカーとして名を成すための「運」]]></title>
    <link href="http://www.monaka.org/blog/2014/02/14/luck-for-being-a-great-hacker/"/>
    <updated>2014-02-14T13:14:58+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/14/luck-for-being-a-great-hacker</id>
    <content type="html"><![CDATA[<p>本稿の契機(元ネタ)は「<a href="http://d.hatena.ne.jp/hyoshiok/">未来のいつか/hyoshiokの日記</a>」の「<a href="http://d.hatena.ne.jp/hyoshiok/20140212/p1">まつもとゆきひろのコピーは作れるのか。</a>」および，その反響 tweet から．</p>

<p>元ネタで示されている「Rubyにみるグローバルソフトウェア開発」というタイトルでの講演は，聴講していない．
そのため，今書いているエントリは，元の文脈から逸れている可能性はある．
インスパイヤ系ってことで，ひとつよしなに．</p>

<p>いろいろ思うところはあるのだが，一気に書くと発散するので，数回に分けて書く．</p>

<blockquote class="twitter-tweet"><p>「運」てのは，生き方の一番深いところに直結するゆえに共通見解を極めて見出しづらい概念だからなぁ…．140字ではやはり無理なので，web日記行きだぬ．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/434162914497294336">February 14, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>今回は，「運(幸運/成功)」について．</p>

<h2>「運」とは何か．</h2>

<!-- more -->




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/miura1729">@miura1729</a> <a href="https://twitter.com/hyoshiok">@hyoshiok</a> 最初の一人が運なのは当たり前で、問題は分析して再現確率を上げることが可能かどうかじゃないかと。不可能なら純粋に運ゲーだけど。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/434153565423013888">February 14, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>プログラミング言語の開発者といえば，用語定義に対しての厳格さで言えば，世界最強の部類にいるであろう．
その猛者たちが，「運」とは何かを定義しないで話を進めている．</p>

<p>みたいなところを興味深く思いつつ．</p>

<h2>とりあえずオレオレ定義する</h2>

<p>さりとて辞書定義を引っ張ってきても，汎用過ぎて収束させづらい．
本稿では，「運がいい」「幸運」を，「至近数十年に影響する成果，またはそれを出す力」くらいに定義しておく．
もちろん，そうでない幸運があるということは，私も知っている．
しかし，今扱おうとしている狭い文脈では，「幸運」と「成功」「実力」辺りとを同一視しても許されるだろう．</p>

<p>すると，「運」は，「幸運」へ導く(もしくは遠ざける)要素である．
「運」は，1回で「幸運」か否かを決することはおそらく稀で，複数の「運」の積み重ねで決まる．</p>

<p>この辺までは，本稿の文脈でという条件付きなら，大きな異論は出ないだろう．</p>

<h2>「運」はコントロール可能か</h2>

<p>さて，この辺りから，合意形成への雲行きは怪しくなる．
「運」とはコントロール可能だろうか．</p>

<p>両極端は，&#8221;コイントスのようなものでコントロール不能&#8221; と
&ldquo;集合知や学習によってコントロール可能&#8221;だろう．</p>

<p>もちろん，考え方の中間の考え方も有り得る．
&ldquo;特定の条件では再現確率を上げられるが，時代背景など異なれば再現することは困難&#8221;，のような</p>

<p>この辺りは，各自の&#8221;生き方&#8221;に関わってくる問題であり，また同じ人であっても扱う問題領域により主義主張が変わってくることも多い．</p>

<p>本稿での，私の基本的な立場は，チキンだ．
「コントロール可能か否かも含めて，わからない．
ここがコントロールできないものである可能性を踏まえると， <strong>運の最適化はできるかもしれないが，試みは不経済</strong> ．以上．」</p>

<p>不経済な最適化は行わない．
これは hack のキホンだと思う．</p>

<h2>「幸運」はコントロール可能か</h2>

<p>「運」については，私個人としては，コントロール可能かどうか判断は投げた．
しかし，「幸運」はどうだろうか．</p>

<p>本稿での定義による「運」と「幸運」は金融市場での勝敗と似ている．
私は経済学の素養に乏しいので，例示しておいてナンだが，馬脚を表す前に言及を切り上げたい．
…どうやら， <em>特定の市場に対し，長期に渡って資本を投下し続けられた人が「幸運」を手にする</em> ，らしい．</p>

<p>振り返り，ソフトウェア業界で目立つ人思い起こす．
多作の hacker も皆無ではないが，傾向としては，ごく少数の技術要素に拘り抜いた人への高評価が目立つのではないか．</p>

<p>本稿を書く契機になった Matz 氏は「私は人の役に立ったプログラムは人生で3つくらいしかない」と壇上で公言する．
もちろん Ruby は大成功．
mruby もたぶん成功するだろう．</p>

<p>Linux の Linus 氏は，git も成功させたが，言い方を変えると絶大な知名度の割に2つしか作品がない．</p>

<p>TOPPERSの高田教授は静的OS一筋．</p>

<p>こどもプログラミングの第一人者となった阿部さんは筋金入りのSmalltalker．</p>

<p>その他，枚挙に暇がない．</p>

<p>「成功するには，成功するまで続けることだ」というのは，しばしば軽口として使われる．
しかし，ソフトウェア開発に関しては，これが最強かつ唯一の成功法則なのではないかと，私は思う．
<strong>とにかく継続する，という行動は，個々人のレベルでも十分にコントロール可能だ</strong>．</p>

<p>こんな風に過度に単純化すると，成功した方々が何も考えていないように見えて失礼かもしれないが．継続するという行為そのものが，才能であると私は考える．</p>

<p>ちなみに私は，一行パッチを送ったプロジェクトの数なら日本で5%に入れる気がしているが，一途なものがなく，いまやこのアリサマだ．
浮気性は，野垂れ死ぬ．</p>

<h2>「幸運」に向かわせて良いか</h2>

<p>だから，もし本気で「まつもとゆきひろのコピー」なるものを作りたいのであれば，脇目もふらずに開発を続けさせるべきだろう．
もうちょっと穏当に言い直すなら，単一プロダクトの開発を長期継続できる環境を整備すべきだ．
人生を賭して構わないと思うプロダクトを早めに見つけさせる(見つける手伝いをする)ことも大事だ．
「幸運」を手にするまで10年から20年くらいかかるから，若いうちに．</p>

<p>そうすれば，歩留まりはわからないけれど，それなりの量のコピーはできるかもしれない．
が，しかし，まあ…．
<a href="http://www.yomiuri.co.jp/science/news/20140202-OYT1T00332.htm">STAP細胞の発見に際して，小保方さんと共同研究を行った若山教授の一言</a>は，受け止めて置く必要はあるだろう．曰く，</p>

<blockquote><p>「彼女は次元が違い、難しいかもしれない。小保方さんのように世紀の大発見をするには誰もがあり得ないと思うことにチャレンジすることが必要だ。でもそれは、若い研究者が長期間、成果を出せなくなる可能性があり、その後の研究者人生を考えればとても危険なこと。トライするのは並大抵の人ではできない」</p></blockquote>

<p>不世出を量産しようとすれば，歪は出る．
その歪に沈んだ若者(たぶん沈む頃にはオッサンオバサン)をどうするのだろう．
セーフティネットの用意もなく，イケイケドンドンで若いのを向かわせるのだとしたら，無責任であろう．</p>

<h2>…</h2>

<p>オレは賭けるんだ，という若いのを留めることも，私はしないけれどもね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[組込みシステム is 何?]]></title>
    <link href="http://www.monaka.org/blog/2014/02/11/what-is-embedded-system/"/>
    <updated>2014-02-11T12:57:57+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/11/what-is-embedded-system</id>
    <content type="html"><![CDATA[<p>曰く．</p>

<blockquote><p>一円単位でコストを削っているのでファームウェア書き換え前提のプロセスは組み込みではないです。iPhoneは組み込みじゃないですから。</p></blockquote>

<p>溜息が出る．
組込みシステムの文脈で露出の高い方から，こういう類の意見が出るたびに．</p>

<!--more-->


<p>組込みシステムでは，一円単位でのコスト抑制がかかることは，珍しくは無い．
それは，その通り．
コストが全て．だから，最近の自動車のコンピュータは書き換え可能になっている．
ムダ・ムラを徹底的に排除する，あのトヨタの自動車でさえも．</p>

<p>iPhone は組込みではないという．
ならば，科学館や美術館へ行ってみるといい．
iPhone の兄弟である iPad が，壁面に掲げられ，パネルに埋め込まれ，運用されているのをしばしば見かけるだろう．
ああ，組込みシステムの開発者たちは，そういう場所に行く暇もないくらい忙しいのだっけか．</p>

<p>サイネージの多くが，Windowsで動いている．
自動販売機でLinuxのブートプロセスが表示されている写真が，SNSにアップロードされている．
これらは組込みではないって?</p>

<p>リセットベクタから管理するのが組込み?
ならば.NET Micro frameworkや一部の組込みLinuxは，れっきとした組込みだろう．
これらは自ら(つまりファーム)の一部を書き換えるケースを暗黙的に仮定している．</p>

<p>組込みシステムの守備範囲は，膨大だ．
そしていまだに膨張を続けている．
この文明が滅ぶまで，膨張し続けるだろう．</p>

<p>歴史の中で，確かに，ファームウェア書換ができないシステムが優位な時代もあった．
そういうシステムは今もあるだろう．今後も全滅するとは思わない．
しかし，組込みシステムの守備範囲が広がっていく中で，割合として減っていくのは間違いない．
かつて，自動車のエンジン制御用コンピュータは，ファームウェアの書換を想定した作りではなかった．家電も，同じ傾向があった．</p>

<p>時代の流れに抗っても，得られるものは多くない．
過去のある時点における優位をもって「組込み」を定義し続けたとき，
得られるのは自己肯定感だけだろう．
世間と専門家との定義の乖離は，専門家の価値低下を招き，組込みシステムを取り巻く業界を衰退に導くだろう．</p>

<p>溜息が，こぼれる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EC2でXenのmini-osを動かす手順]]></title>
    <link href="http://www.monaka.org/blog/2014/02/04/how-to-build-ebs-image/"/>
    <updated>2014-02-04T10:26:39+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/04/how-to-build-ebs-image</id>
    <content type="html"><![CDATA[<h1>余談</h1>

<p>最近，mruby を動作させる超軽量クラウドOSなんてのを，なんちゃってで作っている．
ざっくりとした経過は，先週末くらいからtwitterで呟いている．</p>

<p>一応，会社を持っているので，そちらで展開することは不可能ではなさげではある．
でも開発資金もないし市場も立ち上がっている風でもない．ネタ系で済ましておいたほうが，傷を負わなくて済むような気もする．
資金力が十分にあるならば，大学に持ちかけて共同研究でも始めちゃうようなネタという気もするのだが．
思案の最中．
うだつが上がらんと，ほんと，なんにもできないねぇ．
やだやだ．</p>

<p>閑話休題．</p>

<h1>まくら</h1>

<p>そのOSは，Xen の mini-os (厳密にいうと stubdom)をベースにしているので，Amazon EC2 でも動作する．
Amazon が提供していないカーネルを独自に EC2 で動作させるためには，どうやら EBS ボリュームを作らねばならないらしい．
私は，AWS の単なるユーザで，細かいところはあまり詳しくない．
よって，EBS ボリューム以外での起動方法もあるのかもしれないが…．</p>

<p>手順は本家ヘルプページに割と細かく説明されている．
解説ブログも，ググれば山盛り．
さすがは，みんな大好きAWS．</p>

<p>だがしかし，最近になって，AWS は，管理ツールを AWS-CLI というものに統合しようとしている一方，本家ヘルプページは，AWS-CLI への対応が十分にできていない．</p>

<p>そこで，本稿では，AWS-CLI で mini-os をブートさせるための手順を記す．</p>

<!-- more -->


<h1>作業</h1>

<h2>概要</h2>

<p>独自のカーネルをEC2上で動作させるためのイメージ(以下，オレオレイメージ)は，EBS のスナップショットから作るようになっている．
Xen ではおなじみの PV-GRUB が，オレオレイメージ中にある boot/grub/menu.lst を読み，
kernel (本稿の場合は mini-os)をロードしブートする．
手元環境でEBSを作ってアップロードすることもできるのかもしれないが(知らない)，ここでは EC2 上で t1.micro を立ち上げて作業する．
一連の作業時間は，1時間もかからない．t1.micro なら10円にも満たないような額だろう．</p>

<p>本稿では，ビルドは手元で行うことを想定している．ビルド環境さえもEC2上に立てるということも，もちろんできる．
その際の作業の読み替え箇所は，いちいち言及するまでも無いだろう．</p>

<h2>手順0: ~/.aws/config</h2>

<p>こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[default]
</span><span class='line'>aws_access_key_id=ないしょ
</span><span class='line'>aws_secret_access_key=ないしょ
</span><span class='line'>region=ap-northeast-1
</span><span class='line'>output=text</span></code></pre></td></tr></table></div></figure>


<p>region が違うと，下記例示の image-id やらなにやら変更が要るかもしれない．</p>

<h2>手順1: EBSボリュームへのアクセスを行う EC2 インスタンスの生成</h2>

<p>EC2のインスタンスを立ち上げる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 run-instances --image-id ami-dcfa4edd --instance-type t1.micro --security-group-ids quick-start-1 --key-name monaka</span></code></pre></td></tr></table></div></figure>


<p>&mdash;security-groups-ids や &mdash;key-name は，ご自分の環境に合わせて．
&mdash;image-id も，好みの環境があるなら，それで．
でも，本稿の例だと複雑なことはしないので，amiの選択に凝るのは時間の無駄かも．</p>

<p>結果はこんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>578606849602 r-351e1831
</span><span class='line'>GROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>INSTANCES 0   i386    None    False   xen ami-dcfa4edd    i-a3bec9a4  t1.micro    aki-ec5df7ed    monaka  2014-02-01T11:04:33.000Z    None    None    /dev/sda1   ebs None    paravirtual
</span><span class='line'>MONITORING    disabled
</span><span class='line'>PLACEMENT ap-northeast-1b None    default
</span><span class='line'>SECURITYGROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>STATE 0   pending
</span><span class='line'>STATEREASON   pending pending</span></code></pre></td></tr></table></div></figure>


<h2>手順2: 諸々のファイルを入れるEBSボリュームの生成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 create-volume --size 1 --availability-zone ap-northeast-1b</span></code></pre></td></tr></table></div></figure>


<p>mini-os のサイズは1MB以下なのだが，EBSボリュームの最低サイズは1GB．無駄だがやむなし．</p>

<p>結果はこんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ap-northeast-1b  2014-02-01T10:46:19.012Z    1   None    creating    vol-1cbb4b16    standard</span></code></pre></td></tr></table></div></figure>


<h2>手順3: EBSボリュームのEC2インスタンスへのアタッチ</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Monacintosh:~ monaka$ aws ec2 attach-volume --volume-id vol-1cbb4b16 --instance-id i-a3bec9a4 --device /dev/sdh1</span></code></pre></td></tr></table></div></figure>


<p>vol-1cbb4b16 は，手順2の結果で得られたもの．i-a3bec9a4 は，手順1の結果で得られたもの．</p>

<p>結果はこんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2014-02-01T11:05:25.613Z /dev/sdh1   i-a3bec9a4  attaching   vol-1cbb4b16</span></code></pre></td></tr></table></div></figure>


<h2>手順4: 作業用 EC2 インスタンスへの ssh ログイン</h2>

<p>手順1で，インスタンスを立ち上げた直後は，サーバのFQDNが判らない．
そろそろインスタンスのプロビジョニングも終わっているはずなので，確認．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 describe-instances --instance-ids i-a3bec9a4</span></code></pre></td></tr></table></div></figure>


<p>結果はこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RESERVATIONS 578606849602    r-351e1831
</span><span class='line'>GROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>INSTANCES 0   i386    None    False   xen ami-dcfa4edd    i-a3bec9a4  t1.micro    aki-ec5df7ed    monaka  2014-02-01T11:04:33.000Z    ip-10-132-154-11.ap-northeast-1.compute.internal    10.132.154.11   ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com   54.199.18.76    /dev/sda1   ebs None    paravirtual
</span><span class='line'>BLOCKDEVICEMAPPINGS   /dev/sda1
</span><span class='line'>EBS   2014-02-01T11:04:36.000Z    True    attached    vol-69bc4c63
</span><span class='line'>MONITORING    disabled
</span><span class='line'>PLACEMENT ap-northeast-1b None    default
</span><span class='line'>SECURITYGROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>STATE 16  running</span></code></pre></td></tr></table></div></figure>


<p>compute.amazonaws.com で終わっているのが，外向きのFQDN．
今回の場合は，ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com
なので，おもむろに ssh．</p>

<p>Amazon Linux の場合は，ログインユーザは ec2-user となる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh ec2-user@ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<p>サーバの公開鍵を受け入れるかどうかなど聞かれる．
結果は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host 'ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com (54.199.18.76)' can't be established.
</span><span class='line'>RSA key fingerprint is e8:10:70:59:ce:4b:7b:59:97:92:35:d8:35:a7:3a:92.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com,54.199.18.76' (RSA) to the list of known hosts.
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>See /usr/share/doc/system-release/ for latest release notes.
</span><span class='line'>No packages needed for security; 170 packages available
</span><span class='line'>Amazon Linux version 2013.09 is available.
</span><span class='line'>[ec2-user@ip-10-132-154-11 ~]$ </span></code></pre></td></tr></table></div></figure>


<h2>手順5: EBSボリュームのマウント</h2>

<p>手順3では，EBSボリュームはアタッチしかしていない．
ここでファイルシステムを作成して，マウントする．</p>

<p>ファイルシステムの生成は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-132-154-11 ~]$ sudo mkfs.ext2 /dev/sdh1</span></code></pre></td></tr></table></div></figure>


<p>結果は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mke2fs 1.41.12 (17-May-2010)
</span><span class='line'>Filesystem label=
</span><span class='line'>OS type: Linux
</span><span class='line'>Block size=4096 (log=2)
</span><span class='line'>Fragment size=4096 (log=2)
</span><span class='line'>Stride=0 blocks, Stripe width=0 blocks
</span><span class='line'>65536 inodes, 262144 blocks
</span><span class='line'>13107 blocks (5.00%) reserved for the super user
</span><span class='line'>First data block=0
</span><span class='line'>Maximum filesystem blocks=268435456
</span><span class='line'>8 block groups
</span><span class='line'>32768 blocks per group, 32768 fragments per group
</span><span class='line'>8192 inodes per group
</span><span class='line'>Superblock backups stored on blocks: 
</span><span class='line'>  32768, 98304, 163840, 229376
</span><span class='line'>
</span><span class='line'>Writing inode tables: done                            
</span><span class='line'>Writing superblocks and filesystem accounting information: done
</span><span class='line'>
</span><span class='line'>This filesystem will be automatically checked every 24 mounts or
</span><span class='line'>180 days, whichever comes first.  Use tune2fs -c or -i to override.</span></code></pre></td></tr></table></div></figure>


<p>ファイルシステムはできたので，早速マウント．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-132-154-11 ~]$ sudo mount /dev/sdh1 /mnt</span></code></pre></td></tr></table></div></figure>


<p>特にメッセージの出力など無く，コマンドプロンプトに戻ってくる．</p>

<h2>手順6: menu.lst の生成</h2>

<p>PV-GRUB が読む menu.lst を，EBSボリューム(の中にあるファイルシステム)に置く．
エディタ使ってもいいけれど，この程度なら猫で十分．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ip-10-132-154-11 ec2-user]# sudo -s
</span><span class='line'>[root@ip-10-132-154-11 ec2-user]# cat &gt; /mnt/boot/grub/menu.lst
</span><span class='line'>default 0
</span><span class='line'>
</span><span class='line'>title MiniOS test
</span><span class='line'>        root (hd0)
</span><span class='line'>        kernel /mini-os
</span><span class='line'>[root@ip-10-132-154-11 ec2-user]# exit</span></code></pre></td></tr></table></div></figure>


<p>sudo -s を使ったので，最後には exit で，ec2-user に戻しておいた．</p>

<h2>手順7: mini-os のコピー</h2>

<p>何らかの方法で行う．
ふつうは scp を使うと思う．
そして，EC2 インスタンス上の /mnt/mini-os に配置する．
ここでmenu.lst の記述に引っ張られて，うっかり，/mini-os に置いたりとかしないように．</p>

<h2>手順8: スナップショットの生成</h2>

<p>手順7までで，EC2インスタンスは用済みとなる．
だから，stop-insrance なり terminate-instance なりで落としてもよい．
けれども，最初の動作確認ができるまでは，立ち上げっぱなしのほうがよいかもしれない．
EC2の課金は1時間単位だけれども，1時間以内にn回立ち上げ直すと，n時間分の料金になる．</p>

<p>EC2のインスタンスにアタッチしたままでも，スナップショットは取れる．
そうでないと，スナップショットの意味が無い．</p>

<p>操作は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 create-snapshot --volume-id vol-1cbb4b16</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>結果は，こんな感じ．
</span><span class='line'>None  578606849602    None    snap-940d6c7a   2014-02-01T11:24:16.000Z    pending vol-1cbb4b16    1</span></code></pre></td></tr></table></div></figure>


<h2>手順9: スナップショットからオレオレイメージの生成</h2>

<p>いよいよ佳境．スナップショットからオレオレイメージを生成する．
正直言うと，よく調べがついていないのだけれど，イメージの概要を示すjsonファイルが必要らしい．
短いものなので，これもテキストエディタを持ち出すまでもないはず．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; blockdevice.json
</span><span class='line'>[
</span><span class='line'>        {"DeviceName":"/dev/xvda","Ebs":{"VolumeType":"standard","DeleteOnTermination":true,"VolumeSize":1,"SnapshotId":"snap-940d6c7a"}}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>VolumeSize は，最初に 1GB で作ったから．SnapshotId は，手順8の出力と合わせる．</p>

<p>そして，イメージの登録を行う．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 register-image --root-device-name /dev/xvda --name "Mini-os test" --block-device-mappings file://blockdevice.json --architecture x86_64</span></code></pre></td></tr></table></div></figure>


<p>結果は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ami-ef650eee</span></code></pre></td></tr></table></div></figure>


<h2>手順10: オレオレイメージの起動</h2>

<p>そして感動のフィナーレ．オレオレイメージの起動．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 run-instances --image-id ami-ef650eee --instance-type t1.micro --security-group-ids quick-start-1 --key-name monaka</span></code></pre></td></tr></table></div></figure>


<p>結果は，こんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>578606849602 r-f17d65f5
</span><span class='line'>GROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>INSTANCES 0   x86_64  None    False   xen ami-ef650eee    i-b38630b4  t1.micro    monaka  2014-02-01T11:46:28.000Z    None    None    /dev/xvda   ebs None    paravirtual
</span><span class='line'>MONITORING    disabled
</span><span class='line'>PLACEMENT ap-northeast-1b None    default
</span><span class='line'>SECURITYGROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>STATE 0   pending
</span><span class='line'>STATEREASON   pending pending</span></code></pre></td></tr></table></div></figure>


<p>これだけだと，本当に立ち上がったのか判らない．</p>

<p>ログの取得は，こんな感じで行う．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 get-console-output --instance-id i-b38630b4</span></code></pre></td></tr></table></div></figure>


<p>i-b38630b4 は，オレオレイメージの run-instance の結果から引っ張ってくる．</p>

<p>mini-os 自身は小さいものの，mini-os の実行環境のプロビジョニングには，そこそこの時間がかかる．
遅い時は5分以上かかるので，気長に待つ．
どうせ1時間までは同じ時間だから．</p>

<h1>雑感</h1>

<p>EC2 == クラウド == インフラ屋さんやWeb屋さん</p>

<p>という第一印象を持つかもしれないが，stubdom は，newlibだのlwIPだの使っていて，技術要素としては，むしろ組込み屋の定番ライブラリで成り立っている．</p>

<p>2000年ごろには，IOKit を用いてオレオレOSを作るのが流行ったが，同様に，オレオレクラウドOSを作るのが地味に流行るかもしれない．
情報量が少なくて，とっかかりは辛いが，#kernelvm の常連発表者のレベルであれば，たぶん半日のハッカソンで，何らか創り出せるだろう．そんな気がする．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep good company]]></title>
    <link href="http://www.monaka.org/blog/2014/02/03/keep-good-company/"/>
    <updated>2014-02-03T15:30:22+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/03/keep-good-company</id>
    <content type="html"><![CDATA[<p>起業したいという方と話をしていると，必ず出るのが，雇用に関する話．</p>

<p>曰く，「起業をしたいのに，社員候補が居ない．」
経営と雇用を混同している起業志望者の．典型だ．</p>

<p>別のパターンもある．
同年代で先に起業した人たちの「社員の定着が悪い」とぼやくのを聞き，起業前から心配している．
中年から上の年代に多い．</p>

<p>こんなふうに，起業/経営と，雇用することが不可分になっている方は，想像以上に多い．
…というか，私自身が，割と長い間，不可分に考えていた．</p>

<h2></h2>

<p>今の私は，こう思う．
「雇用するから，社員の心配をしなければいけなくなる．雇用はしちゃダメ」</p>

<!-- more -->


<p>限られた例外は，人材派遣会社だ．
特に特定派遣は，雇用をしないわけにはいかない．社員にしないと派遣できないから．
私に思い浮かぶのはこの1例のみだが，その他，許認可等で，雇用が避けられない場合も無くはないだろう．</p>

<p>しかしそれでも，雇用は可能な限り避けるべきだと，思う．</p>

<p>ネットの進展で，特に経理総務系の仕事の多くはアウトソーシングできる．
10年前に Money Forward があったなら，私は総務雇用のみならず税理士との契約もしなかっただろう．
物販のロジスティクスは，月5000円からでAmazonが引き受けてくれる．</p>

<p>セールスだけは，どんな分野であれ自社で抱えたほうがよいと，私も思う．
しかし付随するPRやブランディングに関しては，外にだしたほうがよい結果が得られる．(もちろん，それらを商材としている会社は別)</p>

<p>技術者も，優秀な人は必ずしも雇用しなくてもよい時代だ．
もしIT関係なら，人材派遣や紹介業に頼らなくても，勉強会などで学生やフリーランスを一本釣りすることは不可能ではない．
サラリーマンでも，以前ほど副業規定はきつくない．
もちろん，一本釣りに見合うだけの目利きや信頼を，釣る側が備えている必要はあるけれども．</p>

<h2></h2>

<p>起業関連のセミナーに行くと，厚生労働省が数多くの雇用対策の助成を行っている，と紹介される．
なんとなくお得に感じるのは，解る．
でも，国が特定分野に助成を行うということは，
経済合理性に任せた場合には，誰も国の思惑通りには選択しない，ということでもある．</p>

<p>中規模老舗企業は，なんだかんだいって資金的にも総務人事機能的にも体力がある．
延命として，そういう貧乏くじを自ら引くのは，アリだろう．
しかし，資本力が無いスタートアップにとっては，まさに自殺行為だ．</p>

<p>少し考えると，解ることだと思うのだが．
目の前の現金に釣られたくなる気持ちも解るのだが．</p>

<h2></h2>

<p>こういったことを切々と説明しても，起業志望者たちの少なからずは，納得した顔にならない．</p>

<p>私の説明が舌足らずなのだろう．
そんなときは，「そうですね．気のいい社員が見つかって，愉しい会社ができるといいですね」
と作り笑顔で話を打ち切る．</p>

<p>作り笑顔ではあるけれども，発した言葉は嘘ではない．
そう．
気のいい社員と一緒に製品やサービスと世に問うのは，とても愉しいことなのだ．</p>

<p>だからこそ，起業家たちは，雇用には慎重にならなければならない．
気のいい社員を解雇する瞬間の絶望を，先回りして想像しなければならない．
経営をしたいのか，雇用をしたいのかを，常に自らに問わなければいけない．</p>

<p>悪いことは言わん．
絶望を味わったヤツの言うことは，聞いておけ．</p>

<p>この辺甘く考えていると，My own Limited Company しか残らない最後が来るよ．</p>

<h2></h2>

<p>その上で，雇用をしたいなら，すればいいと思う．</p>

<p>なお，言うまでもないことだけれども，雇用自身は絶対悪ではない．
費用対効果が得られる確証があっての雇用は，経営者が決断すべき仕事ではある．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加しないと見せないよ．を作った罪]]></title>
    <link href="http://www.monaka.org/blog/2014/02/01/my-fault/"/>
    <updated>2014-02-01T08:28:21+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/01/my-fault</id>
    <content type="html"><![CDATA[<p>140字以内で纏めると，こういうこと．</p>

<blockquote class="twitter-tweet"><p>「Q. 決定プロセスを何かで公開してほしい」「A. 軽量Rubyフォーラムに加入すると参加する事ができる。」&#10;あかん，TOPPERSが抱える数少ないデスパターンを，完全踏襲しとる．w <a href="http://t.co/bVOtyNMrs9">http://t.co/bVOtyNMrs9</a></p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/429207095041224704">January 31, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>私は，TOPPERSプロジェクトという，組込み系OSSを担いだNPOに参加していた．
設立準備から手伝って，一応10年くらい理事もしていた．</p>

<p>NPO法人TOPPERSプロジェクトは，組込みソフトの団体として，成功したと思う．
電子ピアノにも，宇宙機にも，自動車にも載った．
私が書いたソースコードも，割と入っている．
そこらそんじょのOSSなんざ蹴散らすくらいの採用例，出荷総数はあるだろう．</p>

<p>今は辞めた．
理事も辞めたし，今や会員ですらない．</p>

<!-- more -->


<p>当時やっていた会社が傾いたとか，いろいろ直接的な理由はあるのだが．
大きな背景として， <strong>OSSプロジェクトとしてのアンチパターンを作っているのではないか</strong> ，という疑問が年を追う毎に，私の中で大きくなっていったのが，ある．</p>

<p>TOPPERSプロジェクトには，会員以外には見せないよ，という仕組みがある．
具体的には，いわゆる，早期リリースという制度．
当初から，会員企業が受託製品に使った場合の，ソースコードの扱いとか，厳密運用が難しいことは解っていた．
私が辞める頃には，会員が，先に開かれたOSS (って表現は変だが) として公開し，そのあとプロジェクトにコントリビュートするなんてこともあったりして，制度として崩壊していた気もする．</p>

<p>&ldquo;オープン&#8221;ソースを管理するプロジェクトがソースコードを隠す，というのは，少し考えればわかる．矛盾した話だ．なんで当時気づかなかったのだろうw．</p>

<p>そして，各方面が指摘しているとおり，オープンソースは，ソースコードもさることながら，生産や管理のプロセスの透明化にメリットがある．
生産や管理のプロセスを，参加者にしか見せないというのは，ソースコードを隠すのと同様に，スジとしては最悪手の部類だろう．
そこで，本稿最初に引用した tweet へ繋がる．</p>

<p>組織として成立させるためには，なんらかのメリットを出す必要はある．
その辺りの仕込みは大変なところだと思うのだがしかし．</p>

<p>言い訳になるが，TOPPERSプロジェクトが立ち上がった2000年当時，オープンソースは暗中模索だった．
私は他人様よりも愚かなので，間違いも多い．
でも，もうあれから月日は流れた．
私は愚かなままかもしれないが，他人様はそろそろ良手を編み出しても良い頃だろう．</p>

<p>良手を編み出す上で，悩ましいのが，TOPPERSプロジェクトの確かな成功ではないかという気がしている．
厳密に言うと，NPO組織としては，安定収入で成功しているという事実だ．
…というと不幸を望んでいるように読めそうだが，言うまでもなく，そうではない．
今は袂を分かつ立場だが，成功するように私も頑張った．
成功し続けていただかないと，日本の組込みソフト業界全体が困る．</p>

<p>しかし，言葉を慎重に選ぶべきかもしれないが，OSSプロジェクトとしてのTOPPERSは失敗だったとも思っている．
もともと「OSSは目的ではなく手段だ」という立ち位置の団体ではあった．
なので，OSSプロジェクトとして側面がどうなろうとも，TOPPERSプロジェクトには何らの傷がつくわけでもない．</p>

<p>私がマズいと思っているのは，TOPPERSプロジェクトの成功が，OSS系NPOのロールモデルになりそうな傾向だ．
実際，TOPPERSプロジェクトの定款を参照しました，という声は，他の{組込系|OSS系}NPOから，ずいぶんと頂いた．</p>

<p><a href="http://ossforum.jp/ossaward8th2">「第8回 日本OSS貢献者賞・日本OSS奨励賞」</a> が示す通り，ニッポンのOSSは，この点についてあまり深く考えていないか，判っていて目をつぶっているか，どちらからしい．
そして，そのロールモデルが確立するまでの10余年には，間違いなく私がいる．
割と中心に近いところに．</p>

<p>罪なことをしたなぁ，と，肩を落としている．ごめんなさい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今日現在のmrubyについて雑想]]></title>
    <link href="http://www.monaka.org/blog/2014/01/31/memorandom-about-mruby/"/>
    <updated>2014-01-31T10:28:44+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/31/memorandom-about-mruby</id>
    <content type="html"><![CDATA[<p>なんとなく，今日現在の mruby について，私自身が薄ぼんやりと考えていることを書いておく．
なんでこのタイミングなのかに，あまり深い意味はない．
一つのきっかけとして，イベントはある．
mruby を話題の中心に据えたイベントが，<a href="http://www.digitalfukuoka.jp/events/30?locale=ja">今日の午後開催される</a>．
私も聴講者として参加する予定だ．
参加した後だと，その感想と混じる．
なんとなく私見の純度が下がるかな，とか．</p>

<p>私は，何を書いても，誰かや何かをdisっているように受け取られがちだ．
けれども，本稿もdisりの意図は全くない．
徒然なるままに．</p>

<!-- more -->


<h2>小規模組込みも視野に入れている割に，Lチカに向かない言語</h2>

<p>この tweet が象徴的だと思う．</p>

<blockquote class="twitter-tweet"><p>TinyFeather+mrubyでLチカしてみたんだけど、意外と難しいかったw String &lt;=&gt; byte Arrayの変換がpack/unpackないのに苦労したっていうのが本題</p>&mdash; ふぇえ (@fenrir_n) <a href="https://twitter.com/fenrir_n/statuses/428290481617780738">January 28, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>IIJさんが pack/unpack を提供する mrbgem を提供しているのではあるけれども．
小規模組込みでは，ペリフェラルレジスタの操作で，ビット演算を多用する．
しかし mruby は，言語仕様からして，数値に対して態度が煮え切っていない．と，思う．</p>

<p>オブジェクト指向脳でいうと，pack/unpack じゃなくて，GPIOクラスとかSPIクラスとかを作るのが正道だろう，製品開発の実務では，それらを作りこまないでいては生産性も上がらないとも思う．</p>

<p>しかし，ボードが届いて最初にやるのは，Lチカなのだ．</p>

<p>プロジェクトのスタートアップで手間がかかるというのは，製品採用にあたっては致命的に痛い．</p>

<h2>不安定が活況を生み，それゆえ採用が難しい言語</h2>

<p>これも他人様の tweet から．</p>

<blockquote class="twitter-tweet"><p>mruby-gtk2が未だに動かない。。。多数のモジュール連結するタイプのプロジェクトは、私はコレで動かした！という動作確認済みのハッシュ一覧が欲しいな。どれかのモジュールで仕様変更があると総崩れ。</p>&mdash; きむしゅ (@kimu_shu) <a href="https://twitter.com/kimu_shu/statuses/427641049054322688">January 27, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>mrubyは本家のアップデートによるmrbgemの突然の死があるので、とりあえず、自分のmrubyリポジトリを持って、動く状態に整合性をとらないとつらい。</p>&mdash; take-cheeze (@take_cheeze) <a href="https://twitter.com/take_cheeze/statuses/428792261032177664">January 30, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>本家 mruby は走り続ける．
おそらく永遠に不安定だ．
それは，mruby の設計や実装がダメだからでは(もちろん)無い．
原作者である Matz 氏の根本的な考え方が反映されているものだろう．
本人が，こう tweet している．</p>

<blockquote class="twitter-tweet"><p>タダ乗りから自由であるための条件として、そのプロジェクトを無視できない重要性、タダ乗りしただけでは置いて行かれてしまう進化の速さ、金や地位で言うことを聞かせられない没交渉性などはあまり知られていないかもしれない。特に最後。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/416389827181826048">December 27, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>タダ乗りしただけでは置いて行かれてしまう進化の速さ</p></blockquote>

<p>こういった性質は，ハッカーと呼ばれる人たちのマインドに火をつけやすい．
実際，あっというまに mrbgem が量産された．
今では Ruby の代替として考えてもよいのでは，と思える程の充実ぶりだ．</p>

<p>この性質は，機器組込み屋にとっては，酷く辛く痛い．
他の保守部品と同様に，機器組込み向けソフトウェアも，バージョン固定するのが基本線だから．</p>

<h2>とはいえ，安定版にあまり意味は無い</h2>

<p>mruby が抱えるサグラダ・ファミリア的性質と，機器組込み業界との親和性の無さは，私もどこかに登壇するたびに言ってきた．</p>

<p>その言動と関係があるのかどうかは知らないが，mrubyを担いでいる方々も，安定版を出す方向で動いているらしい．
私は軽量Rubyフォーラムに参加していないので，詳しいことは知らない．</p>

<p>安定版の登場は，確かに，ビジネス的には意味がある．
開発者をかき集めるときに，スキルセットを設定しやすくなる．
応用製品を作る際に，準拠バージョンを設定しやすくなる．</p>

<p>こういったメリットは，非技術系経営層への対策としては，一定の意味がある．とても大事なことだ．しかし，技術者たちは，あまり歓迎しないかもしれない．</p>

<p>安定していることを再優先にしつつも， <strong>最新版に最も近いもの</strong> を，機器組込み系エンジニアは，使いたがる傾向がある．
バージョン固定で永く付き合うことになるので，最初の時点で古いのは嫌なのだ．</p>

<p>なので，機器組込み系エンジニアは，安定版を採用しないだろう．
安定版が 3ヶ月おきに更新される，というような，想像しづらいリリース体制が構築されれば別だが．</p>

<p>かつて「プロジェクトの数だけITRONは存在する」と言われたように，「プロジェクトの数だけ mruby が存在する」というような状況が展開されると予測する．
コード規模で見ても，mruby は ITRON に各種ミドルウェアを付けた状態と概ね似ているので，同じような運用が為される可能性は高い．
規格適合のための処理系テストスイートが，もてはやされることになるだろう．</p>

<p>歴史に学ぶ，という観点では，TOPPERSプロジェクトの第一世代カーネル群が，おそらく参考になる．
FI4カーネルは新規設計したほうが綺麗になるのは明らかだったのに，JSPカーネルへの拡張で済むように作った．
そのようにした理由はいくつかあるが，JSPカーネルとFI4カーネルの中間的なカーネルを，実製品開発プロジェクト毎に作れるようにしたかったから．
設計思想としては，mruby と mrbgems の関係に割と近い．
そして，FI4カーネルは，目論見通りに使われた．</p>

<p>だから何なのだ，という話ではないのだけれど．
過去の分析と近未来予測は，使い方を考える上で重要だろうとは思う．</p>

<p>あ，ぐだぐだ書いていたら，そろそろ会場へ向かう時間だ．
そろそろ着替えるか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スタートアップで優秀な技術者を探す方法]]></title>
    <link href="http://www.monaka.org/blog/2014/01/28/best-way-to-employ-on-startup-stage/"/>
    <updated>2014-01-28T14:35:11+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/28/best-way-to-employ-on-startup-stage</id>
    <content type="html"><![CDATA[<h1>雇用はいちばん難しい</h1>

<p>かつてお世話になった方が，起業計画中とのことで，相談を受けた．
私は，起業家としては失格の部類なのだけれども，スタートアップの空気感は解る，みたいなレベルではあるので，返事を書いた．</p>

<p>送信後，読みなおしたら割と一般論っぽかったので，ちょちょいと書きなおして当日記にも載せておく．
ついでにセルフツッコミも入れておく．</p>

<p>のっけから自分の話の腰を折るが，スタートアップでは&#8221;一般論&#8221;は&#8221;役に立つ&#8221;を意味しない．
毒にも薬にもならない，ってことだ．</p>

<!-- more -->


<blockquote><p>優秀な技術者の雇用ですか…これは一番難しい問題ですね．
たぶん私自身もあと20年くらい悩み，挙句に答え出ないかも…．</p>

<p>私自身の近況に限って言えば，もう新規の雇用は止めました．法定福利や源泉税務にかかる手間を考えると，どんなに優秀な技術者であっても割に合いません．
(日本の雇用行政は，本当に不合理非効率だと思います)
省いた手間は，費用に応じフリー技術者への委託をする際の，報酬の上積みに当てています．</p>

<p>…というのは，人的規模の拡大は諦めてしまった悪めのケースです．</p>

<p>一般論として，スタートアップの雇用は，紹介が最善かなと思います．
優秀な方は優秀な方を知っていますから，優秀な方に心当たりを尋ねるのが確実です．</p></blockquote>

<p>私は優秀ではないけれども，業界内ではそれなりに目立ってはいたので，人材を探しているという旨の紹介はときどき受ける．
そんなときは，私よりも優秀な方に，お心当たりが無いかどうかを尋ねるといったようなことはする．</p>

<p>私の職業は人材紹介業ではないので，報酬は頂かない．
そのかわり，信用できる相談者でなければ，行動を起こさない．</p>

<p>こういった信頼の鎖に入れるかどうかは，雇用を考えるスタートアップにとって，第一の壁だろうと思う．
壁の高さは，その集団の能力の高さに比例する．たぶん．</p>

<p>スタートアップを考えてからでは遅い．信頼は作るのに時間がかかるから．
壊れるのは一瞬なのに．</p>

<blockquote><p>他に多いのは，いわゆる&#8221;IT系勉強会&#8221;のようなところで，活きがいいのを一本釣りしてくるという方法です．
同業で固まって酒のんで，チャラい感じはありますが…．
発表で技術力は測れますし，人柄についての照会も容易ですので．
これも身の回りのスタートアップではよくやっている手です．
ナナロク世代の若手におだてられて，たまに手伝っています．</p></blockquote>

<p>イベント．ミートアップみたいなやつ．
地べたを這いつくばっている組込み系から見ると，正直Webチャラいよとか思わなくもないけれど．
ハズレを引かないよう事前にお互いを知っておくというのは，至極当然だし．</p>

<p>むしろ組込み系の雇用流動性の低さを，どげんかせんといかんかもね．
こういうイベントが少ない，要らないってことについて．</p>

<blockquote><p>反対に，成功例を見たことがないのが，人材紹介会社や求人サイトを経由した採用です．
人海戦術的なビジネスモデルを立てているところは別ですが，どんなに優秀なヘッドハンタを使っても，ダメなようです．</p></blockquote>

<p>これは，私周辺の狭い範囲の観測なので，ハズレていたら謝る．
ただ，本当に成功例の記憶がないんだよねぇ…．
たぶん，下記の理由なのだろうと推測している．</p>

<blockquote><p>不思議なものですが，採用に際し，関わった知人が多いと，
どんなにドライな人柄であったとしても，そうそう独善な行動は
しないものである，ということなのかもしれません．</p></blockquote>

<p>スタートアップって，どんなにお互いが誠意を尽くしてもなお，不条理に出くわしたり，金銭的に，工数的にしんどかったり，いろいろあるから．</p>

<blockquote><p>採用は，本当に，難しいです．</p></blockquote>

<p>(しみじみと)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パスワードもユーザ名も正しいはずなのに，の巻]]></title>
    <link href="http://www.monaka.org/blog/2014/01/15/cant-login-to-gmail-from-commandline/"/>
    <updated>2014-01-15T01:33:07+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/15/cant-login-to-gmail-from-commandline</id>
    <content type="html"><![CDATA[<h1>ことの起こり</h1>

<p>AWS EC2上に，OTRS をインストールし，　Gmail からのメールをポーリングで読むように設定した．
難しい話ではない．</p>

<p>だけど繋がらない． あれれ?</p>

<p>だって，先日の日記エントリの通り，Ruby では問題なくできたぜ?
IMAP は有効にしたし，2段階認証はやっていないし．</p>

<h1>Perl 書いた IMAP クライアントで試してみる．</h1>

<!-- more -->


<p>仕方がないな．
OTRS は (Ruby ではなく) Perl で大半が書かれている．
それと似たような記述でログインをテストしてみる．
こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use strict;
</span><span class='line'>use warnings;
</span><span class='line'>use Net::IMAP::Simple;
</span><span class='line'>
</span><span class='line'>use IO::Socket::SSL;
</span><span class='line'>
</span><span class='line'># Create the object
</span><span class='line'>my $imap = Net::IMAP::Simple-&gt;new('imap.gmail.com', use_ssl =&gt; 1, port =&gt; 993) ||
</span><span class='line'>  die "Unable to connect to IMAP: $Net::IMAP::Simple::errstr\n";
</span><span class='line'>
</span><span class='line'># Log on
</span><span class='line'>if (!$imap-&gt;login('___________@gmail.com','_p_a_s_s_w_o_r_d_', debug =&gt; 1)) {
</span><span class='line'>  print STDERR "Login failed: " . $imap-&gt;errstr . "\n";
</span><span class='line'>  exit(64);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>実行…あれれ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu@ip-10-0-0-208:~$ perl test.pl
</span><span class='line'>Login failed: [ALERT] Please log in via your web browser: http://support.google.com/mail/accounts/bin/answer.py?answer=78754 (Failure)</span></code></pre></td></tr></table></div></figure>


<p>んんん?</p>

<p>ブラウザでアクセスせよ，とな．
でも，この動作環境，Ubuntu Server で，デスクトップ環境入ってないよ．もちろんブラウザも．</p>

<p>手元のブラウザで事態を把握してみようと試みたところ，どうやらイカガワシイと思われるアクセスを遮断しているようだ．
<img src="http://www.monaka.org//blog/2014/01/15/screen-shot-2014-01-15.png" alt="赤い画面でお怒りのGmail様" /></p>

<h1>socksサーバを立ってて逃げ道を作る．</h1>

<p>w3m など，文字ターミナル向けブラウザを使ってアクセスすれば良いのかもしれない．
でも，たぶん，Googleのことだから，JavaScriptとか入っていていろいろ面倒なことになりそうだ．</p>

<p>なので，ssh についている socks サーバ機能を用いる．
手元の端末から，次のようにして，1080 版をsocksの口にする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -D1080 server.example.com</span></code></pre></td></tr></table></div></figure>


<p>server.example.com は，実際には，EC2のインスタンス．
ここで指定した1080番ポートはlocalhostのもの．だから，EC2側のincomingはsshのポート，TCP 22番だけ開いていればよい．</p>

<p>そして，手元のブラウザのproxy設定．localhost:1080 で socks を経由するよう設定する．</p>

<p>ここまでで下ごしらえは完了．
手元のブラウザから，Gmail へアクセスする．
あとは…なりゆきでアクセスすれば，お怒りが解けた…はず．
(2月に入ってからこの稿を書き上げているので，記憶が既に曖昧…)</p>

<h1>まとめっぽい何か</h1>

<p>ssh の -D オプションは，ヘッドレスサーバを管理している時に割と便利なので，覚えておくと何かと役に立つ．</p>

<p>こういう対策をGmail側がしなきゃいけないくらい，botからの不正アクセスが多いってことなのだろうなぁ…．
面倒だ，と不満を漏らしてはいけないのだろう．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby を使ってGmailの内容を別のアカウントのGmailへ移す方法]]></title>
    <link href="http://www.monaka.org/blog/2014/01/14/gmail-imap-sync-with-ruby/"/>
    <updated>2014-01-14T19:37:18+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/14/gmail-imap-sync-with-ruby</id>
    <content type="html"><![CDATA[<h1>まくら</h1>

<p>明日の東京は，予想最高気温4℃とか降雪とか，もう勘弁して下さいという感じのようなのですが．
数ヶ月もすれば暖かくもなりましょう．
そしてやってくるのは，別れと出会いの春でございます．</p>

<p>いまどき，IT関連でなくてもメールくらいは日用品になっておるわけでして．
所属が変わるときには，自分も，自分の所属組織も，この扱いに困ったりするわけです．
私が最初にメアドなるものを貰ってから20年以上経ちますが，この辺りは何の進歩も見られないなと，思ったりするような，しないような．</p>

<h1>Gmailの内容保全について考える．</h1>

<p>今や社会インフラといえるよなサービスの代表として Gmail は筆頭でしょう．
個人，学生のみならず，Google Apps for Bysiness (GAB)などで会社でも使われていることも多いですし．</p>

<p>学生が学校のアカウントとして Gmail を持っている場合は，卒業と同時にそれを失うのが一般的なはずです．
卒業後を見越していればよいのですが，新入生の頃は右も左も判らないので，つい学校の Gmail に頼っちゃった，ということは十分に有り得るでしょう．</p>

<p>会社の場合は，退職と同時に，その持ち出しを禁止されるのが一般的だろうと思います．
この場合，困るのは，会社に残った側です．
メールのやり取りは，退職者が行っていた仕事のログでもあり，保全したいと思うはずです．
が，GABのアカウントは有料でして，アカウントを消して経費節減に繋げたいという経営経理側の言い分もわかります．
その辺を上手く調整しないと…</p>

<blockquote class="twitter-tweet"><p>退職者のGoogleアカウントが削除されたため、その退職者がオーナーになっていたGoogleドライブのファイルが全て消え失せて大騒ぎしている。</p>&mdash; わいお (@KanjiruWaio) <a href="https://twitter.com/KanjiruWaio/statuses/421468843513376768">January 10, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>…こういう哀しいできごとがおこるわけです．(この例はメールではありませんが)</p>

<!-- more -->


<h1>それ，Rubyでやってみよう．</h1>

<p>いや別に Ruby でなくてもできますが…(汗．閑話休題．</p>

<p>一般的に言うと，Gmail の保全には，imapsync などの汎用ツールを使うだろうと思います．
しかし，ここでは，独自にスクリプトを書くという提案をします．</p>

<p>Ruby には，強力なIMAPライブラリがあるので，あんまり難しくはありません．
あと，Ruby 入門の日記ではありませんので，処理の詳細は説明しません．</p>

<h2>注目は X-GM-RAW</h2>

<p>注目していただきたいのは，「 <strong>#ここに注目</strong> 」の行です．
Gmail は IMAP の SEARCH に X-GM-RAW なる指定ができます．
これは，Gmail のweb画面にある検索窓に入力する書式を，そのまま指定できます．
この例では，Googleグループのandroid-x86というグループから来ているメールを抽出してコピーしています．</p>

<p>Gmail はディスク容量が大きく，検索のスピードも早いため，一般的なメールフォルダよりも多くのメールを溜め込みがちです(個人差はありますが)．
これを，imapsync などの汎用ツールを使って全コピーしようとすると，涙目になります．</p>

<h2>まとめ</h2>

<p>スクリプトの中には，いろいろ細かいネタが仕込まれているのですが，それらもサックリと省略します．
汎用ツールで開発時間を短縮するという考え方も間違いではありませんが，汎用ツールでは対応できない機能を見つけたときには，小さなスクリプトを作るのもアリですよね，と．
まとめになっていませんが，今日はこんな感じで．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env ruby
</span><span class='line'># -*- coding: utf-8 -*-
</span><span class='line'># Copyright (C) 2014 Masaki "monaka" Muranaka.
</span><span class='line'># License: MIT.
</span><span class='line'>
</span><span class='line'>require 'net/imap'
</span><span class='line'>require 'time'
</span><span class='line'>
</span><span class='line'>src_imap = Net::IMAP.new('imap.gmail.com', 993, true)
</span><span class='line'>dst_imap = Net::IMAP.new('imap.gmail.com', 993, true)
</span><span class='line'>
</span><span class='line'>def parseHeader(msg)
</span><span class='line'>  msg =~/\A(.*?)\r\n\r\n(.*)\Z/m
</span><span class='line'>  head,body=$1,$2
</span><span class='line'>  head=head.split(/\r\n/).map{|i|i[0]+i}.join("\r\n")[1..-1].split(/\r\n[^\s]/).map{|i|i.split(/\r\n\s\s/).join("")}
</span><span class='line'>  Hash[*head.map{|i|i=~/^(.*?):\s(.*)$/;[$1,$2]}.flatten]
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>###################################################################
</span><span class='line'># ここは設定
</span><span class='line'>searchParams = [
</span><span class='line'>                ['FROM', 'tomono@example.com'],
</span><span class='line'>                ['X-GM-RAW', 'list:(&lt;android-x86.googlegroups.com&gt;)'],      #ここに注目
</span><span class='line'>                ['X-GM-RAW', 'list:(&lt;receipt.movsign.info&gt;)']
</span><span class='line'>               ]
</span><span class='line'>
</span><span class='line'>src_imap.login('monaka@somewhere-using-gmail.co.jp', 'password')            #コピー元
</span><span class='line'>dst_imap.login('another-monaka-or-something@gmail.com', 'another-password') #コピー先
</span><span class='line'>
</span><span class='line'>#この辺もお好みで．
</span><span class='line'>src_imap.select('INBOX')
</span><span class='line'>dst_imap.select('INBOX')
</span><span class='line'>
</span><span class='line'>###################################################################
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>searchParams.each do |searchArray|
</span><span class='line'>  puts "Searching #{searchArray[1]}"
</span><span class='line'>  searchIds = src_imap.search(searchArray).each do |id|
</span><span class='line'>    msg = src_imap.fetch(id, 'RFC822')[0].attr['RFC822']
</span><span class='line'>    head = parseHeader(msg)
</span><span class='line'>
</span><span class='line'>    searchIds = dst_imap.search(['X-GM-RAW', "rfc822msgid:#{head[%q{Message-ID}]}"])
</span><span class='line'>    if (searchIds.length == 0) # このチェックを省くと遅くなる
</span><span class='line'>      dst_imap.append('INBOX', msg, nil, Time.parse(head['Date']))
</span><span class='line'>      putc 'w'
</span><span class='line'>    else
</span><span class='line'>      putc '.'
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  puts
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>src_imap.logout()
</span><span class='line'>dst_imap.logout()
</span><span class='line'>
</span><span class='line'>src_imap.disconnect()
</span><span class='line'>dst_imap.disconnect()</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[誰のための義務教育?]]></title>
    <link href="http://www.monaka.org/blog/2014/01/06/the-education-of-everyday-things/"/>
    <updated>2014-01-06T11:15:22+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/06/the-education-of-everyday-things</id>
    <content type="html"><![CDATA[<p>中1になった長女が，学校の宿題で，百人一首の暗記で苦しめられている．</p>

<p>3年前に，こんなツイートで，850 近い RT を得たのだし，流行りに乗って，なんかアプリ作ればとか思う．
…のだが，当人としては，理系能力の低さを自覚し，プログラミング方面に依存しない方向を目指しているらしい．</p>

<blockquote class="twitter-tweet"><p>長女と次女に「カルタやるから読み上げやってくれ」と頼まれ「面倒なのでヤダ」って返した．&#10;Macに向かったので諦めたかと思っていたら，Scratch で読み上げるアプリを作り終え，嬉々としてカルタを始めた．&#10;最近の小学生ェ… http://twitpic.com/4tlzj3</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/66055289463513088">May 5, 2011</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>一緒に遊んでくれなくて寂しいが，プログラミングなんて，無理強いまでしてやるものではないし，仕方がない．</p>

<p>ちなみに，長女が，百人一首の丸暗記のために選んだ教材は，これ．</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=monamour555-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4522429355" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>語呂で覚えさせるのではなく，句の背景が解説されていて，教養を身につけるには良い本だと思う．(でも，そんな正攻法で，冬休み中に覚えきれるのか?)</p>

<p>そんな長女を遠巻きに眺めていて，ふと面白いなと思ったのが，(長女の母である)妻や，(同，祖母である)義母の反応だった．</p>

<!-- more -->


<p>両者とも，理系というよりは文系で，歴女というほどではないが，世間並みくらいには歴史や古典は嫌いではない．
普段は，家事や隣近所の付き合いで，あんまりそういうものに触れることはないだけで．</p>

<p>そんな彼女たちが，長女の詠む上の句で，次々に下の句を思い出していく．
和気あいあいと長女と記憶合戦をしているのを見ると，女子学生だった頃に還ってもいるのかもしれないなという気もしたり．</p>

<p>義務教育っていうのは，主に，子供のために授けるものと思いがちなのだけれども，大人を教育するための手っ取り早い方法なのかもしれない．</p>

<p>聞くところによると，新興国では，大人よりも，子供，特に女子への教育に重点をおくという．それは，子供のほうが長生きするし吸収するから，というのが第一義だろうけれど．
子供が家に帰って，大人，特に母親を始めとする女系に教えるというような，教師育成の観点もあるのだろう．子が親に教える．次世代が育つのではなく，現世代に対しても効くだろう．</p>

<p>余談だけれど，少子化の問題点って，大人に教える(思い出させる)教師たる，子供の減少，って側面もあるような気もする．
学習の機会が少なくなると，大人はどんどん馬鹿になっていく．</p>

<p>よくわからないけれど，たぶん．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSSはタダ乗りでもいいけどマズい]]></title>
    <link href="http://www.monaka.org/blog/2013/12/26/oss-community-and-others/"/>
    <updated>2013-12-26T10:17:50+09:00</updated>
    <id>http://www.monaka.org/blog/2013/12/26/oss-community-and-others</id>
    <content type="html"><![CDATA[<p>Togetter で纏めるかどうか思案しつつ．
まあ，コメントが付く話でもなかろうということで，当日記へ．</p>

<blockquote class="twitter-tweet"><p><a href="http://t.co/w1u1XPzH9S">http://t.co/w1u1XPzH9S</a>&#10;こういう人には、モラトリアムを使ってオープンソース活動をして欲しいなぁ&#10;みんなスタートアップ行って死ぬほど働いちゃうから、OSS系の若者が減ってきている印象。</p>&mdash; Yuichiro MASUI (@masuidrive) <a href="https://twitter.com/masuidrive/statuses/415363396410699776">December 24, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSに敬意を払わないスタートアップ系が増えているのだとしたら，深刻だぬ．&#10;OSSは手段であって目的ではない，っていう好意をジャイアニズム的に解釈して，昔から今まで不毛なままの分野を，アテクシ知ってる． <a href="https://twitter.com/search?q=%23%E3%83%8B%E3%83%83%E3%83%9D%E3%83%B3%E7%9A%84%E7%B5%84%E8%BE%BC%E3%81%BF&amp;src=hash">#ニッポン的組込み</a></p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415825872898117632">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<!-- more -->




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> 敬意を払わない人がいくらいてもいいんですよ。タダ乗りもＯＫ。敬意を払ったり貢献したりする人がゼロになると困るけど。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/415837392822497280">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yukihiro_matz">@yukihiro_matz</a> 敬意を払わない人，タダ乗りする人にに嫌気して，貢献する人が減っていくというデススパイラルがあるのですよ．すべからくそこに行き着くとまでは言いませんが．&#10;最悪ケースで行き着く先は，水になったワインの寓話みたいな結果．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415838576832561152">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> えーと、FLOSS歴20数年の経験から言うと、気にしたほうが負けだと思います。「気にしない」というコミュニティ運営が長続きのコツ</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/415839352766222336">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yukihiro_matz">@yukihiro_matz</a> えーと，わたくしもFLOSS歴は20数年あるわけですがw．&#10;世の中にはダメなFLOSSと上手くいくFLOSSがあるわけです．&#10;ほら，Linux界隈でも，組込み界隈の閉鎖性に，密かにブチ切れた声ありましたよね? 10余年くらいまえに．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415840330156490753">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>あたりがコトの起こり．
このあと続くのだけれど，人様からのmention tweetを延々と個人日記に載せまくるのは，著作権法的にどうなの? って話はあります．
アート作品に無断でtweet貼りまくって炎上した実例もありますし．</p>

<p>なので，第一部は，これくらいにしておいて，翌朝からの独白第2部へ．</p>

<p>以下，私見をざっくりまとめちゃうと，こんな感じでしょうか．</p>

<ul>
<li>Matz氏が言うことも道理ではある．実際成功もした方の方法論ですから，道理があって当然．</li>
<li>OSS コミュニティはちょっぴり特殊で，外の経済経営概念とは違う面がある．</li>
<li>(Web系)スタートアップが，OSS コミュニティの特殊性から解離しつつあるとしたら，OSSにとっては，ヤバイんじゃないかな．</li>
</ul>


<blockquote class="twitter-tweet"><p>昨晩のは，「敬意を払ったり貢献したりする人がゼロになると困る」というのは一致で．&#10;ゼロにしないための「タダ乗り」には，まあ価値はある．&#10;古典経済的にはタダ乗りに見えても，実際には，「タダ乗り」ではない，というケースはありうる．&#10;典型は，敬意とか評価とかを貢献者に提供してい場合．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415983476261679104">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSコミュニティ(の前駆であるハッカーコミュニティ)は，評価経済と原始共産制っぽいナニカでまわっていることを(無自覚かもしれないが)知っていて，そのように振る舞う傾向がある．&#10;ただし，それは全経済世界から見れば，かなり恵まれた，先進的なコミュニティであるんすよ．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415984602151272448">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSコミュと旧来型産業との経済観の乖離は，想像以上に大きくて．&#10;私の直接関与がない時効例を挙げると，CELFやらMOAPやらは，「あいつらタダ乗り」という陰口をよく聞いた．&#10;旧来の経営経済の申し子である組込みコミュは，OSSコミュとの摺り合わせが困難といえるほど難しい．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415988402501070848">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>「敬意を払ったり貢献したりする人がゼロになると困る」という最低レベルを割りこむほどのタダ乗り(評価経済的な貢献さえしない)が起こりえる．OSSコミュには信じがたいことかもしれないけれども．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415988813660315648">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>続) …Web系スタートアップのエコシステムが，(組込みコミュのような)旧来経営経済系に変質しかかっているという仮説が立てられる．実際はどうなのかは，フィールドワークでもしないと何とも言えんけれど．&#10;直感では，あーこりゃヤバくね? って思うず．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415990322779267074">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSコミュの思想が尊重される分野の外に出なかった人と，この漠然とした危機感を共有するのは難しいだろうってことくらいは判るので，その辺は (´ー｀)ｿﾝﾅﾓﾝﾀﾞﾖﾅ と．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415994029419921408">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>まあ，「若者がコミュニティに参加しない」っていうのは，オープンソースって言葉が生まれる前から言われ続けていたことのような気もしなくもないです．
この件，全ては私の杞憂なのかもしれませんけれどね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[組込み技術者と'幸せ']]></title>
    <link href="http://www.monaka.org/blog/2013/12/15/happiness-for-embedded-engineers/"/>
    <updated>2013-12-15T08:52:42+09:00</updated>
    <id>http://www.monaka.org/blog/2013/12/15/happiness-for-embedded-engineers</id>
    <content type="html"><![CDATA[<h2>まくら</h2>

<p>とあるWebメディアから，新春インタビューの依頼を受けました．
どこからかは，載るまで秘密です．載らないかもしれませんし．</p>

<p>このエントリを書いている時点では取材前ですし，載ったとして，(当然)年越しです．</p>

<p>来年の予測を，ざっくばらんに…とは言われたものの，そのとおりにすると，纏まらないわ人を無闇にdisるわで大変なことになります．
我ながら目に見えるょぅ…．</p>

<h2>組込みシステム業界は，誰の顔を見ている?</h2>

<p>そんなわけで，ここ数日，寝しなに，来年とか今後数年後の組込みシステム業界を空想してみたりしていました．</p>

<p>そのとき，ふと思ったのです．</p>

<p><em>もしかして，日本の組込みシステム業界って，組込みシステム業界のことしか考えていないんじゃないの?</em></p>

<!-- more -->


<h2>オピニオンリーダーたちの発言から</h2>

<p>組込みシステムに限らず，業界には，オピニオンリーダーという方々がいます．
彼らの意見は，必ずしも業界の代弁人ではありませんが，概ね業界の方向性を決めます．
生臭い話ですが，政策，つまり税金の使い道も左右します．</p>

<p>曰く，</p>

<ul>
<li>「将来数十万人規模で組込み技術者が不足する」</li>
<li>「車載ソフトを海外製に牛耳られたら日本は終わりだ」</li>
<li>「TRONはUIを捨てて制御に走るべきだ」</li>
<li>「品質の確保は仕様記述の厳密さから云々」</li>
</ul>


<p>あんまり具体的な発言を引用すると，特定の誰かに喧嘩を売っているように思われかねず，それは本意ではないので自重します．</p>

<p>…など弱腰になりつつ，改めて，日本のオピニオンリーダーたちの言葉をググって見ると，一つの傾向が見られる気がしてきます．
<em>みんな，業界の中の話ばかりしているんじゃないの?</em>，と．</p>

<h2>組込みシステムは最終顧客に理解されているか</h2>

<p>組込みシステムは工業用機械から家電製品までカバーするので，最終顧客を絞りづらいのですが，ここではとりあえず日用品に絞ります．
すると，最終顧客は消費者となります．
出荷台数という観点では最大顧客層ですから，悪い絞り込みでは無いでしょう．</p>

<p>さて，例えば，近所のスーパーマーケットに行ってみるとします．
レジのおばさんに，「将来数十万人規模で組込み技術者が不足する」ことの意見を聞いて，どういう反応が返ってくるでしょうか．
おばさんが叩いているレジは，組込みシステムです．</p>

<p>駐車場に移動して，日本車を停めて降りてきた人に「車載ソフトを海外製に牛耳られたら日本は終わりだ」って話たら，どうでしょうか．</p>

<p>たぶん，返事は，要領を得ないでしょう．
&ldquo;風が吹けば桶屋が&#8221;の喩えで，問題点を理解してもらうことは，不可能ではないかもしれません．
しかし，(おそらく)一発では反応を得られないでしょう．
最終顧客には直接の興味のない話を，日本の組込みシステムのオピニオンリーダーは，しています．</p>

<h2>外の人に向けたメッセージ</h2>

<p>日本の組込みシステム開発の関係者からは，「そりゃそうだ，それらは，中の人が中の人向けに出したメッセージだ」って意見が返ってくるのは想像がつきます．
一応，私も中の人の端くれですので．</p>

<p>そういう意見への更なる問いは，次のようなものです．
「中の人が外の人に向けたメッセージって，ありますか?」</p>

<p>組込みシステムが世の中をどう変えていくのか，最終顧客に向かって，右脳に語りかけるメッセージ，日本では久しく聞いていないように思います．</p>

<p>私が思いつく最近の例は，坂村健氏が中心となって発せられたトロンです．
それでさえ，25年以上前になります．</p>

<p>世界的に，そういうメッセージを発することが廃れたかというと，そんなことはないでしょう．
ユビキタス，IoT，タンジブル，…．
バズワードという一部の陰口はあるものの，トロン以降の25年の間に，最終顧客の目前に提示される(それが概念であっても)メッセージはありました．海外では．</p>

<h2>真摯ゆえの内向き</h2>

<p>組込みシステム業界の場合，オピニオンリーダーの多くは，学者だったり専門性の高いエンジニアだったりします．
ですので，自分の研究領域の中でベストを尽くすという態度は真摯でありこそすれ，disられるべきものではありません．</p>

<p>前出の坂村健氏も学者ではあります．
が，80年代の彼は，メッセージ性言う点で異能でした．</p>

<p>しかし，専門家が専門に対して内向きであることが業界全体を覆ってしまったとすると，個々人の問題ではなくなってきます．</p>

<h2>じゃあどうすんのよ</h2>

<p>内向きに対しての&#8221;幸せ&#8221;のことしか話をしなくなったエコシステムで，長い目で見て残った例を，私は知りません．</p>

<p>かといって，「で，どうすりゃいいのよ?」って問いがあっても，私には，すぐに出せる案がありません．
案を秘してはいますが，2013年時点では実現可能性が低いので出しません．</p>

<p>「問題提起しておいてそれかよ」って言われても，仕方ありません．
そもそも私の問題意識は的外れで，日本の組込みシステム業界は未来永劫の繁栄を続けるのかもしれませんし．</p>

<h2>そんなわけで</h2>

<p>インタビューでは，この点について，場末の組込みエンジニアがどのように向かい合えるか，といった辺りは話そうかなと思ったりしています．
まあ，話したことが全部は載らない(ヘタすると全ボツ)ってのがインタビュー記事の醍醐味です．
どうなるか，わかりませんけれどね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロライターが教える｜学生のライティングにたった一つ足りない「読み手にとっての価値を考え*ない*」視点の補い方]]></title>
    <link href="http://www.monaka.org/blog/2013/12/12/how-to-write/"/>
    <updated>2013-12-12T22:47:25+09:00</updated>
    <id>http://www.monaka.org/blog/2013/12/12/how-to-write</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>ググって来た方には，ワタクシが何者なのか判らないでしょうから．
ええと，紙媒体の商業誌に，独自の視点で解説を加えた雑文を寄稿したりしています．
さほど社会的影響力があるとは思えない，狭い分野ではあるのですけれども．</p>

<p>商業誌っていってもピンキリですから…．
主戦場は，概ね数万部の下の方くらい，
ちょっと気の利いた本屋なら，地方都市でも，工学系の雑誌棚にはありそうな媒体です．</p>

<p>一応，持ち込み記事よりも，巻頭特集やら連載やらの依頼のほうが多いです．
記憶にあるかぎり，少なくとも3社の依頼に応えたことがあります．
兼業とはいえ，プロの端くれではあるのでしょう．</p>

<!-- more -->


<h2>導入</h2>

<p>どんな職業に就こうとも，世の中，文章で人に説明することからは逃げきれません．</p>

<p>ワタクシの至近のネタで恐縮ですが，ワタクシの家内は，文章執筆から遠い生き方をしていました．
しかし，子供を授かって幼稚園に入れようとしたら，志望動機を完結に書けと願書にあって卒倒していました．
子供が小学校に入ったら，PTAで広報委員に割り当てられて広報紙を作る羽目になって，もんどり打っていました．</p>

<p>無論，子供を作らなければ，こういうことからは逃げられます．
まあでも，どんな生き方をしたとしても，似たようなものでしょう．</p>

<p>どんな職業に就こうとも，世の中，文章で人に説明することからは逃げきれません．</p>

<p>ゆえに，学校では，特に，総仕上げとなる大学/大学院では，物書きのテクニックをいろいろ指導されます．
されるはずです．
たぶん．
指導教官の熱意に依存するとはいえ．</p>

<h2>問題</h2>

<p>物書きから，現代のオトナは逃げ切れない．
ならば，会得するしかないのですが．</p>

<p>そこを納得すると，次なる疑問や課題が湧いてきます．たぶん．
学生(もしくは，プロにならなかった人)と，曲がりなりにもプロになってしまった人との違いって，何なのだろう．
物書きのプロの，特異的な部分って何なのだろう．
プロでない人が，プロになるためには何をすればよいのだろう．</p>

<p>ここは，意見が分かれます．
一つの見解は，「足りない部分はクリスプに抽出可能で，メソッドを定義して，繰り返し練習すれば不足を補える」です．
例えば，このエントリが典型かと思います．&#8221;<a href="http://yorikanekeiichi.com/imagine-the-value-to-the-reader-5438.html">プロライターが教える｜学生のライティングにたった一つ足りない「読み手にとっての価値を考える」視点の補い方</a>&#8221;</p>

<p>ワタクシは，この種の見解を全否定する立場は取りません．</p>

<blockquote><p>アマチュアと職業ライターの違いは「切り口」のみ</p></blockquote>

<p>というのはまさにそのとおりだと思います．</p>

<blockquote><p>読み手にとって価値がなければ、誰も読んでくれません。</p></blockquote>

<p>というのも，全くその通りです．</p>

<p>ですが，自分が語りたいものが&#8221;読み手にとって価値があるもの&#8221;かどうかを知るのは，実はとてもムズカシイものです．
読み手が，どう考えても学内，極端な場合，指導教官で済むような文章であれば，この設定は簡単です．
先ほどのワタクシ事を引いてくるならば，願書の志望動機は，幼稚園の先生しか読みません．
これも簡単です．
読み手と書き手(である自分)は，コンテキストを共有しています．</p>

<p>しかし，ライティングの本当の怖さ，難しさは，&#8221;共有の不在&#8221;だったりします．
自分とコンテキストを共有していない不特定多数に対して，どのように自分の知識を届けるか．
そこには，「どう判ってもらうか」「何を書くべきか」「読み手にとっての価値はなにか」といったような判断材料が，少なくとも乏しいか，もしくは全く存在しません．</p>

<p>徒弟制度の範囲で済むようなライティングであれば，「足りない部分をクリスプに抽出し，メソッドを定義し，繰り返し練習」で，おそらく済みます．
しかし，それは学会，勉強会などタコツボのなかの能力であって，プロが備えるライティング能力とは一致しません．サブセットです．</p>

<h2>提案</h2>

<p>このようなコンテキストの非共有は，対象読者の別を問わず起こります．
専門分野を問わない一般新聞紙上などでは，常に起こります．
しかし，専門分野を対象としたライティングでも，しばしば起こります．
内容が斬新で分野横断であればあるほど，興味を持つ人が増える反面，コンテキストを共有できる人が減るからです．</p>

<p>本当に悩ましい問題ですが，このような問題に，古来から常にさらされている分野があります．
それは，芸術の分野です．</p>

<p>ワタクシは，芸術分野の才覚はないので，専門家のブログから，本エントリの文脈で使えそうなものを引用します．</p>

<p><a href="http://d.hatena.ne.jp/ohnosakiko/20130227/p1">自意識のセーフティネットセーフティネットを破って</a></p>

<p>多くの場合，芸術系の表現ほどは，自意識が現出することはないかもしれないとは思います．
しかしながら，すべからくの表現は，それがどれだけ事実の描写に務めたものであったとしても，つまるところ，自意識の現出です．</p>

<blockquote><p>Midas 　絵画とは「この私には世界はどう見えているか」を他人に知らせ共有するもの。そもそも「こんな私を見て！」の人が上手くなるわけがない(才能以前の問題)。 2013/02/25</p></blockquote>

<p>まあつまりは，そういうことなのです．
絵画だけではありません．
読み手は，&#8221;あなた&#8221;に興味はありません．
&ldquo;あなた&#8221;が描いた世界に興味を持てるか否かには，かろうじて興味を持ってくれます．</p>

<p>何かを学んでいる，理解しようとしている．
そんな段階のときには，&#8221;私&#8221;の努力を伝えたくなります．&#8221;私を見て&#8221;と．</p>

<p>共有できるコンテキストが少ない時にも，自分が述べたいことではなく，自分自身を担保にしたくなるものです．
(最近でも，国と国との外交交渉の場面で&#8221;trust me&#8221; と言った首相がいたような気がします．)</p>

<p>そんな気分のときでも，「どう判ってもらうか」「何を書くべきか」「読み手にとっての価値はなにか」は考えつきます．
でも，読み手には，この歪が伝わります．
読み手も，当該分野の知識が足りないかもしれませんが，地頭としてバカではありません．</p>

<p>メソドロジーの立場を取るブログエントリを全否定するつもりはありませんが，しかし，プロとアマチュア(典型は学生)との差は，テクニックではありません．</p>

<p>文章として表現する分野について，追求することの快楽と苦痛に苛まれつつも，足元をひたすら掘り起こす覚悟と，その結果が，差として現れます．</p>

<p>なので，一枚ペラの紙を埋めるだけでなんとかなる話では，おそらく，ありません．</p>

<h2>締</h2>

<p>このエントリは師走に入ってから書いています．
そろそろ，日本の大学では，卒論，修論が追い込みの季節だろうと思います．
それに合わせて，テクニック系の記事がオンラインにつけオフラインにつけ，増えるだろうと思います．</p>

<p>ワタクシも，メソドロジーは割と好きです．
これをやるだけでプロに成れるのか，なんて思うと，夢が広がります．</p>

<p>ですが，少なくとも専門分野向けの文章表現についていうならば，諦めたほうがよいと思います．</p>

<p>プロとそれ以外の決定的な差は，「頑張っている私を見て」と「この私には世界はどう見えているか」との視点の違いです．</p>

<p>無論，読者への配慮も必要です．
が，それは読者に対して決定的に響いてくるものではありません．</p>

<blockquote><p>そしてジャンルを問わず表現は結果的に、「この私には世界はどう見えているか」を示し他人に共有を促すものに反転するのだと思います。</p></blockquote>

<p>もし読者が学生さんであるならば，この相反転を意識しながら，指導教官の論文を読むと得られるものが多いはずです．
それが，プロの文章に必要なものです．</p>

<p>プロが行う「この私には世界はどう見えているか」を述べるには，「自分自身の足下をひたすら掘り起こしていくしかない」のです．
地道に．
たぶん指導教官がなさっているように．</p>

<h2>蛇足</h2>

<p>師走になってから，卒論・修論で死んでいる学生さんたちに，いまさら言っても，たぶん直近の締切には間に合わないでしょうけれども．</p>

<p>…まあ，ほら，「どんな職業に就こうとも，世の中，文章で人に説明することからは逃げきれません．」ので，いつか役に立ちますよ…．たぶんね．きっとね．おそらくね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTunes のアルバムアートワークを抽出する]]></title>
    <link href="http://www.monaka.org/blog/2013/11/26/extracts-itune-artwork/"/>
    <updated>2013-11-26T07:43:19+09:00</updated>
    <id>http://www.monaka.org/blog/2013/11/26/extracts-itune-artwork</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>さまざまな理由で，iTunes のアルバムアートワークを画像として抽出したいときがあるでしょう．
たとえば，ざっとサムネイルとして眺めてみたいとか．</p>

<p>抽出した画像の2次利用や公衆配信は，明白に知財侵害なのでダメ絶対，です．
細かいことをいうと，個人利用の範囲でも厳密には，マズいような気もします．
本エントリは，技術的にはできますよね，的なお話．
…ということで，ひとつよしなに．</p>

<!-- more -->


<p>iTunesのアルバムアートワークは，iTunesフォルダを <code>{itune_folder}</code>とすると<code>{itnue_folder}/Album Artwork/</code>配下の拡張子itcファイルに収められています．
特に手を加えていなければ，<code>~/Music/iTuness/Album Artwork/</code>にあるはずです．
ただし，itc ファイルには，様々なメタデータが画像の前についています．
画像として扱うには，このメタデータを外す必要があります．</p>

<h2>スクリプト</h2>

<p>サクッと答えだけ書きます．
OSX を使っている前提に立っています．Windowsの方はCygwinなり何なりを入れてください．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!env bash
</span><span class='line'>for i in $(find ~/Music/iTuness/Album\ Artwork/ -name '*.itc'); do
</span><span class='line'>  dd if=$i of=$(basename $i .itc).png bs=1 skip=492
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<h3>注意事項</h3>

<p>dd でアタマを落とすだけ．492 バイトは，環境(iTunesのバージョンなど?)によって違う可能性がありそうです．
<a href="https://www.google.co.jp/search?q=itune+itc+500%E3%83%90%E3%82%A4%E3%83%88">ググると，この数値は500バイトであると主張している人が少なからず居る</a>ようですので．</p>

<p>お手元環境で何バイトを削ればよいかは，目視でお判りになるでしょう．
上記のスクリプトを理解できる人の手元には，愛用のバイナリエディタもおありでしょうから，</p>

<p>あと，上記のスクリプトでは，拡張子を png に決め打っていますが，実際には，画像は，PNG と JPEG の2種類があります．
言うまでもありませんが，これは file コマンドを使って容易に識別できます．
こんなふうに．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ file *.png
</span><span class='line'>4931EBE6BCC87C34-07FBFB2CA12DDA5D.png:   JPEG image data, JFIF standard 1.01, comment: "AppleMark"
</span><span class='line'>4931EBE6BCC87C34-08F02BE333CFBBAA.png:   PNG image, 128 x 128, 8-bit/color RGBA, non-interlaced
</span><span class='line'>4931EBE6BCC87C34-0A2AC7440B8F25B6.png:   JPEG image data, JFIF standard 1.01</span></code></pre></td></tr></table></div></figure>


<p>あとは，上手いことやってください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安全の礎たるもの]]></title>
    <link href="http://www.monaka.org/blog/2013/11/16/safety-stands-on/"/>
    <updated>2013-11-16T16:26:00+09:00</updated>
    <id>http://www.monaka.org/blog/2013/11/16/safety-stands-on</id>
    <content type="html"><![CDATA[<p>もう一週間ほど前になりますが，EE Timesという組込み業界系メディアにとある記事が掲載されました．</p>

<ul>
<li>&ldquo;<a href="http://eetimes.jp/ee/articles/1311/11/news072.html]">トヨタの急加速事故は欠陥だらけのファームウェアが原因？――原告側調査の詳細</a>&rdquo;</li>
</ul>


<blockquote><p>2007年に米国オクラホマ州で、トヨタ自動車の乗用車「カムリ」が急加速したことによる死亡事故が発生した。事故をめぐる訴訟において、原告側証人として事故原因の調査を行った組み込みソフトウェアの専門家は、裁判で「カムリのエンジン制御モジュール（ECM）のファームウェアに重大な欠陥が見つかった」と報告した。</p></blockquote>

<p>だそうです．
通常，組込み業界系メディアが一般の…プログラマ界隈でさえ…取り上げられることは滅多にないのですが，Twitter の TL を軸にして眺めていたところ，割と広く拡散したように見えます．
トヨタという知名度，クルマという日常生活に深く関わるものに関すること，加えて，コード品質からの切り口は，組込み業界以外のプログラマでも話題にしやすかったということがあったのだろうと思います．</p>

<!-- more -->


<p>ワタクシは，経歴がどうであれ，傍流で眺めているだけのクズエンジニアですから．
昼のラーメン屋で，タブロイド紙を面白可笑しくネタにするダメリーマンと同じく，適当なことを Twitter に放流していました．(あ，でも軽口はあっても嘘は入れていないつもりです)．
調査をしたというMichael Barr氏の素性もよくわからないですし，報道の段階で誤解曲解があることは十分に想定の範囲ですし，ね．</p>

<p>まあ，「&#8221;安全&#8221;とは何か!」みたいな哲学的な事柄を科学的に突き詰める方々については，お顔も思い浮かびますし，まあ怒って長文を投げる方もいらっしゃるだろうなぁ，くらいには思っていましたけれども．</p>

<p>で，やはりというか，blogエントリが上がりました．</p>

<ul>
<li>&ldquo;<a href="http://embeddedsoftwaremanufactory.blogspot.jp/2013/11/blog-post.html">安全を売りにするな！安全を食いものにするな！</a>&rdquo;</li>
</ul>


<p>の，後半です．非公式な情報では全文のご執筆は4時間にもわたるものだそうで，読み応えがあります．
ワタクシのアホtweetは，全くもってカスに見えます．
ワタクシのtweetは不随意反射，タイピング時間を除くと 1[sec/tweet]もかかってないでしょうから，比べたら失礼の極みですが．</p>

<p>ソフトウェアの安全，という話題を日本でするに当たり，言及がないことが考えられないくらい著名なエンジニアであり研究者である酒井氏の発言です．
安全に関するご指摘に誤りがあろうはずもありません．
特に，下記のご指摘は，とても重要と思います．</p>

<blockquote><p>ソフトウェア品質とシステムの安全をごっちゃにしている。</p></blockquote>

<p>件の元記事への批判としては，これで十分と思えます．
にも関わらず，なんであんな冗長な文章を書く必要があったのかワタクシには判りませんが…安全とは，言葉を尽くさないと語れないものなのであります．たぶん．</p>

<p>ま，そんなわけで，オーソリティにアホが何言っても詮ないのですが，底辺プログラマとして，気になることが，一つだけ．</p>

<blockquote><blockquote><p>み込み機器向けのコンサルティングを手掛けるBarr GroupのCTO（最高技術責任者）であり、共同創設者でもあるMichael Barr氏＊）は2013年10月、EDNの問い合わせに対し、今回の調査結果を明らかにした。Barr氏は同僚とともに、裁判の原告側の専門家証人として徹底的な調査を実施した結果を明らかにした。<div style="color:red">これは、セーフティクリティカルシステム開発に携わる全ての人々に対する教訓となるだろう。</div>自動車業界や医療機器業界、航空宇宙業界などのいずれの分野においても、欠陥が生じることは決して許されない。</p></blockquote>

<p>冗談だろう。教訓にもなにもならない。</p></blockquote>

<p>ふーむ．教訓にもなにもならない，ですか…．</p>

<p>Barr氏の言っていることのうち，コード品質に関する部分が本当であるならば，という仮定付きで，かつ，Barr氏の意図と必ずしも合致していないかもしれない，という前提付きでもありますが．
ワタクシは，これ，安全だの信頼だの言っている人たちへの教訓に十分なると思ったりします．
端的にいうと，こんな感じです．</p>

<p><strong>全体最適だの機能安全だの崇高なことをいっている間に，根となるべきプログラマの品質確保に失敗しているってことではないですかね?  底辺プログラマでも天を仰ぐような品質問題がボコボコ指摘されるってことは．</strong></p>

<p>「ソフトウェア品質とシステムの安全をごっちゃにしている。」のはワタクシも思うのですが， <strong>品質の悪いソフトはシステムの安全を脅かす</strong> ということは経験知としてさほどおかしな話でもなさげです．
てか，品質が悪いソフトを内蔵しつつ安全なシステムで，顧客の満足も得られた例って，あるんですかね? 言葉遊びの上では在り得ることは解りますが．</p>

<p>品質が良ければ安全とは限らないなんてのは，底辺プログラマのワタクシでも判ります．
が，品質が悪く安全を担保できるのかって指摘に対して，安全とは，って解くの，専門家すぎて，よくわかんな〜いです．</p>

<p><strong>スリカエじゃ無いですか? それって．（・＿・）</strong></p>

<p>………なんてな．(CV:いかりや長介)</p>

<p>twitter でのワタクシのゲス発言を基に，少し加筆してみました．ゲス発言に何を加筆しても，ゲス発言ですな．お目汚し，すんません． (_ _)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[repo sync でストレージを節約するための group 機能の使い方]]></title>
    <link href="http://www.monaka.org/blog/2013/11/04/group-in-repo/"/>
    <updated>2013-11-04T09:28:00+09:00</updated>
    <id>http://www.monaka.org/blog/2013/11/04/group-in-repo</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>最近の AOSP は，対応するビルドホストもターゲットも増えたため，prebuilt バイナリの量が膨大になってきました．これが sync の時間を伸ばし，ビルドマシンのストレージを圧迫しています．</p>

<p>しかし，対応しないビルドホストやターゲットの prebuilt バイナリは，不要なわけです．
一部の Android 系プロジェクト (Android-x86 とか) では， manifest.xml を編集して，不要なプロジェクトを削除しています．
しかし，ターゲットはさておき，ビルドホストは複数あったほうが開発者を増やすためには望ましいと言えます．
また，AOSP の新しいリリースごとに manifest.xml の再編集を行うのは骨の折れる作業です．</p>

<p>このような状況を解消するために，repo には group という機能があります．
日本語のみならず，英語圏でも纏まって解説されている例は，ざっとググった限りでは無いようです．</p>

<!-- more -->


<h2>manifest.xml</h2>

<p>manifest.xml は，repo が引っ張ってくるプロジェクトの内容が記述されています．
init の時に指定して，実体は {repo_root}/.repo/manifest.xml にあります．
(細かいことを言うと，このファイルはシンボリックリンクですが，割愛します)</p>

<p>manifest.xml のプロジェクトには，こんな感じで groups という属性を付けられます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;project groups="pdk,darwin,mips" name="platform/prebuilts/gcc/darwin-x86/mips/mipsel-linux-android-4.8" path="prebuilts/gcc/darwin-x86/mips/mipsel-linux-android-4.8"/&gt;
</span><span class='line'>  &lt;project groups="pdk,darwin,x86" name="platform/prebuilts/gcc/darwin-x86/x86/i686-linux-android-4.6" path="prebuilts/gcc/darwin-x86/x86/i686-linux-android-4.6"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>この例は AOSP の manifest.xml から引用してきました．以降でも，この manifest.xml のコード片を引用します．</p>

<h2>repo init の -g オプション</h2>

<p>repo init には，あまり知られていないようですが，-g というオプションがあります．
これは隠しオプションではありません． repo help init すると，解説がでてきます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-g GROUP, --groups=GROUP
</span><span class='line'>                    restrict manifest projects to ones with specified
</span><span class='line'>                    group(s) [default|all|G1,G2,G3|G4,-G5,-G6]</span></code></pre></td></tr></table></div></figure>


<p>このオプションの使い方が，本稿の核心です．</p>

<p>使い方は，判ってしまえば簡単です．-g には，引っ張ってきたいグループをカンマ区切りで指定します．
ただし， <strong>引っ張ってきたくないグループには &ndash; を接頭します</strong>．</p>

<p>たとえば，私が Android-x86 の開発者であり，mips ターゲットの開発をする可能性が限りなく 0 だったとしましょう．
その場合には，repo init を実行する際のグループ指定時に，mipsターゲットを無視する -mips を付加します．具体的には，<code>-g 'default,-mips'</code> とします．これだけです．
このようなオプションで初期化された repo リポジトリでは，無効にされたプロジェクトは sync を行っても無視されるようになります．
プロジェクト名を明示した sync を行おうとすると，下記のように例外が発生します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ repo sync platform/prebuilts/gcc/darwin-x86/mips/mipsel-linux-android-4.8
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/main.py", line 418, in &lt;module&gt;
</span><span class='line'>    _Main(sys.argv[1:])
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/main.py", line 394, in _Main
</span><span class='line'>    result = repo._Run(argv) or 0
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/main.py", line 142, in _Run
</span><span class='line'>    result = cmd.Execute(copts, cargs)
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/subcmds/sync.py", line 606, in Execute
</span><span class='line'>    submodules_ok=opt.fetch_submodules)
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/command.py", line 180, in GetProjects
</span><span class='line'>    raise InvalidProjectGroupsError(arg)
</span><span class='line'>error.InvalidProjectGroupsError</span></code></pre></td></tr></table></div></figure>


<p>AOSP のリポジトリは，いくつかの特殊な状況を除き，ビルドホストもターゲットも単一アーキテクチャでしょう．そんなときは，init 時のグループ指定をさらに厳密にできます．
例えば，Ubuntu Linux上で Android-x86 系のビルドをする際に，私が使っているグループ指定は， <code>default,-arm,-mips,-darwin</code> です．</p>

<h2>応用</h2>

<p>group 指定には，特殊なグループ all, default, notdefault などあります．
これらを詳説すると，紙幅がいくらあっても足りませんので，本稿では割愛します．
repo の実体は Python スクリプトなのでご自身で調べられるでしょうし，私自身も完全に理解できているわけではありませんので．</p>

<p>特殊なグループを除き，group には，お互いに衝突しない自由な名前を付けられます．
Android 系以外のプロジェクトでも repo を使っているプロジェクトはあるようですが，そのようなプロジェクトでも group を活用することで，柔軟なプロジェクト運営が可能になるかもしれません．</p>

<h2>注意事項</h2>

<p>既に存在しているリポジトリに対して repo init を行う場合に -g オプションを指定すると，そのあとの sync から group 指定が有効になります．
ただし，あとから無効にした場合，sync で pull はされてこなくなり，作業スペースからは削除されますが，ストレージ上には git リポジトリのクローンが残骸として残ります．.repo/ 内のリポジトリを削除することでストレージの節約になりますが，バッドノウハウすぎるので，本稿では割愛します．変なことをしないで rm -fr .repo してから init し直すほうが無難です．</p>

<h2>追伸</h2>

<p>どなたか，repo の詳細を纏めて頂けないでしょうか．有償だとしても読みたいです． <em>知らない言語のコード読むの，疲れるのよ…</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[柔軟仕上げ剤の過剰使用の原因は，もしかして]]></title>
    <link href="http://www.monaka.org/blog/2013/10/06/fragrance-hell/"/>
    <updated>2013-10-06T13:00:00+09:00</updated>
    <id>http://www.monaka.org/blog/2013/10/06/fragrance-hell</id>
    <content type="html"><![CDATA[<p>もう半年前くらいになるが，柔軟仕上げ剤のにおいについて相談が増えているという発表を<a href="http://www.kokusen.go.jp/news/data/n-20130919_1.html">国民生活センターが行い</a>，<a href="https://www.google.co.jp/search?q=%E6%B6%88%E8%B2%BB%E8%80%85%E3%82%BB%E3%83%B3%E3%82%BF%E3%83%BC%E3%80%80%E6%9F%94%E8%BB%9F%E5%89%A4">各メディアも報じた</a>．</p>

<p><a href="http://www.nhk.or.jp/ohayou/marugoto/2013/09/0920.html">NHKの報道</a>に拠ると…</p>

<blockquote><p>業界団体の調査によりますと、柔軟剤の利用者の４人に１人までが、定められた量の２倍以上を使っているという結果も出ています。</p></blockquote>

<p>2倍以上!? バカじゃねーの??? 嗅覚麻痺してんの??? という気がする．
特に理系は用量について敏感なので…そうでないと実験中に死にかねないので…驚きと嘲笑でこのニュースを見ていた人が多かったのではないだろうか．</p>

<p>でもある日，洗濯機を回そうとしていて，ふと，<strong>きちんとキャップで測っているからこそ，こういうことになってんじゃないの?</strong> という気がしてきた．</p>

<!-- more -->


<p>大抵の全自動洗濯機は，水量をリットルで指定できる．
または，自動で必要な水量を検出して，その量を表示できる．
洗濯したい人は，その量に応じて，洗剤なり柔軟剤なりを投入する．</p>

<p>最近は，溶けやすい液体洗剤が全盛だ．
我が家の洗剤のキャップは，こんな感じ．</p>

<p><img src="http://www.monaka.org//blog/2013/10/06/2013-10-06%2010.44.43.jpg" alt="我が家の液体洗剤のキャップ" /></p>

<p>洗濯槽に入っている水量に合わせた目盛りになっている．
きちんと量れば，間違いようがない．</p>

<p>一方，柔軟仕上げ剤のキャップは，こんな感じ．</p>

<p><img src="http://www.monaka.org//blog/2013/10/06/2013-10-06%2010.44.16.jpg" alt="我が家の柔軟仕上げ剤のキャップ" /></p>

<p>これまた見づらいけれども，20という数字がお判り頂けるだろうか．
「洗濯機の水量が20リットルの時にこの線だな」と思ってもおかしくないが，それは誤り．このキャップの目盛り単位は，柔軟仕上げ剤の量(ミリリットル)になっている．</p>

<p>パッケージを読むと，わかる．</p>

<p><img src="http://www.monaka.org//blog/2013/10/06/2013-10-06%2010.45.45.jpg" alt="我が家の柔軟仕上げ剤のパッケージ" /></p>

<p>20ミリリットルの使用量の場合，対応する洗濯槽の水量は45リットルとなる．
つまり，水量に対して2倍以上の使用量だ．</p>

<blockquote><p>定められた量の２倍以上を使っているという結果も出ています。</p></blockquote>

<p>パッケージを良く読まず，液体洗剤と同じと思ったとしたならば，2倍以上の使用量になるだろう．</p>

<p>おそらく，こんな理由ではないだろうか．</p>

<p>個人的雑感としては，柔軟仕上げ剤の目盛りはユーザビリティが低いので変更すべきだろうと思う．高齢化社会に突入する今，こんな細かい字が読めない人も増えるだろう．</p>

<p>なお，我が家は，以前から定められた量で洗濯をしている．念のため．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[狂ったように作るもの]]></title>
    <link href="http://www.monaka.org/blog/2013/10/01/what-is-next/"/>
    <updated>2013-10-01T13:49:00+09:00</updated>
    <id>http://www.monaka.org/blog/2013/10/01/what-is-next</id>
    <content type="html"><![CDATA[<p>社名としてのASCIIが消えたとのこと．遠藤諭氏が寄稿した記事を，読んだ．
( <a href="http://weekly.ascii.jp/elem/000/000/175/175062/">「さらばアスキー」社名と小惑星 ～ASCIIはホビーのブランドではない</a> )</p>

<p>私自身は，ベーマガ→Oh!MZ と進んで，月刊ASCIIはたまに立ち読みしたり図書館で読んだりという程度の記憶しかない．</p>

<p>けれど，MinixへのパッチキットでOSS的活動への名乗りを上げ，初台へ遊びにいったこともあったりするし，256倍やらマーフィーの法則やらハッカーズ大辞典やら，今もネタ元にしている書籍がたくさんある．
PostScriptやUnixの知識も，ASCII無しには得られなかっただろう．
TeXで日本語が使えるようになったのもASCII(だけではないけれど)のおかげだ．
残念というか，寂しいというか，時代の流れを感じるというか，そういう類の何かはある．</p>

<p>とはいえ，関係者ではない薄情な私の興味は，消えゆくものよりも，&#8221;この先生きのこるには&#8221;ということ．</p>

<!-- more -->


<blockquote><p>しかし、いまはそういう膨張期ではない。むしろ、マイコン初期のような誰も手札がないような時代である。“前のめり”なところからしか、新しいものは生まれないし、そうでないと何もかも海の向こうのクラウドに飲み込まれてしまう。その別れ目に、いまの我々はいる。あまりそうは指摘されていないし、学校でも教えていないと思うが、いまの日本は1980年頃以降、狂ったようにマイコンチップに突っ走ったことで成立したものだ。</p></blockquote>

<p>遠藤氏の言うとおりだと思う．
そして，今や，国内のマイコンチップは風前のともし火のように見える．
各社が非なるようでいて似通ったアーキテクチャのマイコンチップを乱発するような状況が，再び興る可能性はほぼゼロだろう．
私はペシミストなので，私が思うよりもずっと底力があるのかもしれないが，</p>

<p>また，前のめりであるべきデジタル世界で，時計を戻して何かが良くなるような気もしない．</p>

<p>今日，または明日，狂ったように突っ走るだけの価値があるものとは，何だろうか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restricted Words]]></title>
    <link href="http://www.monaka.org/blog/2013/09/19/restricted-words/"/>
    <updated>2013-09-19T13:57:00+09:00</updated>
    <id>http://www.monaka.org/blog/2013/09/19/restricted-words</id>
    <content type="html"><![CDATA[<p><a href="https://codeiq.jp/ace/cielavenir/q431">なんとなく気が向いた，というか，この手のプログラミングパズルにしては対応言語が多く，C言語もOKというのは珍しいな</a>，ということで解いてみた．</p>

<h1>お題</h1>

<p>引用する．</p>

<blockquote><p>標準出力に
Hello World
と出力するプログラムを作成して下さい。</p>

<p>ただし、数値、文字及び文字列リテラルを解答に含めることはできません。
Perlのqqやqw、Rubyの%Q、%q、%wなども避けたほうが評価が高くなります。
言語仕様をフル活用して下さい！</p></blockquote>

<h1>解法の定石</h1>

<p>定石は，数値を得て，その文字コードに変換する．
ASCIIコードでなくEBCDICな処理系だったらどうするの? みたいなツッコミは，とりあえず採点環境が OSX だということで無視できる．</p>

<p>この方針だと，1 をどのようにして得るかというのが鍵になる．
出題者の意図は，この定石通りだった．
回答者に送られた解説も引用可とのことなので，出題者の解説から引用する．</p>

<!-- more -->


<blockquote><p>・C/C++
初期化式を持たないグローバル変数はbssセクションに置かれます。main()が実行されるより前に0で初期化されるので、その変数をインクリメントすれば1になります。
また、xorにより0を作り出し、それをインクリメントしても1になります。
もしくは、少なくともx86/x64のgcc/clang上では、sizeof(char)は1です。</p></blockquote>

<h1>もなもな的解法</h1>

<p>定石通りに解くのは面白く無い．
他の言語でなく GCC を選ぶからには，GCC なりの解き方で行かねば．
なので，このように解いた．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * Environment: gcc version 4.2.1 (Apple Inc. build 5666) (dot 3)
</span><span class='line'> */
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>Hello(void)
</span><span class='line'>{
</span><span class='line'>  fputs(__func__, stdout);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>konokansuu_wa_space_wo_hyouji__(void)
</span><span class='line'>{
</span><span class='line'>  printf("%c", (int)sizeof(__func__));
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>World(void)
</span><span class='line'>{
</span><span class='line'>  puts(__func__);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  Hello();
</span><span class='line'>  konokansuu_wa_space_wo_hyouji__();
</span><span class='line'>  World();    
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p><code>__func__</code> は GCC拡張のビルトインマクロ．
最終的には関数名の文字列リテラルに展開される．
しかし，cpp を通した時点ではC言語仕様の数値，文字には展開されない．セーフ．</p>

<p>スペース文字を関数名に含めることは(当然)できないので，一工夫．
関数名を31文字にして，<code>__func__</code> の sizeof を取った．ナル文字含めて32．
これを文字として表示すればスペース文字になる．</p>

<blockquote><p>言語仕様をフル活用して下さい！</p></blockquote>

<p>とのことで，GCC の言語仕様を活用．
LL系言語だと，シンボルを文字列に変換する機能をよく見かけるけれど，C言語でこの技法を選ぶ奴は少ない…よね．たぶん．</p>

<h1>馬脚，もしくは，見直しは大事だよ</h1>

<p>なお，出題者からのコメント．</p>

<blockquote><p>なお、putchar()を使えば&#8221;%c&#8221;は回避可能です。</p></blockquote>

<p>確かに．</p>

<p>そういや，学生だった頃も，最後の見直しをしないで提出して，必ず何点か引かれていたよなぁ…．
こういうの，何歳になっても，治らんね．</p>
]]></content>
  </entry>
  
</feed>
