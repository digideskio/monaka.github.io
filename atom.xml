<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-01-14T22:36:23+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby を使ってGmailの内容を別のアカウントのGmailへ移す方法]]></title>
    <link href="http://www.monaka.org//blog/2014/01/14/gmail-imap-sync-with-ruby/"/>
    <updated>2014-01-14T19:37:18+09:00</updated>
    <id>http://www.monaka.org//blog/2014/01/14/gmail-imap-sync-with-ruby</id>
    <content type="html"><![CDATA[<h1>まくら</h1>

<p>明日の東京は，予想最高気温4℃とか降雪とか，もう勘弁して下さいという感じのようなのですが．
数ヶ月もすれば暖かくもなりましょう．
そしてやってくるのは，別れと出会いの春でございます．</p>

<p>いまどき，IT関連でなくてもメールくらいは日用品になっておるわけでして．
所属が変わるときには，自分も，自分の所属組織も，この扱いに困ったりするわけです．
私が最初にメアドなるものを貰ってから20年以上経ちますが，この辺りは何の進歩も見られないなと，思ったりするような，しないような．
最近も，メールではありませんが，こんな tweet が流れていて，大層リツイートされておりましたし．</p>

<h1>Gmailの内容保全について考える．</h1>

<p>今や社会インフラといえるよなサービスの代表として Gmail は筆頭でしょう．
個人，学生のみならず，Google Apps for Bysiness (GAB)などで会社でも使われていることも多いですし．</p>

<p>学生が学校のアカウントとして Gmail を持っている場合は，卒業と同時にそれを失うのが一般的なはずです．
卒業後を見越していればよいのですが，新入生の頃は右も左も判らないので，つい学校の Gmail に頼っちゃった，ということは十分に有り得るでしょう．</p>

<p>会社の場合は，退職と同時に，その持ち出しを禁止されるのが一般的だろうと思います．
この場合，困るのは，会社に残った側です．
メールのやり取りは，退職者が行っていた仕事のログでもあり，保全したいと思うはずです．
が，GABのアカウントは有料でして，アカウントを消して経費節減に繋げたいという経営経理側の言い分もわかります．
その辺を上手く調整しないと…</p>

<blockquote class="twitter-tweet"><p>退職者のGoogleアカウントが削除されたため、その退職者がオーナーになっていたGoogleドライブのファイルが全て消え失せて大騒ぎしている。</p>&mdash; わいお (@KanjiruWaio) <a href="https://twitter.com/KanjiruWaio/statuses/421468843513376768">January 10, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>…こういう哀しいできごとがおこるわけです．(この例はメールではありませんが)</p>

<!-- more -->


<h1>それ，Rubyでやってみよう．</h1>

<p>いや別に Ruby でなくてもできますが…(汗．閑話休題．</p>

<p>一般的に言うと，Gmail の保全には，imapsync などの汎用ツールを使うだろうと思います．
しかし，ここでは，独自にスクリプトを書くという提案をします．</p>

<p>Ruby には，強力なIMAPライブラリがあるので，あんまり難しくはありません．
あと，Ruby 入門の日記ではありませんので，処理の詳細は説明しません．</p>

<h2>注目は X-GM-RAW</h2>

<p>注目していただきたいのは，「 <strong>#ここに注目</strong> 」の行です．
Gmail は IMAP の SEARCH に X-GM-RAW なる指定ができます．
これは，Gmail のweb画面にある検索窓に入力する書式を，そのまま指定できます．
この例では，Googleグループのandroid-x86というグループから来ているメールを抽出してコピーしています．</p>

<p>Gmail はディスク容量が大きく，検索のスピードも早いため，一般的なメールフォルダよりも多くのメールを溜め込みがちです(個人差はありますが)．
これを，imapsync などの汎用ツールを使って全コピーしようとすると，涙目になります．</p>

<h2>まとめ</h2>

<p>スクリプトの中には，いろいろ細かいネタが仕込まれているのですが，それらもサックリと省略します．
汎用ツールで開発時間を短縮するという考え方も間違いではありませんが，汎用ツールでは対応できない機能を見つけたときには，小さなスクリプトを作るのもアリですよね，と．
まとめになっていませんが，今日はこんな感じで．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env ruby
</span><span class='line'># -*- coding: utf-8 -*-
</span><span class='line'># Copyright (C) 2014 Masaki "monaka" Muranaka.
</span><span class='line'># License: MIT.
</span><span class='line'>
</span><span class='line'>require 'net/imap'
</span><span class='line'>require 'time'
</span><span class='line'>
</span><span class='line'>src_imap = Net::IMAP.new('imap.gmail.com', 993, true)
</span><span class='line'>dst_imap = Net::IMAP.new('imap.gmail.com', 993, true)
</span><span class='line'>
</span><span class='line'>def parseHeader(msg)
</span><span class='line'>  msg =~/\A(.*?)\r\n\r\n(.*)\Z/m
</span><span class='line'>  head,body=$1,$2
</span><span class='line'>  head=head.split(/\r\n/).map{|i|i[0]+i}.join("\r\n")[1..-1].split(/\r\n[^\s]/).map{|i|i.split(/\r\n\s\s/).join("")}
</span><span class='line'>  Hash[*head.map{|i|i=~/^(.*?):\s(.*)$/;[$1,$2]}.flatten]
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>###################################################################
</span><span class='line'># ここは設定
</span><span class='line'>searchParams = [
</span><span class='line'>                ['FROM', 'tomono@example.com'],
</span><span class='line'>                ['X-GM-RAW', 'list:(&lt;android-x86.googlegroups.com&gt;)'],      #ここに注目
</span><span class='line'>                ['X-GM-RAW', 'list:(&lt;receipt.movsign.info&gt;)']
</span><span class='line'>               ]
</span><span class='line'>
</span><span class='line'>src_imap.login('monaka@somewhere-using-gmail.co.jp', 'password')            #コピー元
</span><span class='line'>dst_imap.login('another-monaka-or-something@gmail.com', 'another-password') #コピー先
</span><span class='line'>
</span><span class='line'>#この辺もお好みで．
</span><span class='line'>src_imap.select('INBOX')
</span><span class='line'>dst_imap.select('INBOX')
</span><span class='line'>
</span><span class='line'>###################################################################
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>searchParams.each do |searchArray|
</span><span class='line'>  puts "Searching #{searchArray[1]}"
</span><span class='line'>  searchIds = src_imap.search(searchArray).each do |id|
</span><span class='line'>    msg = src_imap.fetch(id, 'RFC822')[0].attr['RFC822']
</span><span class='line'>    head = parseHeader(msg)
</span><span class='line'>
</span><span class='line'>    searchIds = dst_imap.search(['X-GM-RAW', "rfc822msgid:#{head[%q{Message-ID}]}"])
</span><span class='line'>    if (searchIds.length == 0) # このチェックを省くと遅くなる
</span><span class='line'>      dst_imap.append('INBOX', msg, nil, Time.parse(head['Date']))
</span><span class='line'>      putc 'w'
</span><span class='line'>    else
</span><span class='line'>      putc '.'
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  puts
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>src_imap.logout()
</span><span class='line'>dst_imap.logout()
</span><span class='line'>
</span><span class='line'>src_imap.disconnect()
</span><span class='line'>dst_imap.disconnect()</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSSはタダ乗りでもいいけどマズい]]></title>
    <link href="http://www.monaka.org//blog/2013/12/26/oss-community-and-others/"/>
    <updated>2013-12-26T10:17:50+09:00</updated>
    <id>http://www.monaka.org//blog/2013/12/26/oss-community-and-others</id>
    <content type="html"><![CDATA[<p>Togetter で纏めるかどうか思案しつつ．
まあ，コメントが付く話でもなかろうということで，当日記へ．</p>

<blockquote class="twitter-tweet"><p><a href="http://t.co/w1u1XPzH9S">http://t.co/w1u1XPzH9S</a>&#10;こういう人には、モラトリアムを使ってオープンソース活動をして欲しいなぁ&#10;みんなスタートアップ行って死ぬほど働いちゃうから、OSS系の若者が減ってきている印象。</p>&mdash; Yuichiro MASUI (@masuidrive) <a href="https://twitter.com/masuidrive/statuses/415363396410699776">December 24, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSに敬意を払わないスタートアップ系が増えているのだとしたら，深刻だぬ．&#10;OSSは手段であって目的ではない，っていう好意をジャイアニズム的に解釈して，昔から今まで不毛なままの分野を，アテクシ知ってる． <a href="https://twitter.com/search?q=%23%E3%83%8B%E3%83%83%E3%83%9D%E3%83%B3%E7%9A%84%E7%B5%84%E8%BE%BC%E3%81%BF&amp;src=hash">#ニッポン的組込み</a></p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415825872898117632">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<!-- more -->




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> 敬意を払わない人がいくらいてもいいんですよ。タダ乗りもＯＫ。敬意を払ったり貢献したりする人がゼロになると困るけど。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/415837392822497280">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yukihiro_matz">@yukihiro_matz</a> 敬意を払わない人，タダ乗りする人にに嫌気して，貢献する人が減っていくというデススパイラルがあるのですよ．すべからくそこに行き着くとまでは言いませんが．&#10;最悪ケースで行き着く先は，水になったワインの寓話みたいな結果．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415838576832561152">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> えーと、FLOSS歴20数年の経験から言うと、気にしたほうが負けだと思います。「気にしない」というコミュニティ運営が長続きのコツ</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/415839352766222336">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yukihiro_matz">@yukihiro_matz</a> えーと，わたくしもFLOSS歴は20数年あるわけですがw．&#10;世の中にはダメなFLOSSと上手くいくFLOSSがあるわけです．&#10;ほら，Linux界隈でも，組込み界隈の閉鎖性に，密かにブチ切れた声ありましたよね? 10余年くらいまえに．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415840330156490753">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>あたりがコトの起こり．
このあと続くのだけれど，人様からのmention tweetを延々と個人日記に載せまくるのは，著作権法的にどうなの? って話はあります．
アート作品に無断でtweet貼りまくって炎上した実例もありますし．</p>

<p>なので，第一部は，これくらいにしておいて，翌朝からの独白第2部へ．</p>

<p>以下，私見をざっくりまとめちゃうと，こんな感じでしょうか．</p>

<ul>
<li>Matz氏が言うことも道理ではある．実際成功もした方の方法論ですから，道理があって当然．</li>
<li>OSS コミュニティはちょっぴり特殊で，外の経済経営概念とは違う面がある．</li>
<li>(Web系)スタートアップが，OSS コミュニティの特殊性から解離しつつあるとしたら，OSSにとっては，ヤバイんじゃないかな．</li>
</ul>


<blockquote class="twitter-tweet"><p>昨晩のは，「敬意を払ったり貢献したりする人がゼロになると困る」というのは一致で．&#10;ゼロにしないための「タダ乗り」には，まあ価値はある．&#10;古典経済的にはタダ乗りに見えても，実際には，「タダ乗り」ではない，というケースはありうる．&#10;典型は，敬意とか評価とかを貢献者に提供してい場合．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415983476261679104">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSコミュニティ(の前駆であるハッカーコミュニティ)は，評価経済と原始共産制っぽいナニカでまわっていることを(無自覚かもしれないが)知っていて，そのように振る舞う傾向がある．&#10;ただし，それは全経済世界から見れば，かなり恵まれた，先進的なコミュニティであるんすよ．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415984602151272448">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSコミュと旧来型産業との経済観の乖離は，想像以上に大きくて．&#10;私の直接関与がない時効例を挙げると，CELFやらMOAPやらは，「あいつらタダ乗り」という陰口をよく聞いた．&#10;旧来の経営経済の申し子である組込みコミュは，OSSコミュとの摺り合わせが困難といえるほど難しい．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415988402501070848">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>「敬意を払ったり貢献したりする人がゼロになると困る」という最低レベルを割りこむほどのタダ乗り(評価経済的な貢献さえしない)が起こりえる．OSSコミュには信じがたいことかもしれないけれども．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415988813660315648">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>続) …Web系スタートアップのエコシステムが，(組込みコミュのような)旧来経営経済系に変質しかかっているという仮説が立てられる．実際はどうなのかは，フィールドワークでもしないと何とも言えんけれど．&#10;直感では，あーこりゃヤバくね? って思うず．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415990322779267074">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>OSSコミュの思想が尊重される分野の外に出なかった人と，この漠然とした危機感を共有するのは難しいだろうってことくらいは判るので，その辺は (´ー｀)ｿﾝﾅﾓﾝﾀﾞﾖﾅ と．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/415994029419921408">December 25, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>まあ，「若者がコミュニティに参加しない」っていうのは，オープンソースって言葉が生まれる前から言われ続けていたことのような気もしなくもないです．
この件，全ては私の杞憂なのかもしれませんけれどね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[組込み技術者と'幸せ']]></title>
    <link href="http://www.monaka.org//blog/2013/12/15/happiness-for-embedded-engineers/"/>
    <updated>2013-12-15T08:52:42+09:00</updated>
    <id>http://www.monaka.org//blog/2013/12/15/happiness-for-embedded-engineers</id>
    <content type="html"><![CDATA[<h2>まくら</h2>

<p>とあるWebメディアから，新春インタビューの依頼を受けました．
どこからかは，載るまで秘密です．載らないかもしれませんし．</p>

<p>このエントリを書いている時点では取材前ですし，載ったとして，(当然)年越しです．</p>

<p>来年の予測を，ざっくばらんに…とは言われたものの，そのとおりにすると，纏まらないわ人を無闇にdisるわで大変なことになります．
我ながら目に見えるょぅ…．</p>

<h2>組込みシステム業界は，誰の顔を見ている?</h2>

<p>そんなわけで，ここ数日，寝しなに，来年とか今後数年後の組込みシステム業界を空想してみたりしていました．</p>

<p>そのとき，ふと思ったのです．</p>

<p><em>もしかして，日本の組込みシステム業界って，組込みシステム業界のことしか考えていないんじゃないの?</em></p>

<!-- more -->


<h2>オピニオンリーダーたちの発言から</h2>

<p>組込みシステムに限らず，業界には，オピニオンリーダーという方々がいます．
彼らの意見は，必ずしも業界の代弁人ではありませんが，概ね業界の方向性を決めます．
生臭い話ですが，政策，つまり税金の使い道も左右します．</p>

<p>曰く，</p>

<ul>
<li>「将来数十万人規模で組込み技術者が不足する」</li>
<li>「車載ソフトを海外製に牛耳られたら日本は終わりだ」</li>
<li>「TRONはUIを捨てて制御に走るべきだ」</li>
<li>「品質の確保は仕様記述の厳密さから云々」</li>
</ul>


<p>あんまり具体的な発言を引用すると，特定の誰かに喧嘩を売っているように思われかねず，それは本意ではないので自重します．</p>

<p>…など弱腰になりつつ，改めて，日本のオピニオンリーダーたちの言葉をググって見ると，一つの傾向が見られる気がしてきます．
<em>みんな，業界の中の話ばかりしているんじゃないの?</em>，と．</p>

<h2>組込みシステムは最終顧客に理解されているか</h2>

<p>組込みシステムは工業用機械から家電製品までカバーするので，最終顧客を絞りづらいのですが，ここではとりあえず日用品に絞ります．
すると，最終顧客は消費者となります．
出荷台数という観点では最大顧客層ですから，悪い絞り込みでは無いでしょう．</p>

<p>さて，例えば，近所のスーパーマーケットに行ってみるとします．
レジのおばさんに，「将来数十万人規模で組込み技術者が不足する」ことの意見を聞いて，どういう反応が返ってくるでしょうか．
おばさんが叩いているレジは，組込みシステムです．</p>

<p>駐車場に移動して，日本車を停めて降りてきた人に「車載ソフトを海外製に牛耳られたら日本は終わりだ」って話たら，どうでしょうか．</p>

<p>たぶん，返事は，要領を得ないでしょう．
&ldquo;風が吹けば桶屋が&#8221;の喩えで，問題点を理解してもらうことは，不可能ではないかもしれません．
しかし，(おそらく)一発では反応を得られないでしょう．
最終顧客には直接の興味のない話を，日本の組込みシステムのオピニオンリーダーは，しています．</p>

<h2>外の人に向けたメッセージ</h2>

<p>日本の組込みシステム開発の関係者からは，「そりゃそうだ，それらは，中の人が中の人向けに出したメッセージだ」って意見が返ってくるのは想像がつきます．
一応，私も中の人の端くれですので．</p>

<p>そういう意見への更なる問いは，次のようなものです．
「中の人が外の人に向けたメッセージって，ありますか?」</p>

<p>組込みシステムが世の中をどう変えていくのか，最終顧客に向かって，右脳に語りかけるメッセージ，日本では久しく聞いていないように思います．</p>

<p>私が思いつく最近の例は，坂村健氏が中心となって発せられたトロンです．
それでさえ，25年以上前になります．</p>

<p>世界的に，そういうメッセージを発することが廃れたかというと，そんなことはないでしょう．
ユビキタス，IoT，タンジブル，…．
バズワードという一部の陰口はあるものの，トロン以降の25年の間に，最終顧客の目前に提示される(それが概念であっても)メッセージはありました．海外では．</p>

<h2>真摯ゆえの内向き</h2>

<p>組込みシステム業界の場合，オピニオンリーダーの多くは，学者だったり専門性の高いエンジニアだったりします．
ですので，自分の研究領域の中でベストを尽くすという態度は真摯でありこそすれ，disられるべきものではありません．</p>

<p>前出の坂村健氏も学者ではあります．
が，80年代の彼は，メッセージ性言う点で異能でした．</p>

<p>しかし，専門家が専門に対して内向きであることが業界全体を覆ってしまったとすると，個々人の問題ではなくなってきます．</p>

<h2>じゃあどうすんのよ</h2>

<p>内向きに対しての&#8221;幸せ&#8221;のことしか話をしなくなったエコシステムで，長い目で見て残った例を，私は知りません．</p>

<p>かといって，「で，どうすりゃいいのよ?」って問いがあっても，私には，すぐに出せる案がありません．
案を秘してはいますが，2013年時点では実現可能性が低いので出しません．</p>

<p>「問題提起しておいてそれかよ」って言われても，仕方ありません．
そもそも私の問題意識は的外れで，日本の組込みシステム業界は未来永劫の繁栄を続けるのかもしれませんし．</p>

<h2>そんなわけで</h2>

<p>インタビューでは，この点について，場末の組込みエンジニアがどのように向かい合えるか，といった辺りは話そうかなと思ったりしています．
まあ，話したことが全部は載らない(ヘタすると全ボツ)ってのがインタビュー記事の醍醐味です．
どうなるか，わかりませんけれどね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロライターが教える｜学生のライティングにたった一つ足りない「読み手にとっての価値を考え*ない*」視点の補い方]]></title>
    <link href="http://www.monaka.org//blog/2013/12/12/how-to-write/"/>
    <updated>2013-12-12T22:47:25+09:00</updated>
    <id>http://www.monaka.org//blog/2013/12/12/how-to-write</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>ググって来た方には，ワタクシが何者なのか判らないでしょうから．
ええと，紙媒体の商業誌に，独自の視点で解説を加えた雑文を寄稿したりしています．
さほど社会的影響力があるとは思えない，狭い分野ではあるのですけれども．</p>

<p>商業誌っていってもピンキリですから…．
主戦場は，概ね数万部の下の方くらい，
ちょっと気の利いた本屋なら，地方都市でも，工学系の雑誌棚にはありそうな媒体です．</p>

<p>一応，持ち込み記事よりも，巻頭特集やら連載やらの依頼のほうが多いです．
記憶にあるかぎり，少なくとも3社の依頼に応えたことがあります．
兼業とはいえ，プロの端くれではあるのでしょう．</p>

<!-- more -->


<h2>導入</h2>

<p>どんな職業に就こうとも，世の中，文章で人に説明することからは逃げきれません．</p>

<p>ワタクシの至近のネタで恐縮ですが，ワタクシの家内は，文章執筆から遠い生き方をしていました．
しかし，子供を授かって幼稚園に入れようとしたら，志望動機を完結に書けと願書にあって卒倒していました．
子供が小学校に入ったら，PTAで広報委員に割り当てられて広報紙を作る羽目になって，もんどり打っていました．</p>

<p>無論，子供を作らなければ，こういうことからは逃げられます．
まあでも，どんな生き方をしたとしても，似たようなものでしょう．</p>

<p>どんな職業に就こうとも，世の中，文章で人に説明することからは逃げきれません．</p>

<p>ゆえに，学校では，特に，総仕上げとなる大学/大学院では，物書きのテクニックをいろいろ指導されます．
されるはずです．
たぶん．
指導教官の熱意に依存するとはいえ．</p>

<h2>問題</h2>

<p>物書きから，現代のオトナは逃げ切れない．
ならば，会得するしかないのですが．</p>

<p>そこを納得すると，次なる疑問や課題が湧いてきます．たぶん．
学生(もしくは，プロにならなかった人)と，曲がりなりにもプロになってしまった人との違いって，何なのだろう．
物書きのプロの，特異的な部分って何なのだろう．
プロでない人が，プロになるためには何をすればよいのだろう．</p>

<p>ここは，意見が分かれます．
一つの見解は，「足りない部分はクリスプに抽出可能で，メソッドを定義して，繰り返し練習すれば不足を補える」です．
例えば，このエントリが典型かと思います．&#8221;<a href="http://yorikanekeiichi.com/imagine-the-value-to-the-reader-5438.html">プロライターが教える｜学生のライティングにたった一つ足りない「読み手にとっての価値を考える」視点の補い方</a>&#8221;</p>

<p>ワタクシは，この種の見解を全否定する立場は取りません．</p>

<blockquote><p>アマチュアと職業ライターの違いは「切り口」のみ</p></blockquote>

<p>というのはまさにそのとおりだと思います．</p>

<blockquote><p>読み手にとって価値がなければ、誰も読んでくれません。</p></blockquote>

<p>というのも，全くその通りです．</p>

<p>ですが，自分が語りたいものが&#8221;読み手にとって価値があるもの&#8221;かどうかを知るのは，実はとてもムズカシイものです．
読み手が，どう考えても学内，極端な場合，指導教官で済むような文章であれば，この設定は簡単です．
先ほどのワタクシ事を引いてくるならば，願書の志望動機は，幼稚園の先生しか読みません．
これも簡単です．
読み手と書き手(である自分)は，コンテキストを共有しています．</p>

<p>しかし，ライティングの本当の怖さ，難しさは，&#8221;共有の不在&#8221;だったりします．
自分とコンテキストを共有していない不特定多数に対して，どのように自分の知識を届けるか．
そこには，「どう判ってもらうか」「何を書くべきか」「読み手にとっての価値はなにか」といったような判断材料が，少なくとも乏しいか，もしくは全く存在しません．</p>

<p>徒弟制度の範囲で済むようなライティングであれば，「足りない部分をクリスプに抽出し，メソッドを定義し，繰り返し練習」で，おそらく済みます．
しかし，それは学会，勉強会などタコツボのなかの能力であって，プロが備えるライティング能力とは一致しません．サブセットです．</p>

<h2>提案</h2>

<p>このようなコンテキストの非共有は，対象読者の別を問わず起こります．
専門分野を問わない一般新聞紙上などでは，常に起こります．
しかし，専門分野を対象としたライティングでも，しばしば起こります．
内容が斬新で分野横断であればあるほど，興味を持つ人が増える反面，コンテキストを共有できる人が減るからです．</p>

<p>本当に悩ましい問題ですが，このような問題に，古来から常にさらされている分野があります．
それは，芸術の分野です．</p>

<p>ワタクシは，芸術分野の才覚はないので，専門家のブログから，本エントリの文脈で使えそうなものを引用します．</p>

<p><a href="http://d.hatena.ne.jp/ohnosakiko/20130227/p1">自意識のセーフティネットセーフティネットを破って</a></p>

<p>多くの場合，芸術系の表現ほどは，自意識が現出することはないかもしれないとは思います．
しかしながら，すべからくの表現は，それがどれだけ事実の描写に務めたものであったとしても，つまるところ，自意識の現出です．</p>

<blockquote><p>Midas 　絵画とは「この私には世界はどう見えているか」を他人に知らせ共有するもの。そもそも「こんな私を見て！」の人が上手くなるわけがない(才能以前の問題)。 2013/02/25</p></blockquote>

<p>まあつまりは，そういうことなのです．
絵画だけではありません．
読み手は，&#8221;あなた&#8221;に興味はありません．
&ldquo;あなた&#8221;が描いた世界に興味を持てるか否かには，かろうじて興味を持ってくれます．</p>

<p>何かを学んでいる，理解しようとしている．
そんな段階のときには，&#8221;私&#8221;の努力を伝えたくなります．&#8221;私を見て&#8221;と．</p>

<p>共有できるコンテキストが少ない時にも，自分が述べたいことではなく，自分自身を担保にしたくなるものです．
(最近でも，国と国との外交交渉の場面で&#8221;trust me&#8221; と言った首相がいたような気がします．)</p>

<p>そんな気分のときでも，「どう判ってもらうか」「何を書くべきか」「読み手にとっての価値はなにか」は考えつきます．
でも，読み手には，この歪が伝わります．
読み手も，当該分野の知識が足りないかもしれませんが，地頭としてバカではありません．</p>

<p>メソドロジーの立場を取るブログエントリを全否定するつもりはありませんが，しかし，プロとアマチュア(典型は学生)との差は，テクニックではありません．</p>

<p>文章として表現する分野について，追求することの快楽と苦痛に苛まれつつも，足元をひたすら掘り起こす覚悟と，その結果が，差として現れます．</p>

<p>なので，一枚ペラの紙を埋めるだけでなんとかなる話では，おそらく，ありません．</p>

<h2>締</h2>

<p>このエントリは師走に入ってから書いています．
そろそろ，日本の大学では，卒論，修論が追い込みの季節だろうと思います．
それに合わせて，テクニック系の記事がオンラインにつけオフラインにつけ，増えるだろうと思います．</p>

<p>ワタクシも，メソドロジーは割と好きです．
これをやるだけでプロに成れるのか，なんて思うと，夢が広がります．</p>

<p>ですが，少なくとも専門分野向けの文章表現についていうならば，諦めたほうがよいと思います．</p>

<p>プロとそれ以外の決定的な差は，「頑張っている私を見て」と「この私には世界はどう見えているか」との視点の違いです．</p>

<p>無論，読者への配慮も必要です．
が，それは読者に対して決定的に響いてくるものではありません．</p>

<blockquote><p>そしてジャンルを問わず表現は結果的に、「この私には世界はどう見えているか」を示し他人に共有を促すものに反転するのだと思います。</p></blockquote>

<p>もし読者が学生さんであるならば，この相反転を意識しながら，指導教官の論文を読むと得られるものが多いはずです．
それが，プロの文章に必要なものです．</p>

<p>プロが行う「この私には世界はどう見えているか」を述べるには，「自分自身の足下をひたすら掘り起こしていくしかない」のです．
地道に．
たぶん指導教官がなさっているように．</p>

<h2>蛇足</h2>

<p>師走になってから，卒論・修論で死んでいる学生さんたちに，いまさら言っても，たぶん直近の締切には間に合わないでしょうけれども．</p>

<p>…まあ，ほら，「どんな職業に就こうとも，世の中，文章で人に説明することからは逃げきれません．」ので，いつか役に立ちますよ…．たぶんね．きっとね．おそらくね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTunes のアルバムアートワークを抽出する]]></title>
    <link href="http://www.monaka.org//blog/2013/11/26/extracts-itune-artwork/"/>
    <updated>2013-11-26T07:43:19+09:00</updated>
    <id>http://www.monaka.org//blog/2013/11/26/extracts-itune-artwork</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>さまざまな理由で，iTunes のアルバムアートワークを画像として抽出したいときがあるでしょう．
たとえば，ざっとサムネイルとして眺めてみたいとか．</p>

<p>抽出した画像の2次利用や公衆配信は，明白に知財侵害なのでダメ絶対，です．
細かいことをいうと，個人利用の範囲でも厳密には，マズいような気もします．
本エントリは，技術的にはできますよね，的なお話．
…ということで，ひとつよしなに．</p>

<!-- more -->


<p>iTunesのアルバムアートワークは，iTunesフォルダを <code>{itune_folder}</code>とすると<code>{itnue_folder}/Album Artwork/</code>配下の拡張子itcファイルに収められています．
特に手を加えていなければ，<code>~/Music/iTuness/Album Artwork/</code>にあるはずです．
ただし，itc ファイルには，様々なメタデータが画像の前についています．
画像として扱うには，このメタデータを外す必要があります．</p>

<h2>スクリプト</h2>

<p>サクッと答えだけ書きます．
OSX を使っている前提に立っています．Windowsの方はCygwinなり何なりを入れてください．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!env bash
</span><span class='line'>for i in $(find ~/Music/iTuness/Album\ Artwork/ -name '*.itc'); do
</span><span class='line'>  dd if=$i of=$(basename $i .itc).png bs=1 skip=492
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<h3>注意事項</h3>

<p>dd でアタマを落とすだけ．492 バイトは，環境(iTunesのバージョンなど?)によって違う可能性がありそうです．
<a href="https://www.google.co.jp/search?q=itune+itc+500%E3%83%90%E3%82%A4%E3%83%88">ググると，この数値は500バイトであると主張している人が少なからず居る</a>ようですので．</p>

<p>お手元環境で何バイトを削ればよいかは，目視でお判りになるでしょう．
上記のスクリプトを理解できる人の手元には，愛用のバイナリエディタもおありでしょうから，</p>

<p>あと，上記のスクリプトでは，拡張子を png に決め打っていますが，実際には，画像は，PNG と JPEG の2種類があります．
言うまでもありませんが，これは file コマンドを使って容易に識別できます．
こんなふうに．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ file *.png
</span><span class='line'>4931EBE6BCC87C34-07FBFB2CA12DDA5D.png:   JPEG image data, JFIF standard 1.01, comment: "AppleMark"
</span><span class='line'>4931EBE6BCC87C34-08F02BE333CFBBAA.png:   PNG image, 128 x 128, 8-bit/color RGBA, non-interlaced
</span><span class='line'>4931EBE6BCC87C34-0A2AC7440B8F25B6.png:   JPEG image data, JFIF standard 1.01</span></code></pre></td></tr></table></div></figure>


<p>あとは，上手いことやってください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安全の礎たるもの]]></title>
    <link href="http://www.monaka.org//blog/2013/11/16/safety-stands-on/"/>
    <updated>2013-11-16T16:26:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/11/16/safety-stands-on</id>
    <content type="html"><![CDATA[<p>もう一週間ほど前になりますが，EE Timesという組込み業界系メディアにとある記事が掲載されました．</p>

<ul>
<li>&ldquo;<a href="http://eetimes.jp/ee/articles/1311/11/news072.html]">トヨタの急加速事故は欠陥だらけのファームウェアが原因？――原告側調査の詳細</a>&rdquo;</li>
</ul>


<blockquote><p>2007年に米国オクラホマ州で、トヨタ自動車の乗用車「カムリ」が急加速したことによる死亡事故が発生した。事故をめぐる訴訟において、原告側証人として事故原因の調査を行った組み込みソフトウェアの専門家は、裁判で「カムリのエンジン制御モジュール（ECM）のファームウェアに重大な欠陥が見つかった」と報告した。</p></blockquote>

<p>だそうです．
通常，組込み業界系メディアが一般の…プログラマ界隈でさえ…取り上げられることは滅多にないのですが，Twitter の TL を軸にして眺めていたところ，割と広く拡散したように見えます．
トヨタという知名度，クルマという日常生活に深く関わるものに関すること，加えて，コード品質からの切り口は，組込み業界以外のプログラマでも話題にしやすかったということがあったのだろうと思います．</p>

<!-- more -->


<p>ワタクシは，経歴がどうであれ，傍流で眺めているだけのクズエンジニアですから．
昼のラーメン屋で，タブロイド紙を面白可笑しくネタにするダメリーマンと同じく，適当なことを Twitter に放流していました．(あ，でも軽口はあっても嘘は入れていないつもりです)．
調査をしたというMichael Barr氏の素性もよくわからないですし，報道の段階で誤解曲解があることは十分に想定の範囲ですし，ね．</p>

<p>まあ，「&#8221;安全&#8221;とは何か!」みたいな哲学的な事柄を科学的に突き詰める方々については，お顔も思い浮かびますし，まあ怒って長文を投げる方もいらっしゃるだろうなぁ，くらいには思っていましたけれども．</p>

<p>で，やはりというか，blogエントリが上がりました．</p>

<ul>
<li>&ldquo;<a href="http://embeddedsoftwaremanufactory.blogspot.jp/2013/11/blog-post.html">安全を売りにするな！安全を食いものにするな！</a>&rdquo;</li>
</ul>


<p>の，後半です．非公式な情報では全文のご執筆は4時間にもわたるものだそうで，読み応えがあります．
ワタクシのアホtweetは，全くもってカスに見えます．
ワタクシのtweetは不随意反射，タイピング時間を除くと 1[sec/tweet]もかかってないでしょうから，比べたら失礼の極みですが．</p>

<p>ソフトウェアの安全，という話題を日本でするに当たり，言及がないことが考えられないくらい著名なエンジニアであり研究者である酒井氏の発言です．
安全に関するご指摘に誤りがあろうはずもありません．
特に，下記のご指摘は，とても重要と思います．</p>

<blockquote><p>ソフトウェア品質とシステムの安全をごっちゃにしている。</p></blockquote>

<p>件の元記事への批判としては，これで十分と思えます．
にも関わらず，なんであんな冗長な文章を書く必要があったのかワタクシには判りませんが…安全とは，言葉を尽くさないと語れないものなのであります．たぶん．</p>

<p>ま，そんなわけで，オーソリティにアホが何言っても詮ないのですが，底辺プログラマとして，気になることが，一つだけ．</p>

<blockquote><blockquote><p>み込み機器向けのコンサルティングを手掛けるBarr GroupのCTO（最高技術責任者）であり、共同創設者でもあるMichael Barr氏＊）は2013年10月、EDNの問い合わせに対し、今回の調査結果を明らかにした。Barr氏は同僚とともに、裁判の原告側の専門家証人として徹底的な調査を実施した結果を明らかにした。<div style="color:red">これは、セーフティクリティカルシステム開発に携わる全ての人々に対する教訓となるだろう。</div>自動車業界や医療機器業界、航空宇宙業界などのいずれの分野においても、欠陥が生じることは決して許されない。</p></blockquote>

<p>冗談だろう。教訓にもなにもならない。</p></blockquote>

<p>ふーむ．教訓にもなにもならない，ですか…．</p>

<p>Barr氏の言っていることのうち，コード品質に関する部分が本当であるならば，という仮定付きで，かつ，Barr氏の意図と必ずしも合致していないかもしれない，という前提付きでもありますが．
ワタクシは，これ，安全だの信頼だの言っている人たちへの教訓に十分なると思ったりします．
端的にいうと，こんな感じです．</p>

<p><strong>全体最適だの機能安全だの崇高なことをいっている間に，根となるべきプログラマの品質確保に失敗しているってことではないですかね?  底辺プログラマでも天を仰ぐような品質問題がボコボコ指摘されるってことは．</strong></p>

<p>「ソフトウェア品質とシステムの安全をごっちゃにしている。」のはワタクシも思うのですが， <strong>品質の悪いソフトはシステムの安全を脅かす</strong> ということは経験知としてさほどおかしな話でもなさげです．
てか，品質が悪いソフトを内蔵しつつ安全なシステムで，顧客の満足も得られた例って，あるんですかね? 言葉遊びの上では在り得ることは解りますが．</p>

<p>品質が良ければ安全とは限らないなんてのは，底辺プログラマのワタクシでも判ります．
が，品質が悪く安全を担保できるのかって指摘に対して，安全とは，って解くの，専門家すぎて，よくわかんな〜いです．</p>

<p><strong>スリカエじゃ無いですか? それって．（・＿・）</strong></p>

<p>………なんてな．(CV:いかりや長介)</p>

<p>twitter でのワタクシのゲス発言を基に，少し加筆してみました．ゲス発言に何を加筆しても，ゲス発言ですな．お目汚し，すんません． (_ _)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[repo sync でストレージを節約するための group 機能の使い方]]></title>
    <link href="http://www.monaka.org//blog/2013/11/04/group-in-repo/"/>
    <updated>2013-11-04T09:28:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/11/04/group-in-repo</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>最近の AOSP は，対応するビルドホストもターゲットも増えたため，prebuilt バイナリの量が膨大になってきました．これが sync の時間を伸ばし，ビルドマシンのストレージを圧迫しています．</p>

<p>しかし，対応しないビルドホストやターゲットの prebuilt バイナリは，不要なわけです．
一部の Android 系プロジェクト (Android-x86 とか) では， manifest.xml を編集して，不要なプロジェクトを削除しています．
しかし，ターゲットはさておき，ビルドホストは複数あったほうが開発者を増やすためには望ましいと言えます．
また，AOSP の新しいリリースごとに manifest.xml の再編集を行うのは骨の折れる作業です．</p>

<p>このような状況を解消するために，repo には group という機能があります．
日本語のみならず，英語圏でも纏まって解説されている例は，ざっとググった限りでは無いようです．</p>

<!-- more -->


<h2>manifest.xml</h2>

<p>manifest.xml は，repo が引っ張ってくるプロジェクトの内容が記述されています．
init の時に指定して，実体は {repo_root}/.repo/manifest.xml にあります．
(細かいことを言うと，このファイルはシンボリックリンクですが，割愛します)</p>

<p>manifest.xml のプロジェクトには，こんな感じで groups という属性を付けられます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;project groups="pdk,darwin,mips" name="platform/prebuilts/gcc/darwin-x86/mips/mipsel-linux-android-4.8" path="prebuilts/gcc/darwin-x86/mips/mipsel-linux-android-4.8"/&gt;
</span><span class='line'>  &lt;project groups="pdk,darwin,x86" name="platform/prebuilts/gcc/darwin-x86/x86/i686-linux-android-4.6" path="prebuilts/gcc/darwin-x86/x86/i686-linux-android-4.6"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>この例は AOSP の manifest.xml から引用してきました．以降でも，この manifest.xml のコード片を引用します．</p>

<h2>repo init の -g オプション</h2>

<p>repo init には，あまり知られていないようですが，-g というオプションがあります．
これは隠しオプションではありません． repo help init すると，解説がでてきます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-g GROUP, --groups=GROUP
</span><span class='line'>                    restrict manifest projects to ones with specified
</span><span class='line'>                    group(s) [default|all|G1,G2,G3|G4,-G5,-G6]</span></code></pre></td></tr></table></div></figure>


<p>このオプションの使い方が，本稿の核心です．</p>

<p>使い方は，判ってしまえば簡単です．-g には，引っ張ってきたいグループをカンマ区切りで指定します．
ただし， <strong>引っ張ってきたくないグループには &ndash; を接頭します</strong>．</p>

<p>たとえば，私が Android-x86 の開発者であり，mips ターゲットの開発をする可能性が限りなく 0 だったとしましょう．
その場合には，repo init を実行する際のグループ指定時に，mipsターゲットを無視する -mips を付加します．具体的には，<code>-g 'default,-mips'</code> とします．これだけです．
このようなオプションで初期化された repo リポジトリでは，無効にされたプロジェクトは sync を行っても無視されるようになります．
プロジェクト名を明示した sync を行おうとすると，下記のように例外が発生します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ repo sync platform/prebuilts/gcc/darwin-x86/mips/mipsel-linux-android-4.8
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/main.py", line 418, in &lt;module&gt;
</span><span class='line'>    _Main(sys.argv[1:])
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/main.py", line 394, in _Main
</span><span class='line'>    result = repo._Run(argv) or 0
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/main.py", line 142, in _Run
</span><span class='line'>    result = cmd.Execute(copts, cargs)
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/subcmds/sync.py", line 606, in Execute
</span><span class='line'>    submodules_ok=opt.fetch_submodules)
</span><span class='line'>  File "/home/azureuser/repo/.repo/repo/command.py", line 180, in GetProjects
</span><span class='line'>    raise InvalidProjectGroupsError(arg)
</span><span class='line'>error.InvalidProjectGroupsError</span></code></pre></td></tr></table></div></figure>


<p>AOSP のリポジトリは，いくつかの特殊な状況を除き，ビルドホストもターゲットも単一アーキテクチャでしょう．そんなときは，init 時のグループ指定をさらに厳密にできます．
例えば，Ubuntu Linux上で Android-x86 系のビルドをする際に，私が使っているグループ指定は， <code>default,-arm,-mips,-darwin</code> です．</p>

<h2>応用</h2>

<p>group 指定には，特殊なグループ all, default, notdefault などあります．
これらを詳説すると，紙幅がいくらあっても足りませんので，本稿では割愛します．
repo の実体は Python スクリプトなのでご自身で調べられるでしょうし，私自身も完全に理解できているわけではありませんので．</p>

<p>特殊なグループを除き，group には，お互いに衝突しない自由な名前を付けられます．
Android 系以外のプロジェクトでも repo を使っているプロジェクトはあるようですが，そのようなプロジェクトでも group を活用することで，柔軟なプロジェクト運営が可能になるかもしれません．</p>

<h2>注意事項</h2>

<p>既に存在しているリポジトリに対して repo init を行う場合に -g オプションを指定すると，そのあとの sync から group 指定が有効になります．
ただし，あとから無効にした場合，sync で pull はされてこなくなり，作業スペースからは削除されますが，ストレージ上には git リポジトリのクローンが残骸として残ります．.repo/ 内のリポジトリを削除することでストレージの節約になりますが，バッドノウハウすぎるので，本稿では割愛します．変なことをしないで rm -fr .repo してから init し直すほうが無難です．</p>

<h2>追伸</h2>

<p>どなたか，repo の詳細を纏めて頂けないでしょうか．有償だとしても読みたいです． <em>知らない言語のコード読むの，疲れるのよ…</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[狂ったように作るもの]]></title>
    <link href="http://www.monaka.org//blog/2013/10/01/what-is-next/"/>
    <updated>2013-10-01T13:49:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/10/01/what-is-next</id>
    <content type="html"><![CDATA[<p>社名としてのASCIIが消えたとのこと．遠藤諭氏が寄稿した記事を，読んだ．
( <a href="http://weekly.ascii.jp/elem/000/000/175/175062/">「さらばアスキー」社名と小惑星 ～ASCIIはホビーのブランドではない</a> )</p>

<p>私自身は，ベーマガ→Oh!MZ と進んで，月刊ASCIIはたまに立ち読みしたり図書館で読んだりという程度の記憶しかない．</p>

<p>けれど，MinixへのパッチキットでOSS的活動への名乗りを上げ，初台へ遊びにいったこともあったりするし，256倍やらマーフィーの法則やらハッカーズ大辞典やら，今もネタ元にしている書籍がたくさんある．
PostScriptやUnixの知識も，ASCII無しには得られなかっただろう．
TeXで日本語が使えるようになったのもASCII(だけではないけれど)のおかげだ．
残念というか，寂しいというか，時代の流れを感じるというか，そういう類の何かはある．</p>

<p>とはいえ，関係者ではない薄情な私の興味は，消えゆくものよりも，&#8221;この先生きのこるには&#8221;ということ．</p>

<!-- more -->


<blockquote><p>しかし、いまはそういう膨張期ではない。むしろ、マイコン初期のような誰も手札がないような時代である。“前のめり”なところからしか、新しいものは生まれないし、そうでないと何もかも海の向こうのクラウドに飲み込まれてしまう。その別れ目に、いまの我々はいる。あまりそうは指摘されていないし、学校でも教えていないと思うが、いまの日本は1980年頃以降、狂ったようにマイコンチップに突っ走ったことで成立したものだ。</p></blockquote>

<p>遠藤氏の言うとおりだと思う．
そして，今や，国内のマイコンチップは風前のともし火のように見える．
各社が非なるようでいて似通ったアーキテクチャのマイコンチップを乱発するような状況が，再び興る可能性はほぼゼロだろう．
私はペシミストなので，私が思うよりもずっと底力があるのかもしれないが，</p>

<p>また，前のめりであるべきデジタル世界で，時計を戻して何かが良くなるような気もしない．</p>

<p>今日，または明日，狂ったように突っ走るだけの価値があるものとは，何だろうか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restricted Words]]></title>
    <link href="http://www.monaka.org//blog/2013/09/19/restricted-words/"/>
    <updated>2013-09-19T13:57:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/09/19/restricted-words</id>
    <content type="html"><![CDATA[<p><a href="https://codeiq.jp/ace/cielavenir/q431">なんとなく気が向いた，というか，この手のプログラミングパズルにしては対応言語が多く，C言語もOKというのは珍しいな</a>，ということで解いてみた．</p>

<h1>お題</h1>

<p>引用する．</p>

<blockquote><p>標準出力に
Hello World
と出力するプログラムを作成して下さい。</p>

<p>ただし、数値、文字及び文字列リテラルを解答に含めることはできません。
Perlのqqやqw、Rubyの%Q、%q、%wなども避けたほうが評価が高くなります。
言語仕様をフル活用して下さい！</p></blockquote>

<h1>解法の定石</h1>

<p>定石は，数値を得て，その文字コードに変換する．
ASCIIコードでなくEBCDICな処理系だったらどうするの? みたいなツッコミは，とりあえず採点環境が OSX だということで無視できる．</p>

<p>この方針だと，1 をどのようにして得るかというのが鍵になる．
出題者の意図は，この定石通りだった．
回答者に送られた解説も引用可とのことなので，出題者の解説から引用する．</p>

<!-- more -->


<blockquote><p>・C/C++
初期化式を持たないグローバル変数はbssセクションに置かれます。main()が実行されるより前に0で初期化されるので、その変数をインクリメントすれば1になります。
また、xorにより0を作り出し、それをインクリメントしても1になります。
もしくは、少なくともx86/x64のgcc/clang上では、sizeof(char)は1です。</p></blockquote>

<h1>もなもな的解法</h1>

<p>定石通りに解くのは面白く無い．
他の言語でなく GCC を選ぶからには，GCC なりの解き方で行かねば．
なので，このように解いた．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * Environment: gcc version 4.2.1 (Apple Inc. build 5666) (dot 3)
</span><span class='line'> */
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>Hello(void)
</span><span class='line'>{
</span><span class='line'>  fputs(__func__, stdout);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>konokansuu_wa_space_wo_hyouji__(void)
</span><span class='line'>{
</span><span class='line'>  printf("%c", (int)sizeof(__func__));
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>World(void)
</span><span class='line'>{
</span><span class='line'>  puts(__func__);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  Hello();
</span><span class='line'>  konokansuu_wa_space_wo_hyouji__();
</span><span class='line'>  World();    
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p><code>__func__</code> は GCC拡張のビルトインマクロ．
最終的には関数名の文字列リテラルに展開される．
しかし，cpp を通した時点ではC言語仕様の数値，文字には展開されない．セーフ．</p>

<p>スペース文字を関数名に含めることは(当然)できないので，一工夫．
関数名を31文字にして，<code>__func__</code> の sizeof を取った．ナル文字含めて32．
これを文字として表示すればスペース文字になる．</p>

<blockquote><p>言語仕様をフル活用して下さい！</p></blockquote>

<p>とのことで，GCC の言語仕様を活用．
LL系言語だと，シンボルを文字列に変換する機能をよく見かけるけれど，C言語でこの技法を選ぶ奴は少ない…よね．たぶん．</p>

<h1>馬脚，もしくは，見直しは大事だよ</h1>

<p>なお，出題者からのコメント．</p>

<blockquote><p>なお、putchar()を使えば&#8221;%c&#8221;は回避可能です。</p></blockquote>

<p>確かに．</p>

<p>そういや，学生だった頃も，最後の見直しをしないで提出して，必ず何点か引かれていたよなぁ…．
こういうの，何歳になっても，治らんね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハッシュ関数をなんちゃってで理解する]]></title>
    <link href="http://www.monaka.org//blog/2013/08/17/what-is-hash/"/>
    <updated>2013-08-17T15:11:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/08/17/what-is-hash</id>
    <content type="html"><![CDATA[<p>某誌の連載は「とりあえず様子見で3回くらいやってみましょうか」で始めて，今月発売の号で3回掲載になりましたので，終わりました．</p>

<p>担当編集の方々や読者からの反応は悪くは無かったと自負はしているのですが，もっと大枠のところで色々と思うところありまして．主に私の側の問題です．</p>

<p>計算機科学(工学)周りでは，高校生/高専生/(情報工学専攻以外の)大学生には触れる機会がないけれども，プログラミングするなら知らないと辛い概念が結構あります．
私自身も専攻は物理で，計算機科学の高等教育を受けておらず，しんどい思いをしてきました．身に沁みています．
計算機科学の触りを，初学者向けに軽め/短めに解説するという連載の趣旨そのものは，提案した私が言うのもナンですが，良いと思っています．
どなたかパクっていただけないかなとも思うのですが…止めた私が言うのもナンですが．</p>

<p>ともあれ，期待して頂いた読者がいらっしゃったかもと思うと，申し訳ない気持ちはあります．
エアお詫びを兼ね，「4回目があったとしたら，何を扱うかな」というお題で，小一時間で書いてみました．
編集/校正を通しておらず，イラストもありません．
よって，読みづらいかもしれませんが，どうぞ．</p>

<!-- more -->


<hr />

<h1>ハッシュ関数 〜 ビッグデータの根本を支える数学</h1>

<h2>ビックデータ時代の到来</h2>

<p>ビッグデータという言葉は，業界用語を超えて，一般のメディア媒体にも登場するようになりました．
広く知られるようになると，意味が曖昧になるのが世の常です．
本題に入る前に，軽く整理しておきましょう．</p>

<p>近年，計算機の処理能力が上がり，それらがつながるネットワークが高速化しました．
結果として，大規模な並列処理が可能になりました．
同時並行で処理できるようなデータについては，その総量が膨大であっても，実用的な時間で分析が可能となりました．
このような背景をもってして，初めて分析が可能になるような膨大な量のデータを「ビッグデータ」と呼びます．</p>

<p>一般に，データの量とノイズの少なさには，概ね正の相関関係があります．
今までは，大量のデータをそのまま処理したいと思いつつも，計算機の能力の限界ゆえに，多くのデータは捨てられていたのです．</p>

<h2>ビッグデータが抱える技術的課題</h2>

<p>上記のように，ネットワークで繋がれた並列計算機による処理分散が，ビックデータ分析の肝です．
確かにネットワークは以前よりは高速化しましたが，CPUの中に比べると桁違いに時間がかかります．同時並行で処理できるようなデータを扱うとはいえ，ディスクやデータベースといったストレージへのアクセスは起きます．
隣の計算機で処理しているデータとの比較も行いたくなります．
現実には，システム全体で見た時，ネットワークの遅さは，大きなボトルネックになります．
いかにデータ本体をネットワーク転送させないか，というのは分散コンピューティングにおける最大の課題なのです．</p>

<h2>ハッシュ関数 = データの要約を求める関数</h2>

<p>データ転送量の抑制方法は，いくつか存在します．
それらのうち，仕組みが分かりやすく実効性も高いものに，データの本体ではなく，特徴を転送するというものがあります．</p>

<p>たとえば，つぎのような&#8221;ビッグデータ(笑)&ldquo;の各行が複数の計算機上に分散して置かれているとします．
そして，辞書順に並べる処理をしたいとしましょう．
この場合，全部のデータを送りあうのは得策ではありません．
たとえば，一文字目の「か・の・む・や」だけをネットワークに流して比較するのはどうでしょうか．総文字数16文字に対して4文字で済みます．</p>

<p>しかし残念ながら，この例の場合，「むらなか」と「むろた」は，一文字目だけでは辞書順に並び買えられません．
この場合は「むらなか」のデータを持っている計算機と「むろた」を持っている計算機との間で2文字目の「ら・ろ」を比べる処理が必要になります．手間はかかりますが，16文字を送りあうよりは転送量は少ないでしょう．
また，「かとう」「のむら」「やすだ」のデータを持っている計算機は，その間に別の処理を行えます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>かとう</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>むらなか</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>のむら</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>むろた</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>やすだ</span></code></pre></td></tr></table></div></figure>


<p>これは初歩的な一例でしかありませんが，「かとう」 → 「か」といったような処理を，計算機科学では関数であると見做して， <strong>ハッシュ関数</strong> (和訳は <strong>要約関数</strong> )と呼びます．
ハッシュ関数は，計算機科学における極めて重要な概念であり，またプログラミングの現場でも欠かすことのできない知識です．</p>

<p>ハッシュ関数をどのように選ぶかで，システムの性能は大きく影響されます．
例えば上記の例でのハッシュ関数では「むらなか」と「むろた」の順序を決定できませんでした．これは， <strong>衝突</strong> と呼ばれる状態です．衝突が起きると，それを回避する処理が必要になり，性能が落ちるので好ましくありません．
ハッシュ関数の結果は，元のデータより情報量が落ちますので，衝突は避けられないものではあります．しかし，より衝突が少なくなるよう関数の中身を考えるのが，技術者・研究者の腕の見せ所でもあるのです．</p>

<h2>備考: プログラミング言語とハッシュ</h2>

<p>Perl, Ruby, JavaScript など，一部の言語では，連想配列に相当する機能をハッシュと呼ぶことがあります．これらの言語の内部で，連想記憶の管理にハッシュ関数を使っていることに起因します．全く無関係でもないのですが，概念としては別物として考えておくほうが良いでしょう．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android (x86-jb) でのタッチスクリーンキャリブレーション]]></title>
    <link href="http://www.monaka.org//blog/2013/06/01/calibrate-touchscreen-android-jb/"/>
    <updated>2013-06-01T07:17:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/06/01/calibrate-touchscreen-android-jb</id>
    <content type="html"><![CDATA[<p>Android でのタッチスクリーンのキャリブレーション法について．情報が溢れていそうで，案外無い，
あっても，古くて使えない．
ので，記録しておきます．</p>

<p>(少なくとも AOSP での)タッチスクリーンサポートは，tslib を用いています．
tslib には，ts_calibrate というコマンドがついています．
ts_calibrate は，LinuxのフレームバッファとタッチパネルデバイスをLinuxのinputデバイスとを直接アクセスします．
Android は，当然ながら，画面を押さえていますので，衝突します．
そこで，下記のような手順で実行を行います．</p>

<p>以下，Android-x86.org が提供している x86-jb での手順です．</p>

<p>たぶん ICS 以降の Android の多くで使えるはずですが，中には，tslib を使っていないディストロもあります．(例えば AndroVM)
あと，rootが必要です．
スマホやパネルコンピュータなど，きちんと製品に作りこまれた状態でも，この方法は使えないかもしれません．
(その場合，キャリブレーションツールが必要なら，きちんとしたのがついてくるだろうと思います．)</p>

<ol>
<li>普通にAndroidを起動します．</li>
<li>adb shell など用いて，コマンドラインアクセス可能にします．</li>
<li><code>stop zygote</code> <code>stop bootanim</code> <code>stop surfaceflinger</code> として，zygote サービスを停止します．</li>
<li>多くの場合，キャリブレーションデータを保存するディレクトリが存在しません．<code>mkdir /data/system/tslib</code>を実行して作ります．</li>
<li><code>ts_calibrate</code> を実行します．</li>
<li>言われるままにタッチします．</li>
<li>念のため，<code>ls /data/system/tslib/pointercal</code> などしてキャリブレーションデータが作成されていることを確認します．</li>
<li>止めた順番と逆順で，<code>start surfaceflinger</code> <code>start bootanim</code> <code>start zygote</code> として，zygote サービスを再開します．</li>
</ol>


<h2>補足</h2>

<p>仮想コンソールがサポートされている場合，上記2の手順で，Alt+F1 などで移動し，作業することもできます．
その場合，ts_calibrate を実行する際に必要なのは zygote サービスの停止だけです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OneBox リリースしました．]]></title>
    <link href="http://www.monaka.org//blog/2013/05/14/onebox-tools/"/>
    <updated>2013-05-14T16:41:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/05/14/onebox-tools</id>
    <content type="html"><![CDATA[<p>ざっくりいうと，non-rooted な Android 端末で，コマンドラインツールを使える幸せな環境を得る方法，です．</p>

<!-- more -->


<p>Androidを使っていると，せっかくLinuxなのだからコマンドラインツールを使わせろ，という気分にしばしばなります．
そういう人は，大抵 rooted な端末にして使ったりします．</p>

<p>しかし，Playストアからダウンロードしたものでもマルウェアに当たるような状況で，rooted にするのは，リスクが低いかというと，腕組みしてしまいます．
いやいやリスク管理できてるから，というは，それはそれでよいわけですけれども．</p>

<p>BYOD なんていうキーワードも踊る昨今，そうでなくてもスマホなんて個人情報の束なわけです．
rooted な端末と非 rooted な端末の2台持ちで解決するのですが，何のために端末が小型になったのか，本末転倒な雰囲気がそこはかとなく，します．え? しません???</p>

<p>同様のことを考えている人はどうやら少なくないようで，busybox を追加で入れている人もいるようです．
でも，パス環境変数の問題とか，いろいろ苦労も多いです．
かつての私がそうでした．</p>

<p>広く世界を見渡すと，<a href="http://kevinboone.net/kbox2.html">kbox2</a> というツールプロジェクトがあります．
ファイルパス周りに関して，Cygwin や MSYS のようなトリックを加えて，種々の問題を解決しようとしています．
このアプローチには副作用も無くもないのですが，まあ，あらゆるモノゴトはトレードオフの問題ですから．</p>

<p>kbox2 は，なかなか良くできているのですが，インストールに一手間かかります．
Android端末エミュレータ (jackpal.androidterm) に依存しているので，環境の保守維持も手間です．</p>

<p>こういう手の煩雑さは，ツールで解決するのがスジです．
…というわけで，GUIツールをいくつか作りました．</p>

<p>細かいことは，<a href="http://www.monami-ya.jp/onebox-tools">会社のWebサイトに製品紹介があります</a>ので，そちらをご参照ください．
無償のものだけで環境構築は楽になりますが，315円支払うともっと楽になりますよ，という感じです．
苦労してでも無償で済ませたいという気持ちは良く解りますので．
私がそうですから．</p>

<p>今回リリースしたパッケージマネージャでは，kbox2 のベースシステムがインストールできる程度の機能しかありません．
あとは手動で整備して頂くことになります．
当然，これが完成のはずはありません．
「パッケージマネージャ」と名付けたからには，各種のdebパッケージを管理できるようにします．
そうしないと，困るからです，私が．</p>

<p>会社の製品にしているのに，こう言うのは宜しくないのですが，この製品は，儲ける目的で作っていません．
315円は，今後パッケージが増えてきたときのS3ストレージ代に消えるはずです．
完全に，&#8221;俺得&#8221;なソフトウェアです．
なので，たぶん同じ悩みをお持ちの方には，ジャストフィットするかなと思ったりしています．</p>

<p>ジャストフィットしないときは，無償/オープンソースで公開されている部分について，是非 <a href="https://bitbucket.org/onebox/oneboxpackagemanager/pull-requests">pull request を投げ</a>てください．
検討します．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソフトウェア作家とは何か．]]></title>
    <link href="http://www.monaka.org//blog/2013/05/09/what-is-software-creator/"/>
    <updated>2013-05-09T10:47:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/05/09/what-is-software-creator</id>
    <content type="html"><![CDATA[<h2>オレオレ定義</h2>

<blockquote class="twitter-tweet" lang="ja"><p>専門を持たず，必要とあらばカーネルからコンパイラから果てはハードウェアまで，あらゆるものを組み合わせ，独自の世界観を込めつつ，特定用途のために供する．アテクシによる，&#8221;ソフトウェア作家&#8221;の定義．</p>&mdash; もなかさん (@monamour555) <a href="https://twitter.com/monamour555/status/331615204184055808">2013年5月7日</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>こんなオレオレ定義に何の意味があるのかと問われると，実は，私もよく判りません．
まあ，誰かと意見すれ違ったときに，「ああ，あいつはこんなふうに定義しているのか」みたいな，ある種のアリバイかもしれませんね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launchpad PPA 登録の罠]]></title>
    <link href="http://www.monaka.org//blog/2013/05/05/launchpad-ppa/"/>
    <updated>2013-05-05T13:08:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/05/05/launchpad-ppa</id>
    <content type="html"><![CDATA[<p>Ubuntu にオレオレパッケージを追加する PPA．
発想は素晴らしいのですがが，そのホスティングをしている Launchpad の UI のおかげで悩みまくりました．
断続的ではありますが，カレンダー上は数ヶ月に渡り悩んだ感じです．</p>

<blockquote class="twitter-tweet" lang="ja"><p>Launchpadへ投げたPPAのソースコードがAcceptされた後は，一気に視界が開けるんだな．たぶん大半は取っ掛かりも掴めないまま脱落し，視界が開けた人は，喉もの過ぎれば，ってやつでブログに残さない．…私もたぶんブログに残さない．(汗</p>&mdash; もなかさん (@monamour555) <a href="https://twitter.com/monamour555/status/330681120582688768">2013年5月4日</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とは書いたものの，それではあんまりなので，視界が開ける直前にどんなミスをしたのかを書いておきます．</p>

<!-- more -->


<h2>CoC で署名した鍵でchangesを署名したか，しつこく確認</h2>

<p>当たり前?
そう，当たり前です．
CoC で署名したものと違う鍵で署名した changes が通用するのなら，なんのためにCoCで署名したのか解りません．</p>

<p>私は，個人の鍵でCoCに署名し，会社の鍵でchangesに署名していました．
これは，私のミス．</p>

<p>ここで，Launchpad の恐ろしいところに，私は直面しました．
このような，鍵の不一致を伴うアップロードに対して，Launchpad は，ダンマリ無視を決め込むようなのです．
個人の鍵にあるメールアドレスにも，会社の鍵にあるメールアドレスにも，メールを返しません．
(少なくとも私の場合は，何度試しても，帰ってきませんでした)
dput時にも，それらしいことを言って来ません．
Webインタフェースにも反応はありません．</p>

<p>Accepted になった場合でも，ビルドは数時間から，混み合っているときは2日かかるという情報もweb上にはあります．
何かがおかしいということに気づくまで，2日待つ必要があります．
慣れている人は，途中で勘が働くでしょう．
しかし，右も左も判らない状態でのダンマリは，非常に辛いものです．</p>

<p>github + Travis にみんな流れるわけだよ…と，痛感しました．</p>

<h2>視界が開けたあと</h2>

<p>一度，Accept なり Reject なりのメールが返ってくるようになると，一気に視界が開けます．
残念ながら，解説文書の多くが英文です．
しかし，技術者ならかろうじて理解できる程度の記述量と表記です．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[よくわからない最適化，つづき]]></title>
    <link href="http://www.monaka.org//blog/2013/05/04/dirty-optimize/"/>
    <updated>2013-05-04T09:10:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/05/04/dirty-optimize</id>
    <content type="html"><![CDATA[<p><em>当ブログの読者層には居なさそうな，将来，ソフトウェアエンジニアを志している方々に向けて．</em></p>

<p>昨日のエントリに関連して，ネタ元のshi3z氏と若干のやりとりがあったので，<a href="http://togetter.com/li/497402">togetter に纏めておきました</a>．</p>

<!-- more -->




<blockquote class="twitter-tweet" lang="ja"><p>「奇をてらわずに真っ当に書いて，処理系に判ってもらいやすくする」と「処理系にゴマ擦るコードでその場しのぎの速さを得る」とは根本的に違うんだよね…．プロは後者もこなすけれど，後ろめたさを忘れたら，それは危ないサイン．手動最適化で，デグレードが起きはじめたら破綻のサイン．</p>&mdash; もなかさん (@monamour555) <a href="https://twitter.com/monamour555/status/330200605069037568">2013年5月3日</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>踏まえておくべき大事なことは，限られたハードウェア資源や時間の中で，処理系にゴマする最適化が必要な時もあるということ．
さらに踏み込むと，必要に応じて処理系に対してゴマを擦るための十分な知識を蓄えている必要がプロには求められるということです．
彼はプロですし，製品出荷前の限られた時間の中で成果を出さなければいけない，という状況下にあります．
私も一応プロですので，大変さは共有できます．
私も，綺麗に書くのが最善だと言いつつ，現場では，JavaやCを捨てて，アセンブラで解決することもあります．</p>

<p>それでも，これらのノウハウは，最終手段と断言します．
建前ではなく，本音で．
コンパイラや演算器の能力が上がった現代では，不要になったノウハウもあります．</p>

<p>手動最適化は，どこか魔術的です．
憧れるのは解ります．
でも，魔術は，ここ一番の場面で使うからこそ映えるのです．</p>

<p>…プロは，とくに天才は，魔術を縦横無尽に使えるので，忘れるんですよね…．
手動最適化に関する記事をみかけて，ときどき「うわぁ」と思うわけです．
量産型エンジニアの私は．</p>

<h2>ジレンマ</h2>

<p>どこかの時点で手動最適化を行ったことがなければ，非常時にも用いることができない，というジレンマもあります．
「おまえはドコで，その手動最適化の手法を覚えたのだ? 現場だろ?」と言われると，言葉に詰まったりはします．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[よくわからない最適化]]></title>
    <link href="http://www.monaka.org//blog/2013/05/03/optimizer-in-c/"/>
    <updated>2013-05-03T10:05:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/05/03/optimizer-in-c</id>
    <content type="html"><![CDATA[<p>(2013-05-03 21:57 JST : ソースコードの誤記修正)</p>

<h2>話のマクラ</h2>

<p>新製品リリース前でプログラマーズハイになっておられるらしい shi3z 氏が，イカしたエントリを挙げておられる．</p>

<blockquote><p>ついに僕もソースコードを確認しないと気が済まなくなりました。本当にちゃんと最適化してるのか、自分の目と頭とで確認しています。</p>

<p><a href="http://d.hatena.ne.jp/shi3z/20130502/1367490202">よくわかる最適化 &ndash; UEI shi3zの日記</a></p></blockquote>

<p>をを! 社長自ら！ すごい！</p>

<blockquote><p>この関数は、一見すると無駄がないように見えますが、実は無駄の塊です。
たとえばコンピュータは割り算が苦手です。なのに二回も割り算をやっています。
割り算よりは掛け算(乗算)の方が圧倒的に速い(下手すると10～100倍くらい?)ので、まず割り算をしている部分を2.0の逆数の乗算に変更します。</p>

<p><a href="http://d.hatena.ne.jp/shi3z/20130502/1367490202">よくわかる最適化 &ndash; UEI shi3zの日記</a></p></blockquote>

<p>最近，トシのせいかすぐに感涙してしまう私は，感化されて，つい除算を積算に変えてみてベンチマークを取ってみました．
ですが，手元のOSXではJITをoffにしても除算と積算で有意な差は出ませんでした．</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class A {
</span><span class='line'>  float div(float b) {
</span><span class='line'>      return b / 12345678902.0f;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  float mul(float b) {
</span><span class='line'>      return b * 12345678902.0f;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public static void main(String[] s) {
</span><span class='line'>      A a = new A();
</span><span class='line'>//        for (long i = 0; i &lt; 100; i++) {
</span><span class='line'>      for (long j = 0; j &lt; 100000000; j++) {
</span><span class='line'>          a.div((float)Math.random());
</span><span class='line'>}//}
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Math.random()が重いんじゃないの?」と思って，定数にしたり変数にしたりいろいろやりました．
手元環境では，思いつく全ての例において有意な差は出せませんでした．</p>

<p>まあ，FPU の性能など効いてきますので，どの環境でも有意な差が出ないとは申しません．
しかし，このレベルまで最適化したければ，JNI 介してC/C++ でやったほうがよいのではないの?
という気がそこはかとなくするわけです．
「JNI のオーバヘッドがー」という残念な結果に終わる可能性も無きにしもあらずなわけではありますが．</p>

<h2>徐々に本題</h2>

<blockquote><p>こういう数式展開レベルの最適化は、どれだけコンパイラが賢くなってもまだまだやってもらえません。</p>

<p><a href="http://d.hatena.ne.jp/shi3z/20130502/1367490202">よくわかる最適化 &ndash; UEI shi3zの日記</a></p></blockquote>

<p>ホントでしょうか．
まあ，数式の変形を縦横無尽に行うというのは，Metematica など極めて限られた，それこそ数式処理のみを対象とするような人のツールでないと無理です．
でも，除算を積算に置き換えたり，定数が絡んで結果があからさまなものを省くなんていうのは，どのようなコンパイラでも考える局所最適化の基礎的テクニックです．</p>

<p>確かに Oracle の javac では，float 型の定数除算から，そのまま除算命令(バイトコード)に落としています．
他言語では，mruby の mrbc も同様でした．
それは，コンパイラが馬鹿だからでしょうか．
…まあ，たまにそういう時もあります．</p>

<p>しかし，置き換えても意味が無いので置き換えてない可能性もあります．
実際，上記のベンチマークだけで判断するのであれば，除算から積算への変換は無駄な努力なわけです．
コンパイラが馬鹿なのか，プログラマが馬鹿なのかは，常にベンチマークにより客観的に判断される必要がありますね，と．</p>

<p>高速度カメラまで持ち込んでおられる shi3z 氏は，当然そのことについて意識しておられるわけですが．
「プログラマに成りたいんです!」と目をキラキラしている未来ある読者さんがたは，勘違いするよなぁコレ…と．</p>

<h2>本題，またはボツ原稿の公表</h2>

<p>ワタクシゴトですが，先日，ちょいとした経緯で，最適化に関する原稿が結果的にボツになりまして．
主にC言語周りなのですが，このへんはコンパイラ一般で言えることなので，紹介しておきます．</p>

<p>「一所懸命にループ内の関数呼び出しを手で最適化しても無駄ですよ，コンパイラが善きに計らいますよ」というネタです．
ここには書いていませんが，ループ中の冗長な部分は外に出す最適化もかかります．
…なんてことを考えると，「JNIの呼び出しオーバヘッドがー」みたいな話も帳消しになるかもしれなかったりします．</p>

<h3>インライン最適化による変数の蒸発</h3>

<p>(前略)
もう一つの例も，蒸発に関するものです．
ただし，この蒸発は，volatile の例とは異なり，バグの元にはなりません．
しかし，ときどき，デバッグを困難にします．</p>

<p>次のコードはは，別段バグが無さそうですし，実際に期待通りに動きます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>busy_loop(int end)
</span><span class='line'>{
</span><span class='line'>  volatile int i;
</span><span class='line'>
</span><span class='line'>  for (i = 0; i &lt; end; i++) { }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 10;
</span><span class='line'>
</span><span class='line'>  busy_loop(a);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これをgccで最適化を有効にしてコンパイルし，GDBデバッガで追跡することにします．</p>

<p>まず，main 文にブレイクポイントを貼り，実行します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) b main
</span><span class='line'>Breakpoint 1 at 0x100000ed4: file test.c, line 17.
</span><span class='line'>(gdb) run</span></code></pre></td></tr></table></div></figure>


<p>実行開始後，すぐに停止します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting program: a.out
</span><span class='line'>Reading symbols for shared libraries +. done
</span><span class='line'>
</span><span class='line'>Breakpoint 1, main () at test.c:17
</span><span class='line'>17          busy_loop(a);</span></code></pre></td></tr></table></div></figure>


<p>ここで，変数 a の値を表示してみます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) print a
</span><span class='line'>Unable to access variable "a"
</span><span class='line'>$1 = &lt;variable optimized away by compiler&gt;
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>「変数 a にアクセスできない」と言われてしまいました．
でも変数 a は，確かに存在するはずです．
さらに見ると「変数は最適化により消えた」とあります．</p>

<p>この不思議を追跡するべく，コンパイル結果のアセンブリ言語出力を見てみましょう．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>busy_loop:
</span><span class='line'>  sub sp, sp, #8
</span><span class='line'>  mov r3, #0
</span><span class='line'>  str r3, [sp, #4]
</span><span class='line'>  ldr r3, [sp, #4]
</span><span class='line'>  cmp r0, r3
</span><span class='line'>  ble .L1
</span><span class='line'>.L4:
</span><span class='line'>  ldr r3, [sp, #4]
</span><span class='line'>  add r3, r3, #1
</span><span class='line'>  str r3, [sp, #4]
</span><span class='line'>  ldr r3, [sp, #4]
</span><span class='line'>  cmp r3, r0
</span><span class='line'>  blt .L4
</span><span class='line'>.L1:
</span><span class='line'>  add sp, sp, #8
</span><span class='line'>  bx  lr
</span><span class='line'>main:
</span><span class='line'>  sub sp, sp, #8
</span><span class='line'>  mov r3, #0
</span><span class='line'>  str r3, [sp, #4]
</span><span class='line'>  ldr r3, [sp, #4]
</span><span class='line'>  cmp r3, #9
</span><span class='line'>  bgt .L10
</span><span class='line'>.L11:
</span><span class='line'>  ldr r3, [sp, #4]
</span><span class='line'>  add r3, r3, #1
</span><span class='line'>  str r3, [sp, #4]
</span><span class='line'>  ldr r3, [sp, #4]
</span><span class='line'>  cmp r3, #9
</span><span class='line'>  ble .L11
</span><span class='line'>.L10:
</span><span class='line'>  add sp, sp, #8
</span><span class='line'>  bx  lr</span></code></pre></td></tr></table></div></figure>


<p>じっくり眺めてみてください．busy_loop からの数行と main からの数行が極めて似通っています．</p>

<p>コンパイラの中では，巧妙なことが起こっていました．
コンパイラは， main 関数から busy_loop 関数を呼び出すよりも，main 関数の中に busy_loop 関数の中身を展開してしまったほうが，処理が速いコードになると判断したようです．
つまり 次に示すリストと勝手に書き換えています．
このように書き換えても，動作は変わりません．
関数呼び出しのオーバヘッドが減る分だけ，処理速度も向上するはずです．
しかし，変数 a は何処かに消えてしまいました．
コンパイラは，変数 a が存在していた事実をデバッグシンボルに仕込みます．
そのため，デバッガは，変数 a がソースコード上に存在したことは認識できます．
しかし，値を示せと言われても，デバッガは示しようがありません．
アセンブリコードには，変数 a に相当するコードが存在しないからです．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>busy_loop(int end)
</span><span class='line'>{
</span><span class='line'>  volatile int i;
</span><span class='line'>
</span><span class='line'>  for (i = 0; i &lt; end; i++) { }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  volatile int i;
</span><span class='line'>
</span><span class='line'>  for (i = 0; i &lt; 10; i++) { }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>(後略)
てな感じの記事だったのでした．</p>

<h2>まとめ</h2>

<p>天才って，枠のなかで頑張ろうとするのですよね．
その姿に，量産型凡人エンジニアの私はシビレてしまいます．</p>

<p>しかし，私だったら，スプライン関数の局所最適化ではなく，コンパイラへのhackを先にやるでしょうなぁ．
JIT含めて．</p>

<p>自分以外もアプリ作る製品開発では，コンパイラに手をつけたほうが効率的ですから．
自分以外が自分の能力よりも下ならば，とくに．</p>

<p>「コンパイラって難しくて手がでないよ」という未来の天才プログラマの皆様にあられましては，mruby という，格好の教材があります．
ご興味のおありのかたはどうぞ． <a href="http://github.com/mruby/mruby/">http://github.com/mruby/mruby/</a></p>

<h3>蛇足</h3>

<p>上記で紹介した最適化にまつわる記事って，電子書籍とかで出して，需要あるかしら?
3万文字以上の解説記事が，行き先無く浮いちゃっているのですよね…．(汗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress に乗り換えた]]></title>
    <link href="http://www.monaka.org//blog/2013/04/25/octopress/"/>
    <updated>2013-04-25T03:26:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/04/25/octopress</id>
    <content type="html"><![CDATA[<p>いつでもどこでもPCを持ち歩くので，ブラウザインタフェースは要らないし．
静的なブログのほうが，何かと管理が楽だなぁということで．
Octopress に乗り換え．
Lokkaも，大満足というわけでもないものの，悪くはない．
ので，会社の代表ページなどでは引き続き使う予定．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nexus Oneがブート時再起動を繰り返す…．]]></title>
    <link href="http://www.monaka.org//blog/2013/02/26/reboot/"/>
    <updated>2013-02-26T11:29:00+09:00</updated>
    <id>http://www.monaka.org//blog/2013/02/26/reboot</id>
    <content type="html"><![CDATA[<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E/dalvikvm-heap(  391): Out of memory on a 64-byte allocation.
</span><span class='line'>I/dalvikvm(  391): "ActivityManager" prio=5 tid=9 RUNNABLE
</span><span class='line'>I/dalvikvm(  391):   | group="main" sCount=0 dsCount=0 obj=0x405186a8 self=0x2d5f50
</span><span class='line'>I/dalvikvm(  391):   | sysTid=410 nice=-2 sched=0/0 cgrp=default handle=2979456
</span><span class='line'>I/dalvikvm(  391):   | schedstat=( 5564208967 1987365742 7625 )
</span><span class='line'>I/dalvikvm(  391):   at java.lang.Throwable.nativeFillInStackTrace(Native Method)
</span><span class='line'>I/dalvikvm(  391):   at java.lang.Throwable.fillInStackTrace(Throwable.java:135)
</span><span class='line'>I/dalvikvm(  391):   at java.lang.Throwable.&lt;init&gt;(Throwable.java:74)
</span><span class='line'>I/dalvikvm(  391):   at java.lang.Error.&lt;init&gt;(Error.java:38)
</span><span class='line'>I/dalvikvm(  391):   at java.lang.VirtualMachineError.&lt;init&gt;(VirtualMachineError.java:36)
</span><span class='line'>I/dalvikvm(  391):   at java.lang.OutOfMemoryError.&lt;init&gt;(OutOfMemoryError.java:34)
</span><span class='line'>I/dalvikvm(  391):   at com.android.internal.os.BatteryStatsImpl.readHistory(BatteryStatsImpl.java:-1)
</span><span class='line'>I/dalvikvm(  391):   at com.android.internal.os.BatteryStatsImpl.readSummaryFromParcel(BatteryStatsImpl.java:4746)
</span><span class='line'>I/dalvikvm(  391):   at com.android.internal.os.BatteryStatsImpl.readLocked(BatteryStatsImpl.java:4693)
</span><span class='line'>I/dalvikvm(  391):   at com.android.server.am.ActivityManagerService.&lt;init&gt;(ActivityManagerService.java:1413)
</span><span class='line'>I/dalvikvm(  391):   at com.android.server.am.ActivityManagerService.&lt;init&gt;(ActivityManagerService.java:142)
</span><span class='line'>I/dalvikvm(  391):   at com.android.server.am.ActivityManagerService$AThread.run(ActivityManagerService.java:1320)
</span><span class='line'>I/dalvikvm(  391): 
</span><span class='line'>W/dalvikvm(  391): Exception thrown (Ljava/lang/OutOfMemoryError;) while throwing internal exception (Ljava/lang/OutOfMemoryError;)
</span><span class='line'>W/dalvikvm(  391): threadid=9: thread exiting with uncaught exception (group=0x40015560)
</span><span class='line'>I/dalvikvm-heap(  391): Clamp target GC heap from 34.030MB to 32.000MB
</span><span class='line'>D/dalvikvm(  391): GC_CONCURRENT freed 0K, 8% free 28720K/31175K, external 1625K/2137K, paused 1ms+4ms
</span><span class='line'>I/dalvikvm-heap(  391): Clamp target GC heap from 34.022MB to 32.000MB
</span><span class='line'>D/dalvikvm(  391): GC_FOR_MALLOC freed 8K, 8% free 28711K/31175K, external 1625K/2137K, paused 197ms
</span><span class='line'>I/dalvikvm-heap(  391): Clamp target GC heap from 32.022MB to 32.000MB
</span><span class='line'>I/dalvikvm-heap(  391): Grow heap (frag case) to 32.000MB for 8-byte allocation
</span><span class='line'>I/dalvikvm-heap(  391): Clamp target GC heap from 34.022MB to 32.000MB
</span><span class='line'>D/dalvikvm(  391): GC_FOR_MALLOC freed 0K, 8% free 28711K/31175K, external 1625K/2137K, paused 197ms
</span><span class='line'>I/dalvikvm-heap(  391): Clamp target GC heap from 32.022MB to 32.000MB
</span><span class='line'>I/dalvikvm-heap(  391): Grow heap (frag case) to 32.000MB for 20-byte allocation
</span><span class='line'>D/dalvikvm(  391): GC_CONCURRENT freed 25997K, 92% free 2714K/31175K, external 1625K/2137K, paused 2ms+5ms
</span><span class='line'>I/Process (  391): Sending signal. PID: 391 SIG: 9
</span><span class='line'>E/AndroidRuntime(  391): *** FATAL EXCEPTION IN SYSTEM PROCESS: ActivityManager
</span><span class='line'>E/AndroidRuntime(  391): java.lang.OutOfMemoryError: [memory exhausted]
</span><span class='line'>E/AndroidRuntime(  391):  at dalvik.system.NativeStart.main(Native Method)
</span><span class='line'>E/AndroidRuntime(  391): Error reporting crash
</span><span class='line'>E/AndroidRuntime(  391): java.lang.NullPointerException
</span><span class='line'>E/AndroidRuntime(  391):  at com.android.internal.os.RuntimeInit$UncaughtHandler.uncaughtException(RuntimeInit.java:76)
</span><span class='line'>E/AndroidRuntime(  391):  at java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:854)
</span><span class='line'>E/AndroidRuntime(  391):  at java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:851)
</span><span class='line'>D/BootAnimation(  404): SurfaceFlinger died, exiting...
</span><span class='line'>I/ServiceManager(   61): service 'SurfaceFlinger' died
</span><span class='line'>I/ServiceManager(   61): service 'sensorservice' died
</span><span class='line'>I/ServiceManager(   61): service 'entropy' died
</span><span class='line'>I/ServiceManager(   61): service 'power' died
</span><span class='line'>I/Zygote  (  384): Exit zygote because system server (391) has terminated
</span><span class='line'>I/ServiceManager(   61): service 'media.audio_flinger' died
</span><span class='line'>I/ServiceManager(   61): service 'media.player' died
</span><span class='line'>I/ServiceManager(   61): service 'media.camera' died
</span><span class='line'>I/ServiceManager(   61): service 'media.audio_policy' died
</span><span class='line'>I/Netd    (  412): Netd 1.0 starting
</span><span class='line'>D/AndroidRuntime(  413): 
</span><span class='line'>D/AndroidRuntime(  413): &gt;&gt;&gt;&gt;&gt;&gt; AndroidRuntime START com.android.internal.os.ZygoteInit &lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></td></tr></table></div></figure>


<p>似た症例は，ググったら，<a href="http://forum.xda-developers.com/showthread.php?t=1304323">すぐに見つかった</a>．けれど答えなし．うむー．</p>

<p>adb uninstall しようにも，PackageManager が立ち上がっていないときた．うむー．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Emacs で日本語を入力する]]></title>
    <link href="http://www.monaka.org//blog/2012/12/24/android-emacs/"/>
    <updated>2012-12-24T10:20:00+09:00</updated>
    <id>http://www.monaka.org//blog/2012/12/24/android-emacs</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/33717384/device-2012-12-24-101918.png" alt="日本語入力中" /></p>

<p>Android Emacs で，日本語の入出力をする tips．</p>

<!-- more -->


<h1>背景</h1>

<p>本エントリ執筆時点では，非rootの Android で Emacs を動作させる最も簡単な方法は，Google Play に上がっている<a href="https://play.google.com/store/apps/details?id=com.zielm.emacs">このアプリケーション(Zeim版)</a>を使う方法である．</p>

<p>しかし，単に導入しただけでは，日本語の入力ができず，表示で文字化けする．
入力は，頑張って SKK を入れればなんとかなるような気もするが，表示は困る．</p>

<h1>注意</h1>

<p>私は独自環境の構築中で，もしかすると Zeim版では何らかの理由で上手くいかないかもしれない．(でもたぶん大丈夫だと思う)</p>

<p>また，Zeim版は，<a href="https://play.google.com/store/apps/details?id=jackpal.androidterm">Android Terminal</a>の改変バージョンを端末エミュレータとして使っている．
よってAndroid Terminal を使ってリモートログインし，Emacs を使うという場面でも，本エントリは役に立つのかもしれない．</p>

<p>ちなみに，私の環境のソースコードは，GitHubに置いてある．</p>

<ul>
<li><a href="https://github.com/monaka/emacs-android">https://github.com/monaka/emacs-android</a></li>
<li><a href="https://github.com/monaka/emacs-android-app">https://github.com/monaka/emacs-android-app</a></li>
</ul>


<h1>手段</h1>

<p>まず，端末側で UTF-8 を扱えるようにする必要がある．
メニューから[設定] &ndash; [Default to UTF-8] のチェックボックスをonにする．</p>

<p>続いて，Emacs 側の設定．
~/.emacs.d/init.el を開き(無ければ作り)，最低限下記の通り設定する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(set-keyboard-coding-system 'utf-8)
</span><span class='line'>(set-terminal-coding-system 'utf-8)</span></code></pre></td></tr></table></div></figure>


<p>set-terminal-coding-system の設定で表示を，set-keyboard-coding-system で入力をそれぞれ設定している．
これで，入力はできる．</p>

<p>加えて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(set-language-environment 'utf-8)
</span><span class='line'>(set-default-coding-system 'utf-8)
</span><span class='line'>(prefer-coding-system 'utf-8)</span></code></pre></td></tr></table></div></figure>


<p>辺りも設定したほうがよいかも．
set-default-coding-system だけで済むような気がするのだけれど，set-keyboard-coding-system と set-terminal-coding-system は，別途明示的に設定しないとダメっぽい．</p>

<p>あとは，メニューから [ソフトキーボード] を選択して，ご愛用のIMEを表示し，お好きなように．</p>

<h1>(ワタクシ的には)要検討課題</h1>

<p>IMEによっては，Ctrl を吸ってしまい，Emacs (というか端末エミュレータ)に渡してくれないものがあるっぽい．少なくとも Google 日本語入力は，その疑いが濃厚．
だから，だーーーっと日本語ベタ打ちするならあまり気にならないけれど，日本語を入力しつつ編集をしようと思うとストレスが溜まるかも．</p>

<p>AndroidだとIMEが吸う前のキーストロークをフックするのは困難な気がする．ワタクシ的には要調査．</p>

<p>SKK 使えばこの課題は解消されるだろうと思うけれど．もうちょっと汎用的な解は無いものか…．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[やっちまった]]></title>
    <link href="http://www.monaka.org//blog/2012/10/30/did-it/"/>
    <updated>2012-10-30T10:28:00+09:00</updated>
    <id>http://www.monaka.org//blog/2012/10/30/did-it</id>
    <content type="html"><![CDATA[<p>某ネット銀行は，ネットバンキングに入るためにログインパスワードが要る．
ログインパスワードを忘れた場合は，振込み等の時に使う web取引パスワードでリセットできる．
両方忘れた場合は，申し込むと，仮パスワードを転送不要郵便で送ってくれる．</p>

<p>素晴らしいセーフティネットなのだが，その全ての網をくぐり抜けて落下してしまった．
バカすぎる．</p>

<p>で，お手紙書いた．</p>

<blockquote><p>Webログインパスワードとweb取引パスワードの両方を忘れてしまいました．
その状態で，先日転居を行いました．</p>

<p>仮パスワードを郵送して頂けることは解っているのですが，転居しているので転送不要郵便を受け取れません．
住所変更は，webログインパスワードが必要と認識しています．
この場合，どのように手続きすればよいでしょうか．</p></blockquote>

<p>本人の名誉のために言い訳しておくと，別に忘れたわけではなくて，Keypass で自動生成したパスワードを，セーブするのを忘れただけ．言い訳になっていない．</p>
]]></content>
  </entry>
  
</feed>
