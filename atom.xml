<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2016-01-03T08:34:45+00:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[なぜ日本の「中堅IT企業」は優秀なプログラマを囲いきれないのか (3)]]></title>
    <link href="http://www.monaka.org/blog/2016/01/03/mismatch-3/"/>
    <updated>2016-01-03T06:36:08+00:00</updated>
    <id>http://www.monaka.org/blog/2016/01/03/mismatch-3</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2016/01/03/mismatch-1/">(1)</a> <a href="http://www.monaka.org/blog/2016/01/03/mismatch-2/">(2)</a></p>

<h1>&ldquo;デキる&#8221;中堅IT経営層と4桁(年収)プログラマとの齟齬</h1>

<p>&ldquo;デキる&#8221;中堅IT経営層は、日本には少なからず居る。
ここでいう&#8221;デキる&#8221;とは、技術に夢を持ち、資金調達の能力をもち、潰さず500名規模まで伸ばせる人材の層を指す。
同時に &#8220;デキる&#8221;プログラマも、日本には少なからず居る。</p>

<p>しかし、両者にはミスマッチがある。
両者とも、実績を積んだのは事実であり、生産性を高めた結果として地位なり収入なりを得ている。
そこには両者なりの合理性がある。</p>

<p>日本の中堅IT経営層は、多段下請構造に自らを最適化することによって自社を潰さず伸ばしていった。
日本の産業構造が求めた結果であり、彼らに求められるのは会社を続け雇用を確保することなのだから、彼らの行動は合理的である。</p>

<p>結果として、日本の中堅IT経営層の多くが考えるリソースとは、&#8221;人財&#8221;となる。
よって、企業の拡大局面においては、ヒューマンリソースが現場に投入されがちである。</p>

<p>不思議なもので、彼らの少なからずは「人月の神話」を読んでいる。
特に CTO やそれに準じる職位にあっては、読んだことがないという事例は(私が知る限り)一例もない。</p>

<p>一方、プログラマにとっては、高い生産性を求められるほど、コンピューティングリソースが必要になる。
言い換えると、コンピューティングリソースが与えられないプログラマは、その潜在能力と報酬が高ければ高いほど、&#8221;穀潰し&#8221;でしかなくなる。
よって、企業の拡大局面において、&#8221;デキる&#8221;プログラマが現場の投入を望むのは、&#8221;サーバ群&#8221;である。</p>

<p>乱読傾向にある彼らの少なからずもまた、「人月の神話」を読んでいる。
「拡大局面において無計画に&#8221;人材&#8221;を投入するのは無能な管理者の行いだ」ということを、自らの体験と重ねあわせて解釈している。</p>

<p>&ldquo;人財&#8221;と&#8221;サーバ群&#8221;。これがそれぞれ&#8221;デキる&#8221;層だったとしても乗り越えることが難しい<strong>ほぼ唯一</strong>のミスマッチと、私は考える。</p>

<h1>予算執行権と既決感</h1>

<!-- more -->


<p>そして、一般論として、技術専門職には予算執行権が十分に与えられない。
私が見聞きしたケースを元に最悪に近いケースを作ると、こんなストーリが作れる。
現実に起きたものを組み合わせたものだが、事例を特定できない程度には脚色している。
(もしこんなことがストレートに起きたのだとしたら、関連する全員にとって不幸以外の言葉がないだろう)</p>

<ol>
<li>プロジェクト開始時に予算が少なかったし、社内システムはグダグダだったので、i3コア/4GB RAM/500GB HDDのデスクトップでビルドツールベルトを構築した。</li>
<li>能力は買われていて、アーキテクチャの全てを彼は作成した。</li>
<li>数年後、社運を左右するプロジェクトにまで成長したので、サーバ増強を経営層に直訴した。</li>
<li>のらりくらりされ、妥協の末の 7800円のポータブル HDD さえも購入稟議が通らなさそうだった。</li>
<li>その割に外部からの&#8221;人財&#8221;が続々投入され、コミュニケーションコストで仕事にならない。</li>
<li>ある日、ディスククラッシュした。データはサルベージできたが、プログラマはプロジェクトに見切りをつけた。</li>
</ol>


<p>プログラマはロジカルであろうとする傾向があるので、見切りをつける合理的な理由を与えてしまうと概ね手遅れである。
たった 7800 円のケチで、見切りをつけられてしまう。</p>

<p>年商 50 億の企業で、大げさだとしても社運という言葉が出るなら数億からの商いだろう。
「プログラマのほうもちょっとそこは大人になれよ…」など思わなくもないのだが、まあ、プログラマ界隈で、経営層を擁護する意見は少数派だろう。
読者の中にも、それぞれの職場で「7800 円の高すぎるケチ」を見たプログラマも居るだろう。</p>

<p>そして、経営層がこの作り話を聞いたならば、「まったく勝手な話だ」と憤慨するだろうとも思う。
なぜならば、プログラマに対して、彼らが最も大事であると考える &ldquo;人財&rdquo; というリソース提供をしていたから。
彼らは彼らの仕事を全うしていたわけである。「なのにあのプログラマときたら」てな塩梅であろう。</p>

<p>もしかしたら、技術に明るければ明るいだけ、理解が難しくなるかもしれない。
技術を解っているというのと、コンピューティングリソースを使いこなせるというのは、微妙にスキルセットが違うものだ。</p>

<p>両方の立場がわからなくもない私には、なんとも勿体無い話だと思えるのだが。
こんな光景はおそらく日本の中堅IT企業では繰り返されているのだろうとも思う。
「ソフトウェアに国境なんて無い」とはいえ、せっかく、そこそこの規模のソフトウェア産業が立ち上がった日本である。
なんとかならないのだろうか。
国内のコミュニケーション不全でグダグダしているうちに壊滅するのを待つしか無いのだろうか。かつて隆盛を誇った家電業界のように。</p>

<h1>To be continued</h1>

<p>「じゃあどうすんのさ」について書いて、一連を閉じたい。
…のだけれども、一気に書いておなか空いたので、明日以降。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜ日本の「中堅IT企業」は優秀なプログラマを囲いきれないのか (2)]]></title>
    <link href="http://www.monaka.org/blog/2016/01/03/mismatch-2/"/>
    <updated>2016-01-03T06:35:57+00:00</updated>
    <id>http://www.monaka.org/blog/2016/01/03/mismatch-2</id>
    <content type="html"><![CDATA[<p>なぜ日本の「中堅IT企業」は優秀なプログラマを囲いきれないのか。
<a href="http://www.monaka.org/blog/2016/01/03/mismatch-1/">さきほど</a>は、本稿における「中堅IT企業」を定義し、その企業群が少なくとも統計資料やマスコミ発表資料では活発で伸びていることを紹介した。
その企業群で人手不足が解消されない。特に&#8221;デキる&#8221;&ldquo;人財&#8221;が来ないし定着しない。そのようなボヤキも紹介した。</p>

<p>今回は、なぜ定着しないのか、私見を書き散らしたい。
下記するのは、見聞きした事例から作り上げた「モデルケース」でしかない。
少なからずの「中堅IT企業」で程度の差こそあれ発生していると想像しているが、広範なケーススタディを行ったわけではない。
くれぐれもこの点には留意されたい。</p>

<p>前回述べたとおり、2つの要因を示唆する。</p>

<h1>マネジメント不全</h1>

<!-- more -->


<p>まず、ひとつ目の要因は、マネジメント不全。
これは、書店に行けば事例が山のように報告されているので、説明の必要は無いだろう。</p>

<p>たとえば、この記事で端的に語られるような&#8221;症候群&#8221;が、会社を覆ってしまう。</p>

<p><a href="http://business.nikkeibp.co.jp/atcl/skillup/15/283861/121800004/">http://business.nikkeibp.co.jp/atcl/skillup/15/283861/121800004/</a></p>

<p>ネットを活用して伸びた企業の例とはいえ、この記事の筆者は不動産業の経営者だ。
また、読者層が特定業種に依らない一般的なビジネスパーソンだ。
よって、この&#8221;症候群&#8221;は(少なくとも日本の)企業全般に見られる問題といえそうである。</p>

<p>おそらく、IT企業も例外ではないだろう。
今回は、概ね300〜500名程度の「中堅IT企業」を対象としているため、より&#8221;既決感症候群&#8221; に罹患しやすいかもしれない。</p>

<p>&ldquo;デキる&#8221;プログラマの多くは、程度の差はあれハッカー気質を持つ傾向があり、自らの手でハックできない物事をひどく嫌う。
<strong>&#8220;既決感&#8221;はハックを放棄した者がもつ感情</strong> であり、その感情を持つ組織に&#8221;デキる&#8221;プログラマが染まることは <strong>ほぼ在り得ない</strong>。
解っているプログラマ勢からすると「そら定着しませんわ」としか言いようのない話である。</p>

<h1>リソースの定義のズレ</h1>

<p>ふたつ目の要因は、ソフトウェアエンジニアリング系の会社に特有のものと言えるかもしれない。
(しかし、私はその職場環境を知らないので想像を域を出ないのだが、もしかしたら、CADを駆使するタイプのデザインスタジオなどでも類似のことはあるのかもしれない。)</p>

<h2>年収の壁とリソース</h2>

<p>本題に入る前に、少しだけ一般論に寄り道する。</p>

<p>企業には、年収の&#8221;壁&#8221;がある。
各企業の方針には依るが、大抵の日本企業の場合、役員と従業員との間に設定されている。
スタートアップの場合、これは割とお手盛りだったりする。
しかし「中堅IT企業」の場合は、明文化された給与報酬体系として人事や経理といった間接部門が管理している。</p>

<p>その壁は、地域・業種・景気により変動する。
2015 年、私が主戦場としている領域、自動車業界に関連する組込みシステムの開発を行う中堅企業が首都圏事業所での壁は、概ね年収1000万円らしい。
ちょうどキリがよいので、文面を簡単にするため、(年収)&ldquo;4桁の人&#8221;と&#8221;3桁の人&#8221;と呼ぶ。</p>

<p>3桁の人と4桁の人には、幾つかの違いがある。
しかし、キャリアポルノの本を書きたいわけではないので、細かいことは打ち捨てて、最大の違いにのみ言及する。</p>

<p>それは、リソースを活用する能力の有無である。</p>

<h2>IT業界における2つのリソース</h2>

<p>IT業界というのは不思議な業界である。
故スティーブ・ジョブズが&#8221;知の自転車&#8221;と呼ぶコンピュータをレバレッジとする知識集約的な産業であると同時に、&#8221;人月&#8221;という言葉に代表されるように労働集約的な産業構造を持つ。</p>

<p>言い換えると、IT業界で成果を上げるためのリソースは大別して2つある。コンピューティングリソースと、ヒューマンリソースである。
4桁の人になるためには、両方、最低限でも片方のリソースを駆使して利益に貢献する必要がある。</p>

<p>ここまでの話は、日本に限らない。
程度の差はあれインドだろうがカリフォルニアだろうが同じである。</p>

<h2>日本のIT産業の構造</h2>

<p>もう散々言い尽くされているので根拠をいちいち挙げないが、日本のIT産業は、多段下請構造により成り立っている。
言い換えると、ヒューマンリソースを上手く調達し活用した者が管理層として出世していく。
いわゆる「プログラマ○○年定年説」や「PG で下積みして SE に &ldquo;出世する&#8221;」といったキャリアパスも、ここに由来する。
メインフレームを象徴とする SIer で顕著だが、組込みシステムなど広い分野でも、同様の傾向がある。</p>

<p>つまり、取締役にまで出世した「中堅IT企業」のメンバは、そのキャリアパスの最初がエンジニアであろうとも、ヒューマンリソースの活用能力により4桁の人になっていく。
これは別に悪いことではない。
経営層と言うのは、企業を潰さないことが最低限の責務であり、雇用を拡大し社会に資するのが期待される職位だ。</p>

<h2>&ldquo;デキる&#8221;プログラマの生産性の源泉</h2>

<p>一方、&#8221;デキる&#8221;プログラマの少なからずにとって、生産性の源泉は、ヒューマンリソースの活用では無い。</p>

<p>むしろ、多くのプログラマはある種の古典的なオタクであり、対人交渉能力の高さは保証されない。
(少数ながら、社交性のある&#8221;デキる&#8221;プログラマも存在する。何事にも例外はある。)
彼らの生産性の源泉は、コンピューティングリソースの高度な活用にある。</p>

<p>3桁プログラマは、<strong>余剰な計算機資源を与えられても、それを使いこなすことができない</strong>。
32コアのCPUやPCIバス直結のSSDを与えられても、せいぜいExcel方眼紙で仕様を作る程度のことしかしない。
Excel方眼紙自身の善悪はとりあえず脇に置くとして、「豊富な計算機資源を与えるのは無駄だ」と経営層に見做されても仕方がない。
この辺りは、鶏と卵の問題ではあることは否定しないが。</p>

<p>一方、&#8221;デキる&#8221; 4桁プログラマは、<strong>計算機資源があればあるだけカイゼンのために使い切る</strong>。
CI サーバを立ち上げ、メトリクスコレクタを整備し品質管理し、ソースリポジトリと成果物リポジトリを分離し、チャットサーバを立ち上げ、チャットボットを投入する。
DBサーバを立て、Micro PaaS を立て、Excelデータベースは速成したRailsアプリに置き換えていく。</p>

<p>そうすることで、ヒューマンリソースが起こすエラーを可能なかぎり排除していく。
正しい意味での&#8221;ソフトウェア工場&#8221;を構築し、本人や所属したチームが、真に属人性が必要な、設計や開発に没頭しようとする。</p>

<p>特に、企業の戦略におけるチームの重要性が増していく局面の場合に、この傾向は顕著である。
コミュニケーションコストや不慣れな途中参加メンバが起こすヒューマンエラーがチームの生産性をどれだけ損なうのか、4桁のエンジニアは経験をもって身にしみている。</p>

<h1>To be continued</h1>

<p>「中堅IT企業」の経営層とプログラマの間で何がズレているのか、もう答えを示したようなものなのだが。
私見を纏めないでは「日記」にならないので、あと1〜2回引っ張る。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜ日本の「中堅IT企業」は優秀なプログラマを囲いきれないのか (1)]]></title>
    <link href="http://www.monaka.org/blog/2016/01/03/mismatch-1/"/>
    <updated>2016-01-03T05:39:17+00:00</updated>
    <id>http://www.monaka.org/blog/2016/01/03/mismatch-1</id>
    <content type="html"><![CDATA[<h1>書く気になった背景</h1>

<p>私は、プログラマだ。なんだかんだで職歴は20年を超えた。
同時に、かつて10年ほど小さなソフトハウスを経営していたし、今も代表1名の法人を持っている。</p>

<p>そんな経歴により、プログラマ諸氏からは概ねプログラマとして接していただき、経営者諸氏からは稀に経営者としての意見を求められる時がある。
2つの異なる立場についてほぼ同時並行で見聞きする機会に恵まれるのは、おそらく珍しいことだろう。
そんな経験の中で思ったことを、書き散らしておく。</p>

<p>もちろん、守秘義務や職業倫理というものもあり，複数の事案をミックスし曖昧にしてある。
特定の企業についての邪推は無用。ひとつよしなに。</p>

<h1>中堅IT業界における、人材受給のミスマッチ</h1>

<!-- more -->


<p>広くIT業界は、長きに渡って、「人手不足!」と叫んでいる。
そして「&#8221;使えない人&#8221;ばかり面接に来る」というボヤキが続く。
つまり、&#8221;デキる&#8221;&ldquo;人財&#8221;が来ない、または定着しない。そういうことらしい。</p>

<p>このボヤキは、スタートアップでも聞かれる。しかし私見では、圧倒的に、受託中心からの転換を狙っている中堅 IT 企業で多い。</p>

<p>考えると、もったいない話である。
スタートアップは成功すればリターンは大きいがリスクも大きいとされる。
ある期間を生き残ってそこそこの規模まで成功した会社なら、財務的なリスクは小さい。
&ldquo;人財&#8221;が定着すればその会社は大きく伸びるだろう。
&#8220;デキる&rdquo;&ldquo;人財&#8221;も、むしろ&#8221;デキる&#8221;からこそ、その辺りのソロバン勘定はできるだろう。</p>

<p>しかし、現実にはボヤキは消える気配がないどころか、大きくなる一方であるように思える。
日本人にありがちな謙遜のようにも見えない。なぜだろうか。</p>

<p>私には、2つの要因が思い浮かぶ。うち2つはすでに広く指摘されていて経営層にも周知の事項だ。
残りの1つは、ソフトウェアエンジニア界隈では形式化されつつある暗黙知だ。
しかし、経営層界隈、特に中堅IT界隈においての知見共有は、あんまりされていない気がしている。</p>

<h2>「中堅IT企業」のオレオレ定義</h2>

<p>定義を曖昧にすると例外事例が無駄に多くなるはずなので、ここで「中堅IT企業」についてスコープを絞っておきたい。
ここでは、概ね下記のような条件を設定する。</p>

<ul>
<li>ここ数年で業績を伸ばしている。</li>
<li>顧客とは、開発受託の関係から投資やジョイントベンチャなど協業を行う方向で変化している。</li>
<li>法が定める中小企業からは、もはや脱している。</li>
</ul>


<p>社員数で言うと300〜500人、年商で50億くらい。社歴は概ね20年以上。</p>

<p>この規模の会社は、全ソフトウェア業界のうちで、相対的に好調である。
このことは定性的・定量的の両面で示すことができる。</p>

<p>定量的には、ソフトウェア業界の懐事情は、経済産業省が行っている特定サービス産業実態調査によって調査されている。
<a href="http://www.meti.go.jp/statistics/tyo/tokusabizi/result-2/h26.html">最新データ</a>でも、他の規模が軒並みスコアを落とす中、この規模は相対的に好調であることがわかっている。</p>

<p>定性的にもこの規模は活発と言える。
環境性能や自動運転車をキーワードにして、自動車車載ソフトウェアの世界では国際競争が激しくなってきている。
そのような先端の話題に関連して業界系マスコミを賑わすのも、概ねこの「中堅IT企業」規模の独立系ベンダである。</p>

<h1>To be continued</h1>

<p>活発で景気も良い。
本稿では具体例を示さないが，日本のソフトウェアの品質は諸外国に比べて悪いわけでもないということも、定量データとして知られている。
なのになぜ中堅IT企業で人材不足なのだろうか。</p>

<p>問題意識の提示と定義だけで長文になってしまった。</p>

<p>続く。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[謹賀新年]]></title>
    <link href="http://www.monaka.org/blog/2016/01/01/newyear/"/>
    <updated>2016-01-01T00:00:00+00:00</updated>
    <id>http://www.monaka.org/blog/2016/01/01/newyear</id>
    <content type="html"><![CDATA[<p>Twitter にかまけている間に1年半も放置していたのですねぇ．
何か書こう．あとで．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[とある自殺報道について]]></title>
    <link href="http://www.monaka.org/blog/2014/08/12/jisatsu/"/>
    <updated>2014-08-12T12:14:21+00:00</updated>
    <id>http://www.monaka.org/blog/2014/08/12/jisatsu</id>
    <content type="html"><![CDATA[<p>とある事件により，自殺した研究者について．そしてその行為を否定する，特定マスコミ関係者について．</p>

<!-- more -->


<p>人を殺しても精神耗弱なら酌量されるわけです．少なくとも法的には．</p>

<p>ましてや，正常な精神状態なら一番愛おしい(ことに世間ではなっている)己を殺すっていうのは，よっぽどのことだろうと思うわけです．
高瀬舟どころの話ではないですよ．</p>

<p>…自殺には，おそらく，さまざまな動機があるでしょう．一律に云々は言えないでしょう．
その動機の軽さに憤慨するような例もあるでしょう．</p>

<p>ですが．</p>

<p>世間一般の常識として，肝臓大動脈瘤破裂のように，己の不摂生との関連はあれども健康な意志とは無関係な理由で急逝した人を，「護るべき人，履行すべき責任，それらがあるなかで捨てて死ぬなんて無責任」などとは言わないわけで．(…死を悼むレトリックとしてはしばしば言いますけれどね…)</p>

<p>一方で，脳の病に侵された人が急逝したときに「とっとと逃げ出した」と言えるのだとしたら，ナニカがおかしいと，私は思うわけです．</p>

<p>まあ，「死んじゃダメだ」くらいまでの気持ちまでは，同感なのですが．
明らかに有能な科学者が，どうやら手続きが杜撰だったらしいとはいえ，ここまで追い詰められる理由は，あったのだろうかと．</p>

<p>こういうエントリを書く…，マスコミお得意の，炎上マーケティングに踊らせれちゃいました…かね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPi の GPIO アダプタは，便利]]></title>
    <link href="http://www.monaka.org/blog/2014/06/27/an-application-rpi-gpio-adapter/"/>
    <updated>2014-06-27T00:29:32+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/27/an-application-rpi-gpio-adapter</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>Arduino を始めとする，省ピンのマイコンを使っている方にはピンと来ない話かもしれませんが．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/1row-boards.jpg" alt="1列ピンのCPUボードたち" /></p>

<p>ある程度のピン数を持つ，機器組み込み向けのCPUボードには，ベースボードの接続用に，2列のヘッダピンを使っています．</p>

<p>作業机にあった，CPUボードを幾つか見繕ってきました．こんな感じ．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/2row-boards.jpg" alt="2列ピンのCPUボードたち" /></p>

<p>組み込み向けのCPUというのは，センサやらアクチュエータやらを操作することが多く，やたらとI/O端子がついています．
それらを一列に配置すると，基板のサイズが大きくなってしまいます．</p>

<p>そういう理由は解るのですが，一方で，試作する側としては2列では困る時があります．
<strong>2列だとブレッドボードに刺せないのです．ショートします．</strong></p>

<p>最初からきちんとしたベースボードの基板を起こしたり，ユニバーサル基板で頑張ればよいのではあります．
しかし，ブレッドボードはお手軽です．一度楽を味わってしまうと，人間は後戻りできません．</p>

<p>そんなわけで，ケーブルを自作したりするのですが，それもなかなか骨の折れる作業です．</p>

<p>手抜きをして，接触が不安定になりがちなメスのジャンパワイヤーを使って，3D配線を行うという暴挙に出たりします．
それはいけません．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/anti_pattern.jpg" alt="アンチパターン" /></p>

<p>など考えながら，CPUボードを仕舞おうとして，私の会社で製造販売している製品が目に入りました．</p>

<h2>RaspberryPi対応GPIO変換基板キット</h2>

<!-- more -->


<p>そのコストパフォーマンスの凄まじさに，一時代を築いた感もある Raspberry Pi ですが，お手軽電子工作のツールとして見た時に，一つだけ欠点があります．
それは，GPIO の端子が，13x2列のピンヘッダであることです．</p>

<p>これをケーブルで引き出しても，<strong>2列だとブレッドボードにさせないのです．ショートします．</strong></p>

<p>…あれ?</p>

<p>そのため，ブレッドボードに刺しやすくするような変換基板が売られています．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/rpi-gpio-connected.jpg" alt="RaspberryPi対応GPIO変換基板キット" /></p>

<p>…あれ?</p>

<p>これ， Raspberry Pi 以外の組み込み用CPUボードにも使えるのでは…?</p>

<h2>やってみた</h2>

<p>弊社ジャンク棚から，基板を2枚拾ってきました．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/rpi-gpio-boards.jpg" alt="基板2枚" /></p>

<p>Amazon で販売中の，<a href="http://www.amazon.co.jp/o/ASIN/B00GN3YQK8/monamiya-22">RaspberryPi対応GPIO変換基板キット (ケーブル無し)</a>の基板です．
製造過程で小キズがあったため，出荷から弾いたものです．</p>

<p>本来，リボンケーブルで繋いで使います．例えばこんなふうに．</p>

<p>ただ，このままの使用法だと，ケーブルコネクタの両脇に幅があるため，CPU基板のピンヘッダと干渉しそうです．
なので，13x2列のピンフレームと置換します．</p>

<p>そして，はんだ付けをします．
今回の私の用途では，左右両方にコネクタが必要でしたので，片方の基板は裏返して鏡像なるようにしました．</p>

<p>結果，こんな感じになります．
専有面積は大きくなりますが，ベースボードの設計について，ある程度の目処が付くまでの試験的なものですので．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/1row-connected.jpg" alt="1列化" /></p>

<p>この方法で1列化できるのは，通常の方法(そうでない方法については後述)では連続した26ピンになります．
多くの組み込み向けCPUボードは，それよりも遥かに多くのピン数があります．
しかし，特定の機能に関するピンは，ある程度近い位置に配置されるでしょう．
目的を絞って使う際には，便利に使えるのではと思います．
接触が不安定になりがちなメスのジャンパワイヤーを使うよりも，安心できるのではないでしょうか．</p>

<h2>余談: 最大30ピンまでOK</h2>

<p>実は，この変換基板，30ピンまで対応できます．</p>

<p>本稿を書く目的で，秋月まで行ったのですが，13x2列のピンフレームが品切れでした．
(Raspberry Pi 人気のせいでしょうか．)
仕方なく14x2列の品を買ってきたのですが…，</p>

<p>基板に当ててみて，ひらめきました．</p>

<p>基板には，LED点灯など，ちょっとした機能をブレッドボードなしで実装できるよう，ユニバーサル基板と同等の箇所を用意してあります．この部分を使うと，最大30ピンまで一列化ができます．</p>

<p><img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/30cols.jpg" alt="" />
<img src="http://www.monaka.org//blog/2014/06/27/an-application-rpi-gpio-adapter/30cols-2.jpg" alt="" /></p>

<p>今回，一列化を試みるきっかけとなった<a href="http://kaneko-sys.co.jp/shop/00016.html">UCB-BF512基板</a>は，15x2列のピンヘッダがついています．
つまり，やろうと思えば，30の全ピンを一列化できるのでした．</p>

<p>基板のアートワークをした私自身，想定外のことでした．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monami-ya.mrb の開発環境(2014年6月版)]]></title>
    <link href="http://www.monaka.org/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/"/>
    <updated>2014-06-24T06:05:33+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb</id>
    <content type="html"><![CDATA[<p>SNS の外でご意見頂きまして．</p>

<blockquote><p>Monami-ya.mrb って，twitter 辺りでは目にするけれど，どんな環境で作っているのか判らない</p></blockquote>

<p>はい．断片的にはtweetなどしていますし，<a href="https://bitbucket.org/monami_ya_mrb/sample-env-jsp-bfin">OSX 上でのビルド環境等も(今のところ消極的に)公開</a>しているのではありますが．</p>

<p>ハードウェアがどんな感じなのかは，なかなか想像つかないという方も多いと思います．
特に Ruby 系の方は，組み込みボードそのものに面識が無かったりするでしょうし．</p>

<p><img src="http://www.monaka.org//blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/target-all.jpg" alt="ターゲットハードウェア" /></p>

<p>写真を撮ったので，並べておきます．</p>

<!-- more -->


<h2>開発ホスト機</h2>

<p>しょっぱなから写真を撮り忘れました．
でもまあ機種名を挙げれば，想像つくかと思います．</p>

<p>MacBook Pro 2.8 GHz Intel Core 2 Duo．
すいぶんと古い箱です．
メモリは8GB．HDDは500GB．</p>

<p>この程度のスペックでも，monami-ya.mrb のビルドは，1分以内に終わります．</p>

<p>正直言うと，もう少し良いのが欲しいですけれどね…GCCのビルドまで行う場合には…．
(会社では，GCCのビルドは，クラウド上のビルドサーバを活用しています)</p>

<h2>ターゲット</h2>

<h3>CPU ボード + マザーボード</h3>

<p>開発のメインとなるターゲットボードは， <a href="http://wlst.jp/ele/bf533cb/">BF533CB</a> です．
Blackfin という DSP を積んでいます．メモリは RAM 16MB + 内蔵若干，永続ストレージは SPI Flash．</p>

<p><img src="http://www.monaka.org//blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/bf533cb.jpg" alt="BF533CB" /></p>

<p>DSP というと特殊なプロセッサという印象を持たれるかもしれません．
char のビット幅が16だったり32だったりという変態，みたいな．</p>

<p>しかし，Blackfin に関して言えば，普通の RISC プロセッサとして使えます．char のビット幅は 8 ですし．
あまり知られてませんが，品番によっては Microsoft .NET-MF が動きます．uClinux も動きます．
しかも 500MHz の高速動作です．</p>

<p>問題は，情報が少ないことです．
特に日本語の情報をwebで求めようとすると，片手で収まるくらいの開発者にしか当たりません．
(いや，商社やメーカの中などに入れば，日本人の開発者も，もちろんそれなりにいらっしゃいます)</p>

<p>CPUボードだけでも monami-ya.mrb は動作しますが，シリアルポートのコネクタが便利なので，マザーボードを併用しています．</p>

<p>BF533CB は，シンプルでとてもよいボードなのですが，今後の量産計画は未定のようなのが難点です．
近日中に，BF533CB から，<a href="http://www.kaneko-sys.co.jp/shop/00016.html">金子システム製の UCB-BF512</a>へ変更する予定でいます．</p>

<h3>USB-serial アダプタ</h3>

<p>最近の廉価帯ARMボードだと，USB-serialのアダプタをオンボードで積んでいる場合も多いですが，現在使っている BF533CB にはありませんので，外付けしています．</p>

<p><img src="http://www.monaka.org//blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/usb-serial.jpg" alt="USB-serial" /></p>

<p>シグナルが3.3Vレベルであれば，何を使っても良いのでしょうけれども，私は秋月電子通商の<a href="http://akizukidenshi.com/catalog/g/gK-01977/">FT232RL USBシリアル変換モジュール</a>を使っています．
モジュールのみで900円と，微妙なお値段ではあります．
しかし，UART は，Lチカが済んだあとから開発終了までデバッグ用として永く使うものですので，安定していることと，壊れても代替がすぐに手に入るほうがよいと思います．</p>

<h3>JTAG アダプタ</h3>

<p>UCB-BF512 は，出荷時点でブートローダとして u-boot が書き込まれていますし，BF533CB も一度 JTAG 経由で書き込めば，同様に u-boot が使えます．</p>

<p>monami-ya.mrb は，uClinux と同様に u-boot 経由でブートできます．
よって，JTAG デバッグアダプタは不要です．
…と言えれば話は楽なのですが，GDB 無しでは PC 上の mruby 開発が難しいのと同様に，JTAG デバッガなしでの monami-ya.mrb の開発は困難を極めます．</p>

<p><img src="http://www.monaka.org//blog/2014/06/24/my-env-for-developing-monami-ya-dot-mrb/sashimi-knife.jpg" alt="刺身包丁" /></p>

<p>私が使っているのは，<a href="http://www.amazon.co.jp/o/ASIN/B003MG4BH2/monamiya-22">PizzaFactory Tiny JTAG</a> です．
つまるところ JTAG ですので，ARM用の JTAG アダプタや FT2232 が載ったモジュールを使うことはできるはずなのですが…．
私自身が PizzaFactory Tiny JTAG の開発を行った時に，BF533 プロセッサで謎の相性問題を引き起こした経験があります．</p>

<p>納期の無い趣味なら，相性問題でアタマを抱えるのも愉しみのうちでしょう．
少しでもお仕事が絡んでいるのなら，人件費と比べて，サクッと買ったほうが安いです．</p>

<h2></h2>

<p>ざっとこんな感じです．
(組み込み開発 == ロジアナやオシロといった計測器が積まれた机)，のような印象を持たれるかもしれませんが，実際のところ，RTOS や VM のコア部分での開発では，それらの計測器はあっても無駄です．プローブを挿す場所がありませんから．</p>

<p>開発ホスト機を除くと，予算的には，1万5千円もあればお釣りが来るという感じでしょうか．
「STM32F4-discovery は 2千円でお釣りが来るのに！」っていう気もしますが，スペックが違うので比べるのは野暮かなぁとも思います．
STM32F4-discoverty は .NET-MF は走りますが，uClinux が走らないですし．</p>

<p>取り留めもないですが，本稿は日記なので，纏めなくても良いですね．それでは．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb が最小スペックを追求しない理由]]></title>
    <link href="http://www.monaka.org/blog/2014/06/18/why-monami-ya-dot-mrb-dont-pursure-minimum-size/"/>
    <updated>2014-06-18T04:21:58+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/18/why-monami-ya-dot-mrb-dont-pursure-minimum-size</id>
    <content type="html"><![CDATA[<p>本稿は，軽量Rubyを軸にしたソリューションのアーキテクトとして，私はこう考えました，ということを述べています．</p>

<p>設計思想に関する話です．
一つのシステムに対して，設計思想は幾通りもあるのが普通です．
どの思想にも，一定の理があります．</p>

<p>読者が何かの拍子に，軽量Ruby系実装を選ぶことになった際に，参考になればと思います．</p>

<h2>サブセットは滅びの道?</h2>

<!-- more -->


<p>ムーアの法則は，まだしばらく正しい状態にあるでしょう．</p>

<p>つまり，市場シェアが高い(有り体にいうと開発資金のある)があるアーキテクチャには，まだまだ計算機資源が潤沢になる余地があります．
一方，市場シェアが低いアーキテクチャは，性能向上は伸び悩むでしょう．</p>

<p>別に特定のアーキテクチャを云々したいわけではありませんが，SuperH アーキテクチャは，一時期，動作クロック数をメキメキと上げていきました．
今は， ARM Cortex アーキテクチャがその状態のように見えます．
PIC32 も，他の PIC アーキテクチャが援軍となっているのか，頑張っているようです．</p>

<p>それが，市場原理というものであります．</p>

<p>このようなメインストリームのアーキテクチャ(今なら Cotrtex)では，ソフトウェアの規模がどんどんと成長します．
多くの RTOS は API が枯れているはずなのですが，ドライバやミドルウェアが成長していきます．
本棚と本の関係と一緒で，計算機資源があるかぎり，ソフトウェアは膨張していきます．</p>

<p>一方，シェアの低いアーキテクチャとそのユーザは，その姿を脇に見て，歯ぎしりをして済ますわけにはいきません．
死活問題ですから．
そのため，一部だけでも移植して，メインストリームが享受している生産性の，喩え一部でも得ようとします．</p>

<p>しかし，サブセットは，所詮サブセットです．
シェアの低さをひっくり返すことはできず，そのうち，アーキテクチャが消えます．
それが，市場原理というものであります．</p>

<p>動作環境がないソフトに価値はありません．
せっかく作ったサブセットは，ビット世界のどこかに霧散します．</p>

<h3>サブセットの全てが悪ではない</h3>

<p>もちろん，成功する例もあります．</p>

<p>機器組み込み屋からWeb屋まで幅広く知られている例として sqlite があるでしょう．
他の SQL データベースからすれば，サブセットです．
しかし，sqlite は，型が極端に少ない，ライブラリとして動作する，など，設計思想が他と一線を画しています．</p>

<p>mruby もまた，機器組み込み以外の分野で，一定の成功はしていると見てよいでしょう．
mruby も他の Ruby 実装から見ればサブセットです．
しかし，先行する Lua の VM 実装を研究し，他の Ruby 実装には無い特徴を有しています．</p>

<h3>サブセットのアンチパターン</h3>

<p>サブセットで危険なパターンというのがあります．</p>

<p>実装の一部を切り取ってきて，制約の多いアーキテクチャに移植する，というものです．</p>

<p>「8bit の PIC や AVR に uITRON のサブセットを頑張って実装する」というのは典型例の一つです．</p>

<p>アーキテクチャの制約のため，実装をサブセット化した，というものには，継続性に対するリスクがあります．
上記uTRONの例なら「16bit の使えばいいじゃん．値段変わらんよ」で存在価値は容易に0になりますから．</p>

<p>無論，全てのプロジェクトが失敗するとは限りません．</p>

<p>成功した一例として uClinux が挙げられるでしょう．
これは，MMU サポートのない CPU のために Linux のサブセットを作る，というプロジェクトでした．
uClinux の場合は，MMU をサポートしない CPU は，かなり長い期間存在する，という見切りの旨さがありました．
MMU が無いという前提を立てる一方で，メモリ容量やクロック数には制約がかかっていません．
それらは，MMU をサポートしない CPU であっても，性能向上が見込めるからでしょう．
そして，実際に，ハイエンドマイコンでは，そうなっています．</p>

<p>今手元にあるチップのメモリやクロックに制約があるから，という理由でのサブセットは，徒労に終わります．中長期的に見て．
(…って書くと呪いをかけているように思われるかもしれませんが．)</p>

<h3>サブセット化はあとからでもできる．芯がしっかりしていれば</h3>

<p>mruby のコミットログを見た人からは，</p>

<blockquote><p>そうは言っても，あなた，mruby から stdio.h サポートを外したり，さんざサブセットにしてきたじゃないの</p></blockquote>

<p>と言われるかもしれません．</p>

<p>ええ，その通りです．
そして，まだ，本家 mruby にも，その fork である monami-ya.mrb にも，サブセット化の余地が残っています．</p>

<p>しかし，それらは，特定のアーキテクチャで動かしたいからという動機から来るものではありません．
(C99標準が定める)freestanding 環境での実行を確約するためのものであったり，UARTすら用意できないという
機器組み込みシステムでは古今東西普遍的にあるシチュエーションへの対応だったりというものばかりです．</p>

<p>サブセット化をし易い &ldquo;芯&rdquo; を作っておくことは大事です．
しかし，詰め込むことを先にするのは，リスクが高い．
monami-ya.mrb での各種拡張を手掛ける際に，私は，そう考えて設計と実装を行いました．</p>

<h2>サブセット実装には不思議な魔力はあるが</h2>

<p>私も現役の組み込み屋ですから，「そうは言っても目の前の機器に組み込まないと成果にならないのよ」というお話は解ります．
案件ベースでは，サブセット実装をせざるを得ないでしょう．</p>

<p>そして，サブセット実装が持つ，得も知れぬ魔力が解らなくもないです．
私もガラパゴニッポンの組み込み業界で育ちましたので，
実装者として，純粋に，愉しい．不思議な魔力．</p>

<p>しかし，イマイマを乗り切るための方便と，この先何年か使われることを前提とした提案がどうあるべきか，
現在的実装がどうあるべきかというのは，分けて考える必要があるはずです．</p>

<p>なので，(サブセット実装の成果物である)最小サイズの追求を，当面の monami-ya.mrb では行わないのです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜ monami-ya.mrb は RTOSとバインドするのか]]></title>
    <link href="http://www.monaka.org/blog/2014/06/17/why-monami-ya-dot-mrb-loves-rtos/"/>
    <updated>2014-06-17T04:19:03+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/17/why-monami-ya-dot-mrb-loves-rtos</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p/">さきほど</a>は，重くはならないよ，という，疑問への回答でした．</p>

<p>加えて，RTOS とバインドする積極的な理由を述べておきます．</p>

<p>理由はある程度の理詰めはあるものの，結局のところ「オレはこう思うんじゃい」という色彩が強く，別にそうしなくても軽量Rubyはベアメタルで動きます．
時間と予算が潤沢にあるなら，ね．</p>

<p>とはいえ現実は．</p>

<p>別段のファンドが獲得できているわけでもなく，取れる時間も限られ，加えて</p>

<blockquote><p>過去の事例だとこの手のOSSは長期的には失われる結果になりそうです</p></blockquote>

<p>という<a href="http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly/">呪い</a>までかかった状態なので，素早くカタチにしないと，呪いが成就してしまうのでした．</p>

<h2>大目標: ゆるふわ Ruby だけで，ガチ組み込み開発をしたい</h2>

<p>すべては大目標の実現のためです．</p>

<p>＼ゆるふわ Ruby だけで，ガチ組み込み開発をしたい／ that&rsquo;s all.</p>

<h3>大目標(言い換え): ゆるふわでない Ruby で，ガチ組み込み開発をする気なんて無い</h3>

<!-- more -->


<p>対極的な大目標として「mrbgems を全部削って，parser も削って，バイトコード実行だけできればよい．場合によってはバイトコードの命令セットも削る．」という設定がありえます．
これもまた組み込み風味，いや，むしろ従来型の組み込みシステムっぽくて安全な気がします．</p>

<p>ですが，私はそこには寄り添いません．
先行事例が既にあるから，というのも理由の一つです．
加えて「そこまでするならCで書くわ」とミもフタもなく思うからです．
コードゴルフをしたいなら，C言語を使えば良い．その用途ならばC言語は最強です．Ruby で挑む理由がありません．</p>

<p>さてはて，ゆるふわを極めるには，irb 相当の REPL がオンボードで動くことは必須です．</p>

<p>現実的な解として，<a href="http://d.hatena.ne.jp/kyab/20130621">ホストベースirb</a>の実装が既にあります．私には思いつきませんでしたし，なるほどなぁと関心しきりです．
なのですが，ホスト側にもソフトウェアが要る点で，私の想定分野では，重いなぁと思います．
昔の 8bit BASIC マシンやポケコンのようなゆるふわ感はありません．UART で繋ぐだけで REPL が立ち上がってほしい．
(ホストベースirbの実装理由が「&#8221;ゆるふわ&#8221;にしたかった」なんてことは絶対に無いでしょうから，私がどう思おうとも，実装の価値がどうこうなる話ではありません)</p>

<p>先行事例の実装で十分な領域があるのは，アタマでは十分に解っています．
今ここに書いているのは，「ぼくがかんがえたさいきょうの」厨二病的な放言です．</p>

<h3>ゆるふわガチ組み込みに必要なアイテム</h3>

<p>REPL を内蔵するとなると，UART ドライバが必要です．USB-serial ならさらに良いですね．</p>

<p>さらに，&#8221;ゆるふわ&#8221; なら，何も考えずに Socket や File を使い出せないと嘘です．
ファイルシステムやプロトコルスタックを載せたくなります．</p>

<p>きっと使う mrbgems も，中で malloc とかからループとかバンバン使っています．</p>

<p>うーん，&#8221;ゆるふわ&#8221;．
でも，その環境で，ガチ組み込みをしたいわけです．</p>

<p>uClinux 載せるとか，ご冗談でしょう?</p>

<p>しかし，ファイルシステムとプロトコルスタックを，割り込みハンドラから書くのは…
書いている間に，呪いが成就しちゃいます．ねぇ．</p>

<h2>RTOS とバインドする 3 つの理由</h2>

<p>そんなわけで，monami-ya.mrb が RTOS とのバインドを推進する理由は概ね述べてしまった気がしますが…．
ざっくりいって，理由は，3つあります．</p>

<h3>信頼性の観点</h3>

<p>仮にRTOSを入れなかったとしても，UART，タイマ等々の割り込み処理は書かなければなりません．
RTOSと比べて自前で書いたほうが十分に高信頼であれば，書くのも悪くないでしょう．</p>

<p>ですが…．</p>

<p>TOPPERS や uT-Kernel を始めとして，有名どころの RTOS には，第一線の研究者やエンジニアが関わっています．
彼らが日々バグを潰し合っているコードのほうが，明らかに信頼できます．</p>

<p>(多くのRTOSでは，最小構成に UART ドライバを含みません．
しかし，UART は初歩的なデバイスです．大抵の RTOS ではドライバのコードが提供されます．)</p>

<h3>保守性の観点</h3>

<p>RiteVMの実装はほぼ1つでしょうけれども，マイコンはARMで集束に見えているようでいて，
いまだにたくさんあります．特にガラパゴニッポンでは．</p>

<p>ARMにしても，セミコン各社でペリフェラルに特色を持たせた結果，なかなか心折れる状態です．</p>

<p>RTOS の上に構築した場合，mruby より下の層を気にせずに保守できます．</p>

<p>保守可能な動作環境の狭さは，その上で動作するソフトウェアのシェアに響きます．
軽量Rubyは，クロスプラットフォーム動作がメリットの一つです．
それのメリットを活かせないようでは，自ら潰しているようなものでしょう．</p>

<h3>普及の観点</h3>

<p>おそらく，最初期のユーザは</p>

<blockquote><p>C言語で書かれた既存資産を活かしながら，mruby を使ってみたい</p></blockquote>

<p>と言ってくるでしょう．</p>

<p>Rubyでの書き換えで発生するコストやRubyで実行したときの速度低下のリスクを考えると，保険をかけながらの導入をしたいと思うはずです．</p>

<p>mruby が動作するようなレベルのマイコンなら，既にRTOSを前提としたソフトウェア資産が存在するでしょう．</p>

<p>もし「全部をRubyで書き換えるかmrbgem化しないと，始まりません」と言ったとしたら，おそらくユーザは逃げだします．</p>

<p>ファーストユーザを掴めないなら，普及を考えるなんてありえないでしょう．</p>

<h2>まとめ，っぽい何か</h2>

<p>そんなわけで， monami-ya.mrb は，従来の mruby 開発者が狙っていたところとは若干違ったところを目指しています．
でなければ，fork なんて面倒なことをする必要なんて，なかったわけですし．</p>

<p>私は，私が狙った分野には，2つの大きな需要があると思っています．</p>

<ul>
<li>Gainer &ndash; Arduino の系譜に続く流れ</li>
<li>パラメタチューニングやデバッグ用のシェル(ブートローダ含む)の高度化の延長</li>
</ul>


<p>私の実装が生き残れるか，というのとは，また別の話ではありますけれども．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTOS は monami-ya.mrb を遅くするか?]]></title>
    <link href="http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p/"/>
    <updated>2014-06-17T02:01:52+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p</id>
    <content type="html"><![CDATA[<p>とある，案件契約ではない非公式なやりとりから．
個人が特定されるような内容ではないので，これくらいなら許され…ますよね．</p>

<blockquote><p>mruby 自身もC言語に比べて処理に時間がかかるところに，RTOSが入るとさらに遅くなったりしないのか少し心配です．</p></blockquote>

<p>個人が特定されるどころか，同じような直感を持たれる方，案外多いのではないかなと思います．
機器組み込み業界で働いておられるエンジニアの中にもいらっしゃるのではないかな，とも．</p>

<p>端的に言うと，RTOS が入ると遅くなるというのは，概ね誤解です．
いやもちろん RTOS がゼロオーバヘッドだと言っているわけではありません．</p>

<p>いまや<a href="http://www.monami-ya.jp/product/monami-ya.mrb/about/index.html">会社の製品の機能として提供されている部分</a>なので，本来なら会社の公式ページに書くべきところですが，そうすると定量計測してホワイトペーパーにしないと格好がつきません．
そこまで喫緊の話でもない(非公式なやりとりですし)ので，こちらに書いておきます．</p>

<h2>RTOS とは何か?</h2>

<!-- more -->


<h3>そもそも OS とは何か</h3>

<p>RTOS の前に OS とは何か，から確認していきましょう．
多くのデスクトップ環境では，CPUのコア数はたかだか8個程度でしょうけれども，OS上ではより多くのCPUが存在しているかのように見えています．
本当は1つしかないメモリ空間は，MMUなどメモリ管理ハードウェアの支援を得て，プロセス毎に分けつつも，プロセス内では全メモリを専有しているように見せかけています．
ストレージも，本当は1つしかなくても，ファイルシステムという構造を導入することで，複数のプロセスに競合しないように調停されます．</p>

<p>ざっくり言うと，OS というのは，何かを抽象化し管理し保護するソフトウェアです．
現在的なOSのほとんどは，プロセスと呼ぶ抽象化した計算機を管理し，処理がプロセスから外に漏れないようにして，物理的な計算機資源を保護しています．</p>

<h3>RTOS は何を保護するものか</h3>

<p>RTOS の抽象化対象は，CPUです．
実際には全ての処理は時分割されているのですが，それぞれの処理はCPUを専有しているものと(RTOSによって)勘違いさせられています．
そして保護対象は，RT == Real Time が示す通り，時間です．
なので，多くの RTOS は時間以外のリソースの保護については，かなり無頓着です．
最近になって，セキュリティや機能安全についての世論が固まったため，リソース保護機能付きのRTOSも増えました．
それでも，リソース保護機能が時間保護を阻害するとなれば，時間保護のほうが優先されます．</p>

<p>ここでいう時間には，2種類あります．</p>

<p>ひとつは物理時間です．これは一般的な「壁時計」と同じと思って頂いて構いません．
RTOS自身オーバヘッドが影響するので，重要といえば重要ではあります．
しかし，CPUに与えるクロック次第で改善されやすいものでもあります．</p>

<p>もう一つは実行順序制約です．RTOS ではこちらのほうが重要です．
RTOS では，実行順序が事前に見積もれなければならない，とされます．
そして，優先されるべき処理については，他の処理を止めてでも実行して良い，とされます．
他の処理を止めれば，実行順序を見積もりやすくなりますから．</p>

<p>通常のOSにも実行優先度の概念はあります．しかしRTOSの場合は強烈です．
アプリケーション設計者が必要と思うなら，デバイスへの割り込みすら止めることができます．
CPUが持つ計算資源の全てを，特定の処理に割り当てられる．
それが RTOS の特徴です．</p>

<p>RTOS は時間を管理する OS なので，これは当然の特徴と言えます．
(計算資源 == 計算に要するクロック数 == 時間)ですから．</p>

<h2>RTOS のオーバヘッド</h2>

<p>RTOS は，複数の処理(タスク)に対して，それぞれが CPU が専有しているかのように見せかける抽象化を行っています．
抽象化の裏には，オーバヘッドがあります．
これは，時間量として見ると，コンテキストスイッチに要する時間で表されます．
商用 RTOS の星取表で，この数値が俎上にあるのを見たことがある方も多いでしょう．</p>

<p>あまりにも商用 RTOS の営業さん達がけたたましく言うので，このオーバヘッドが無視できないと誤解する方が後を絶ちません．
しかし実際のところ，このオーバヘッドが致命的かどうかは，アプリケーションに依ります．</p>

<p>mruby は，大目に見ても C言語で書くよりも2桁のオーダで遅くなります．
「週に何度も口にしない飴玉のカロリーを気にするなら，まず毎日の三食を見直しましょう」という喩えでお分かり頂けますでしょうか．</p>

<p>なお，RTOS のオーバヘッドとして有名な指標には，コンテキストスイッチの他に，割り込みへの応答時間もあります．
こちらも，似たような議論が成り立ちます．</p>

<h2>「RTOS は重い」神話の，ミもフタもない理由</h2>

<p>とはいえ，「RTOS は重い」にも相応の理由は思いつきます．
それは，優先度設計の難しさ，です．</p>

<p>既述の通り，RTOS では，高優先度の処理は，CPUへの割り込みさえも止められます．
このような条件で，高優先度で実行される処理の設計が悪くCPUを専有した場合は，システムは最悪の状態になります．
低優先度の処理にはいつまでたっても，処理の機会が与えられません．
(ちなみに，このような状態に陥った低優先度の処理は，RTOS 界隈の用語では，&#8221;飢餓状態&#8221;としばしば言われます．)</p>

<p>日本の組み込み業界では，優先度設計から詳細実装まで全てを一人でこなす例もありますが，
上流が検討もしないで適当に優先度を割り振った仕様書を元に，受託で(再受託で(再々受託で))詳細を実装するということが，しばしば行われます．
こういうケースでは，組み上げてみたら真っ当に動かない，ということは，珍しくなかったりします．</p>

<p>それは設計の不備であり，RTOS が悪いわけではないのですが．
外から買ってきた RTOS をスケープゴートにする，ということが起こるのは，人として理解できないわけでもありません．</p>

<h2>monami-ya.mrb は，RTOS で処理が重くなったりはしません．</h2>

<p>…もちろん，高優先度の処理で無限ループなどされるとダメですけれども．</p>

<p>優先度の設定に気をつけている限りにおいて，monami-ya.mrbはRTOSと併用しても処理が重くなったりはしません．
その辺りには，20年前から RTOS 関わり，TOPPERS/FI4 など RTOS の実装にも関わった経験を活かしてあります．</p>

<p>本家 mruby は…? メモリアロケータの部分をキチンとケアできれば，大丈夫にできると思いますよ．たぶん．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb での static thread binding サポート]]></title>
    <link href="http://www.monaka.org/blog/2014/06/16/monami-ya-dot-mrb-static-thread-binding/"/>
    <updated>2014-06-16T02:15:55+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/16/monami-ya-dot-mrb-static-thread-binding</id>
    <content type="html"><![CDATA[<blockquote><p>注: 2014-06-17 00:30:00JST バグフィックスがあったので，コードの引用を修正し，体裁も整えました．</p></blockquote>

<p>昨日で，monami-ya.mrb への sandbox サポートについて，峠を超えました．</p>

<p>当日記でも，<a href="http://www.monaka.org//blog/2014/06/15/monami-ya-dot-mrb-sandbox-support/">実装</a>と<a href="http://www.monaka.org//blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/">背景</a>について取り上げました．</p>

<p>その際，sandbox が必要な理由の説明で，スレッドの使い方について説明しました．
つまり，monami-ya.mrb は，下位層にスレッドライブラリ(RTOS含む)の存在を暗黙的に期待しています．</p>

<blockquote><p>RTOS 含めると，動作が重くなるんじゃないの?</p></blockquote>

<p>みたいなことを仰る方も，世間には稀にいます．
それは概ね誤解です．
その辺りの話は，別の機会に取り扱いましょう．</p>

<p>注: 本稿は，mruby のビルドシステムと，uITRON4.0 仕様でのアプリケーション記述についての知識があることを前提として書かれています．</p>

<h2>目指せ，ゆるふわ組み込みライフ</h2>

<!-- more -->


<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">って思っていたのに，とんでもねぇ修羅の道だったという．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/status/478026904457326592">June 15, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>いやほんと，組み込み向け軽量 Ruby って言葉を聞いた時に，大いに期待したのですが．
組み込みって，分野広いですから，仕方ないと言えば仕方ないのですが．</p>

<p>愚痴っていてもしかたがないので，fork して拡張するのです．</p>

<h2>解決したいこと</h2>

<p>せっかく軽量 Ruby で &ldquo;ゆるふわ&rdquo; したくても，RTOS の細かい差異に振り回されるようではゲンナリです．</p>

<p>OSEK の OIL とか，uITRON/TOPPERS のコンフィギュレーションファイルとか，書きたくないわけです．</p>

<p>そこで，static thread binding の登場となります．</p>

<h2>記述と内部処理</h2>

<p>static thread binding は，sandbox 同様， monami-ya.mrb の master ブランチにも develop ブランチにさえも入っていません．
なので，仕様は微調整される可能性があります．
でも，もう手元では概ね動いているので，ガッツリ変わるということは，ないでしょう．たぶん．</p>

<h3>build_config.rb への記述</h3>

<p>&ldquo;static&rdquo; と謳っているくらいですから，記述箇所は build_config.rb になります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  s = conf.sandbox('blink') do |conf|
</span><span class='line'>    conf.gem :github =&gt; 'ShinyaEsu/mruby-direct'
</span><span class='line'>    conf.gem :bitbucket =&gt; 'monami_ya_mrb/mruby-toppers-itron'
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  conf.thread do |conf|
</span><span class='line'>    conf.sandbox = s
</span><span class='line'>    conf.activate = true
</span><span class='line'>    conf.type = :task
</span><span class='line'>    conf.script_path = "script/bf533cb/led_blink.rb"
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>前半は，sandbox です．後半の conf.thread でスレッドを定義します．
あまり説明の必要は無いでしょう．
アクセサは，こんな感じです．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ThreadBind
</span><span class='line'>  attr_accessor :activate
</span><span class='line'>  attr_accessor :script_path
</span><span class='line'>  attr_accessor :sandbox
</span><span class='line'>  attr_accessor :priority
</span><span class='line'>  attr_accessor :stack_size
</span><span class='line'>  attr_accessor :type</span></code></pre></td></tr></table></div></figure>


<p>activate は，システム起動時に，スレッドを実行開始の状態にするかを決めます．
Win32 や POSIX では無視かエラーかかもしれません．
RTOS ではシステム起動時のタスクの実行状態を決められることが多いので，重要なパラメタです．</p>

<p>stack_size は，RTOS では必要でしょうけれども，Win32 や POSIX なら無視されるのでしょう．
type は，uITRON/TOPPERS の場合には，:task, :cycric, :alarm, :interrupt とかになるでしょう．</p>

<p>script_path は，そのスレッドが実行する Ruby (mruby)スクリプトを指定します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Direct.write16(0xffc00730, 0x0001)
</span><span class='line'>while true
</span><span class='line'>  ITRON.dly_tsk 1000
</span><span class='line'>  Direct.write16(0xffc0070c, 0x0001)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>とか．
普通のスレッド(タスク)なら，while ループの中で何かをさせる感じになります．
上記の場合は，BF533CB ボード上の LED を 1000ms 周期で Lチカしています．</p>

<p>ワンショットのスレッド(uITRONでの，alarm / cyclic / 割り込みハンドラ)では
ループをさせないで終わらせることになるでしょう．</p>

<h4>余談:割り込みハンドラをRubyで書けるか</h4>

<p>ええ，割り込みハンドラも書けます． monami-ya.mrb ならね．</p>

<p>性能的に使い物になるかどうかなんて気にしてはいけません．
ムーアの法則が解消する可能性が高いからです．</p>

<p>割り込みハンドラを RiteVM (mruby の VM) で書く場合に，物理時間制約以外のリスクがあるとすると，malloc 時のロックとメモリ枯渇です．
monami-ya.mrb では，TLSF アロケータの採用による，mrb_state 間のロックフリー化をしてあります．
また，VMのスタック上限をmrb_state毎に指定可能にしてあるため，どうしようもない枯渇は起こし辛いようにしてあります．</p>

<p>現在の本家 mruby では，これらの対応が抜けています．
本家のままでは，割り込みハンドラを Ruby で書くのはリスクが高すぎて実用不能でしょう．
まさか割り込みハンドラまで書くとは思っていないフシがあるので，たぶん今後も．</p>

<h3>内部処理</h3>

<p>build_config.rb の記述から，下位のスレッドライブラリへのバインディングに必要なコードを静的に生成します．</p>

<p>現時点では，TOPPERS/JSP 用のコードを生成します．決め打ちです．
将来的には， toolchain のように，動作環境の OS を build_config.rb に記述することで，生成されるコードを，変更可能になるべきでしょう．</p>

<p>具体的には，このようなファイルができます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "mrb_thread_bind.h"
</span><span class='line'>INCLUDE("\"mrb_thread_bind.h\"");
</span><span class='line'>ATT_INI({TA_HLNG, 0, mrb_thread_bind_initialize});</span></code></pre></td></tr></table></div></figure>


<p>uITRON4.0 のコンフィギュレーションファイル</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "itron.h"
</span><span class='line'>#ifdef _MACRO_ONLY
</span><span class='line'>extern void mrb_thread_bind_initialize(VP_INT exinf);
</span><span class='line'>extern void mrb_thread_bind_entry(VP_INT exinf);
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>TOPPERS/JSP側が用いるヘッダファイル</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>const uint8_t mrb_thread_script0[] = {
</span><span class='line'>0x52,0x49,0x54,0x65,0x30,0x30,0x30,0x32,0xe9,0xce,0x00,0x00,0x00,0xe2,0x4d,0x41,
</span><span class='line'>0x54,0x5a,0x30,0x30,0x30,0x30,0x49,0x52,0x45,0x50,0x00,0x00,0x00,0xc4,0x30,0x30,
</span><span class='line'>0x30,0x30,0x00,0x00,0x00,0xb8,0x00,0x01,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x10,
</span><span class='line'>0x01,0x00,0x00,0x11,0x02,0x00,0x00,0x02,0x03,0x00,0x01,0x02,0x01,0x00,0x82,0x20,
</span><span class='line'>0x00,0x80,0x07,0x17,0x01,0x00,0x02,0x11,0x02,0x00,0x02,0x02,0x01,0x01,0x81,0x20,
</span><span class='line'>0x01,0x00,0x00,0x11,0x02,0x00,0x03,0x02,0x03,0x00,0x01,0x02,0x01,0x00,0x82,0x20,
</span><span class='line'>0x01,0x00,0x00,0x07,0x01,0x7f,0xf7,0x18,0x01,0x00,0x00,0x05,0x00,0x00,0x00,0x4a,
</span><span class='line'>0x00,0x00,0x00,0x04,0x02,0x00,0x16,0x34,0x2e,0x32,0x39,0x30,0x37,0x37,0x34,0x38,
</span><span class='line'>0x33,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x65,0x2b,0x30,0x39,0x01,0x00,0x01,
</span><span class='line'>0x31,0x01,0x00,0x04,0x31,0x30,0x30,0x30,0x02,0x00,0x16,0x34,0x2e,0x32,0x39,0x30,
</span><span class='line'>0x37,0x37,0x34,0x37,0x39,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x65,0x2b,0x30,
</span><span class='line'>0x39,0x00,0x00,0x00,0x04,0x00,0x06,0x44,0x69,0x72,0x65,0x63,0x74,0x00,0x00,0x07,
</span><span class='line'>0x77,0x72,0x69,0x74,0x65,0x31,0x36,0x00,0x00,0x05,0x49,0x54,0x52,0x4f,0x4e,0x00,
</span><span class='line'>0x00,0x07,0x64,0x6c,0x79,0x5f,0x74,0x73,0x6b,0x00,0x45,0x4e,0x44,0x00,0x00,0x00,
</span><span class='line'>0x00,0x08,
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>conf.script_path で指定したスクリプトファイルのコンパイル結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "itron.h"
</span><span class='line'>#include "mruby.h"
</span><span class='line'>#include "mruby/irep.h"
</span><span class='line'>#include "/Users/monaka/git/monami-ya.mrb/monami-ya.mrb/build/jsp-bfin/threads/thread_script_0.cinc"
</span><span class='line'>
</span><span class='line'>static const uint8_t *thread_scripts[] = {
</span><span class='line'>  mrb_thread_script0,
</span><span class='line'>  NULL
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static mrb_state *mrb[1];
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>mrb_thread_bind_initialize()
</span><span class='line'>{
</span><span class='line'>  mrb[0] = mrb_open_sandbox(1);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void mrb_thread_bind_entry(VP_INT exinf)
</span><span class='line'>{
</span><span class='line'>  mrb_load_irep(mrb[(size_t)exinf], thread_scripts[(size_t)exinf]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ITRONタスクのエントリポイントと，カーネル初期化ルーチンのエントリポイント．</p>

<p>これらのうち，Cソースコードは，コンパイルされ libmruby.a に纏められます．</p>

<p>最終的に，TOPPERS/JSP の libitron.a とコンパイルするところは，monami-ya.mrb の外です．
イマイチ，パンチに欠けますが．
あんまりタイトにバインドさせると，OS毎のビルドシステムの差異に苦しめられることになるので，今のところはここまでです．</p>

<p>セルフビルドが可能な環境では，全てを隠ぺいすることは容易でしょう．</p>

<h2>設計方針</h2>

<p>設計方針は，繰り返しになりますが「ゆるふわ Ruby でガチ組み込み」です．</p>

<h3>Arduino 方面ではありません．</h3>

<p>Arduinoのスケッチみたいなのにも存在価値は認めますが，狙っているのは，そこではありません．
mruby と Arduino的なライブラリの組み合わせについては，<a href="http://d.hatena.ne.jp/kyab/20130806">kyab 氏が約1年ほど先行</a>しています．
そこを今更になって再発明する必要性は無いでしょう．</p>

<h3>Ruby で全ての記述をすべきとは思いません．</h3>

<p>ここで，monami-ya.mrb は全てのタスクを Ruby で書くことを強要しては <em>いない</em> ということは，注目して頂きたい点です．</p>

<p>大目に見ても，RiteVM の処理時間は，C で書く場合より 2桁のオーダで遅いでしょう．
なので，物理時間制約の大きなところでは，Cでタスク(スレッド)を書きたくなるはずです．
そもそも，いちいち Ruby に移植しないと使えないというのであれば，使う気が削がれます．</p>

<p>TOPPERS にせよ uT-Kernel にせよ，既に資産があるわけです．
それら資産を活用しながらも，新しいことができる．
そういう設計方針で，この機能は作られます．</p>

<h3>この機能だけで RTOS とのバインディングをする気はありません．(但:要検討)</h3>

<p>それと，この機能はスレッドバインディングに特化しています．
スレッドがある以上，スレッド間の通信機能が必要になります．
この設計では，通信機能は mrbgems として提供されるべき，と割り切っています．</p>

<p>静的OSの場合，mrbgems だけで通信機能のためのカーネルオブジェクト生成を行うのは
辛いはずですが…それは今後の課題です．</p>

<h2>本家へのマージは…?</h2>

<p>MITライセンスで出します．
誰かが本家にプルリクを投げることは止め用が無いですし，止めませんが．
常識的に考えて，マージは無いでしょう．
ターゲットが違いすぎます．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb が sandbox サポートを追加する理由]]></title>
    <link href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/"/>
    <updated>2014-06-15T00:58:37+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support/">先ほど</a>の続き．</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">sandbox の需要を理解するには，前提として，Webサーバと RTOS とで，スレッドの使われた方が違う，ということを，知識ではなく，腹に落としていないといけない．世界観の問題．&#10;mruby のコアを弄るような方々は，知識としては心得ているはず，だが．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/status/477722322862759938">June 14, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>など言って，実装理由を詳説しないのは，ちょっとイケ好かないかなということで．</p>

<p>本題に入るには，OS が提供する thread の使い方について，寄り道をする必要があります．</p>

<p>注: 本稿は，mruby の内部構造，特に，mrb_state と mrbgems の関係を理解していることを前提にしています．</p>

<!-- more -->


<h2>thread の使い方，2通り</h2>

<p>thread は，たかが機構なので，使い方は幾通りもありえます．</p>

<p>しかし，代表的なパターンとして，2通りの使い方があります．
たぶんデザインパターン的な名前がありそうですが，知らないのでオレオレ命名で．</p>

<h3>対称(symmetric)なスレッド</h3>

<p>同じデータ構造で同じ処理を持つスレッドが，多数あるパターンです．</p>

<p>非同期に起こる多数の要求を裁くときに，しばしば見られます．
具体例としては，サーバのワーカースレッドや，ファイルシステム内の処理などがあります．</p>

<p><img src="symmetric.png" alt="対称なスレッド" /></p>

<h3>非対称なスレッド</h3>

<p>複数のスレッドが，それぞれ異なるデータ構造を管理するパターンです．
データ構造が異なるのですから，各スレッドが行う処理も，当然異なります．</p>

<p>「そういう時はプロセス分けるだろ」と思った方は，POSIX や Windows に頭を侵されています．</p>

<p>多くの RTOS では，スレッドに相当する概念はあります．
しかし，プロセスに相当するリソース抽象化概念がありません．(注: 持っている RTOS もあります)</p>

<p>また，POSIX や Windows も，OS の内部では，スレッドに相当する概念はありますが，リソース抽象化の概念は無いか，希薄です．
OSが抽象化を提供しているので，当然です．</p>

<p><img src="asymmetric.png" alt="非対称なスレッド" /></p>

<h2>mruby のスレッドバインディングとmrbgems</h2>

<p>mruby は，言語としては，今のところスレッドを提供していません．
しかし，マルチスレッディングの要求は，上記の2通りのいずれにせよ，間違いなくあります．</p>

<p>mruby を下位 OS のスレッドとバインドする典型的手法として，スレッド毎に mrb_state を割り当てる手法があります．</p>

<p>私は mod_mruby のソースコードを精読したわけではないですが．
サーバへの mruby 活用の代表である， mod_mruby も，Apache のワーカースレッドに対し 1 つの mrb_state を割り当てているようです．
この場合は，各スレッドは「対称」です．
全ての mrb_state は，同じように初期化されて構いません．
使える mrbgems も全てのスレッド(mrb_state)で同じもので構いません．</p>

<h2>さて，本稿の本題．</h2>

<p>非対称なスレッド構成を取ったシステムを考えてみます．</p>

<p>実例として，uITRON, OSEK/VDX クラスの RTOS 上にファイルシステムとユーザアプリを mruby のみで作るとします．</p>

<p>構成としては，デバドラ + ファイルシステム + ユーザアプリになります．</p>

<p>デバドラとファイルシステムは，再利用性が高いので，おそらく mrbgems として実装するでしょう．
そして，非同期処理になりますので，(デバドラ + ファイルシステム)のスレッドと，ユーザアプリのスレッドに分けるでしょう．スレッド間通信も mrbgems として提供するかもしれません．
常識的な RTOS のアプリ設計です．</p>

<p>ここで，思い出してみましょう．
現在の mruby では，全ての mrb_state で，全ての mrbgems を共有します．
つまり，スレッドを分けても，ユーザアプリは，ファイルシステムを迂回して直接デバドラのメソッドを叩けます．</p>

<p><img src="sandbox.png" alt="sandboxの有無と非対称スレッド" /></p>

<p>これを気持ち悪くないと思う開発者が居たとしたら，別の職種にジョブチェンジしたほうがよいでしょう．</p>

<h2>なぜ他のmruby開発者はsandboxを必要と思わないのか．</h2>

<p>今のところ，mruby へ sandbox を仕掛ける実装は殆どみかけません．
mattn 氏が <a href="https://github.com/mattn/mruby-sandbox">mruby-sandbox</a> なる実験をしてはいますけれども．
私はかつて，<a href="https://github.com/mruby/mruby/pull/1844">lazy initialization なる提案</a>をしていて，これは sandbox を狙ったものだったのですが，意図がうまく伝わらなかったのか，フルボッコに終わりました．</p>

<p>実のところ，彼らでないので真の理由は解りません．
しかし，私の想像が及ぶ限りにおいて，必要と思わない理由は，2種類あります．</p>

<h3>説: Web サーバくらいまでしか考えてない</h3>

<p>ひとつは，&#8221;くみこみ！&#8221;など言いながらも，結局 web サーバのことまでしか考えが及ばないから．
対称なスレッドだけですむ世界なら，今の実装でも十分です．</p>

<p>もちろん，世界最高水準の開発者集団ですから，非対称スレッドの設計についても，頭では理解できておられるでしょう．
それと，腹に落として理解できるというのは，必ずしも一致しません．
技術というものの難しいところであります．</p>

<h3>説: コードゴルフに偏りすぎている</h3>

<p>もう一つは，組み込み系技術者たちは，小さな機器組み込みに偏りすぎているから．
ちっちゃいもの好きは，ニッポンの組み込みのガラパゴ特徴ですが，mruby も漏れずに思えます．
Mindstorms/NXT やらFM3-USBSTICKやら STM32F4 やら，RTOSを載せるのさえも一苦労な環境に，開発者たちの視線が集中しています．</p>

<p>コードゴルフは私も嫌いではないですが．
現在でもオンチップ 256KB は珍しくないマイコン世界．
MB 級の RAM がオンチップになるのは時間の問題なのになぁ…．
盆栽みたいなものですかね．</p>

<p>ともあれ，mrb_state をひとつ持たせるのがやっとの環境では，スレッドと mrb_state の組が複数存在する環境で起こることを想定するのは難しいでしょう．
私は，Mocloudos や mruby + TOPPERS + Blackfin といった，潤沢なスペックを持つ(とはいってもデスクトップやサーバに比べると極めて貧弱な)環境上で mruby を動作させています．
そのため，早期に気がついた，ということはあるでしょう．</p>

<h2></h2>

<p>というわけで，mruby で sandbox が何故必要なのか，なぜ本家に登場しないのか，ざざっと意見表明いたしました．</p>

<p>こう言ってはナンですが，今の体制のままだと，本家mrubyがベアメタルな機器組み込みに応用されるようになるのは，ずいぶんと先になるんじゃないかな…．</p>

<p>まあ，別に，&#8221;本家&#8221;に拘る必要も無いといえば無いのですが．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb での sandbox サポート]]></title>
    <link href="http://www.monaka.org/blog/2014/06/14/monami-ya-dot-mrb-sandbox-support/"/>
    <updated>2014-06-14T23:45:14+00:00</updated>
    <id>http://www.monaka.org/blog/2014/06/14/monami-ya-dot-mrb-sandbox-support</id>
    <content type="html"><![CDATA[<p>たぶん会社の公式サイトに乗るべき情報のような気もしますが．
まだ master ブランチどころか develop ブランチにも入っていないので，メモとして，こちらに書いておきます．</p>

<p>mruby の機器組み込み向け fork である monami-ya.mrb に，mrbgems の sandbox 機能を追加しました．
何故この機能が必要なのか，という話は<a href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/">後日する</a>として，どう使うかということを記しておきます．
master ブランチに入るまでに，API 等の変更があるかもしれません．</p>

<p>また，mruby 本体に取り込まれるかどうかは，解りません．</p>

<h2>機能概要</h2>

<!-- more -->


<h3>前提知識</h3>

<p>本家 mruby では，mrbgems による機能拡張がサポートされています．
これは，monami-ya.mrb でも同様です．</p>

<p>mruby は，複数の実行環境を持てます．
実行環境は mrb_state という構造体が代表します．</p>

<p>mrb_state は，mrb_open() の呼び出しによって作成されます．
mrb_open() の実行時には，build_config.rb で静的に指定した全ての mrbgems が，
mrb_state で使用するものとして初期化されます．</p>

<h3>sandbox が提供する機能</h3>

<p>mrb_state ごとに，利用する mrbgems を限定できます．
限定する mrbgems は，静的に指定します．</p>

<h2>実装</h2>

<p>実例として，monami-ya-mrb/mruby-sqlite3 と monami-ya-mrb/mruby-bin-sqlite3 のみを含む sandbox を挙げます．</p>

<p>monami-ya-mrb/mruby-sqlite3 は monami-ya-mrb/mruby-bin-sqlite3 に依存しています．</p>

<h3>build_config.rb への記述</h3>

<p>build_config.rb に，sandbox メソッドを記述できるようになりました．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MRuby::CrossBuild.new('jsp-bfin') do |conf|
</span><span class='line'>...
</span><span class='line'>  conf.sandbox('sqlite') do
</span><span class='line'>    gem :github =&gt; 'monami-ya-mrb/mruby-sqlite3'
</span><span class='line'>    gem :github =&gt; 'monami-ya-mrb/mruby-bin-sqlite3'
</span><span class='line'>  end
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>この例では &lsquo;sqilte&rsquo; という名前の sandbox を指定しています．
ブロック内の gem は，従来のと同じです．</p>

<p>このような記述があるとき，minirake を実行すると，build/jsp-bfin/mrbgems/gem_init.c には，従来に加えていくつかの定義が生成されます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void
</span><span class='line'>mrb_init_sqlite_sandbox(mrb_state *mrb) {
</span><span class='line'>  GENERATED_TMP_mrb_mruby_bin_sqlite3_gem_init(mrb);
</span><span class='line'>  GENERATED_TMP_mrb_mruby_sqlite3_gem_init(mrb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>mrb_final_sqlite_sandbox(mrb_state *mrb) {
</span><span class='line'>  GENERATED_TMP_mrb_mruby_bin_sqlite3_gem_final(mrb);
</span><span class='line'>  GENERATED_TMP_mrb_mruby_sqlite3_gem_final(mrb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>struct mrb_sandbox_inib mrb_sandbox_inib_array[] = {
</span><span class='line'>  {
</span><span class='line'>    mrb_init_sqlite_sandbox,
</span><span class='line'>    mrb_final_sqlite_sandbox,
</span><span class='line'>  },
</span><span class='line'>  { NULL, NULL }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>さらに， build/jsp-bfin/mrb_sandbox_id.h というヘッダファイルが生成されます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * IMPORTANT:
</span><span class='line'> *   This file was generated!
</span><span class='line'> *   All manual changes will get lost.
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>#define MRB_SANDBOX_SQLITE (1u)</span></code></pre></td></tr></table></div></figure>


<h3>依存性チェック</h3>

<p>もし， mruby-sqlite3 のみを指定し，依存性のある mruby-bin-sqlite3 を
含め忘れたとします．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MRuby::CrossBuild.new('jsp-bfin') do |conf|
</span><span class='line'>...
</span><span class='line'>  conf.sandbox('sqlite') do
</span><span class='line'>    gem :github =&gt; 'monami-ya-mrb/mruby-sqlite3'
</span><span class='line'>  end
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>このような依存性の破れを含む記述で minirake を実行した場合には，エラーとなります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(in /Users/monaka/git/monami-ya.mrb/monami-ya.mrb)
</span><span class='line'>rake aborted!
</span><span class='line'>GEM mruby-bin-sqlite3 not found in the sandbox `sqlite'
</span><span class='line'>rakefile:27:in `load'</span></code></pre></td></tr></table></div></figure>


<h3>実行時の sandbox 生成</h3>

<p>API として mrb_open_sandbox() および mrb_open_sandbox_allocf() が追加になりました．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mrb_state* mrb_open_sandbox(unsigned int sandbox_id);
</span><span class='line'>mrb_state* mrb_open_sandbox_allocf(mrb_allocf, uintptr_t ud, unsigned int sandbox_id);</span></code></pre></td></tr></table></div></figure>


<p>引数 sandbox_id は，mrb_sandbox_id.h にある定義を与えます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  mrb = mrb_open_sandbox(MRB_SANDBOX_SQLITE);</span></code></pre></td></tr></table></div></figure>


<p>sandbox_id が 0 のときは，mrb_open() を呼んだ時と同じになります．
すなわち，登録されている全ての mrbgems が初期化されます．</p>

<p>どの sandbox を指定したかは，mrb_state に保持されます．
そのため，mrb_state を破棄する際には，単に mrb_close() を呼び出してください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[過去の事例だとこの手のOSSは長期的には失われる結果になりそうです]]></title>
    <link href="http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly/"/>
    <updated>2014-05-31T09:52:30+00:00</updated>
    <id>http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly</id>
    <content type="html"><![CDATA[<p>おお，さすが OSS 世界の長老．キレの良い予言でございます．</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/monamour555">@monamour555</a> まあ、どうforkするかはご自由で私から強制することはできませんが、過去の事例だとこの手のforkしたOSSは長期的には失われる結果になりそうです。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/status/472033974219325440">May 29, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<!--
https://twitter.com/yukihiro_matz/status/472033974219325440
@monamour555 まあ、どうforkするかはご自由で私から強制することはできませんが、過去の事例だとこの手のforkしたOSSは長期的には失われる結果になりそうです。
-->


<p>全く御意でございます．低頭拝聴です．</p>

<p>賤民である私も，OSS という言葉が無かったころ，Ruby が世に放流された頃には，この世界を見ていた気も無くもないですが．
きっと気のせいですね．
uClinux, Xen, Android で kernel の fork が起こったのは，失われる運命だったのですね．だめだ fork はダメだ．失われる！だめだ！</p>

<h2>やっぱ fork はダメだ失われる！</h2>

<p>あーやっぱり，私が書いたコードなんて，消えちゃうよなー．すべからく，そういう人生だったしなー．何しろ長老がそう言っているもんなー．
って陰惨に思いながら，残りのコードを書いていたのですが．</p>

<p>…あれ?</p>

<!-- more -->


<p>コンパイルが通らないよ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mrb_proc_new(mrb, mrb-&gt;irep[n], </span></code></pre></td></tr></table></div></figure>


<blockquote><p>んー? んー? ググル先生に聞いても解法がわからないよー．コピペできなよー．えーん．
こんな単純なところでコピペできない OSS なんか，使えないよー．マサカリ担いだ人しか使えない処理系なんてー (棒</p></blockquote>

<h2>自分で fork しまくる OSS は長期的には失われれる運命になりそうです．</h2>

<p>あはは，忘れていました．
IREP の扱い方，途中で，変わりました．
mruby のコア開発者なら，当たり前の知識ですよね．アテクシ，死ねばいいのに．</p>

<p>コードベースの進化は，OSS の華です．いいんじゃないですかね，
ただし，ユーザがその変更についていけていない OSS が，長期的には失われなかったのかな．</p>

<h2>タマにはマジメに．</h2>

<p>賤民の私に言わせてもらえるなら，これ，良くない兆候ですよ．</p>

<p>この節だけは，マジメに言いますけれど．</p>

<p>私が fork したコードなんてどうでもよいです．</p>

<p>良くない兆候ですよ． マージされ得ないオレオレ fork を繰り返して周りがついてこれなくなっている，<strong><em>本家のコード</em></strong> が．</p>

<p>過去の事例によると．
ブログエントリって，エッジ効いた技術に平民がどれだけついてこれているかを示す，解りやすい指標ですからね．</p>

<p>何言ってやがるんだと思うなら， mrb_proc_new か何かでググりゃいいんじゃないですかね．
軒なみ mrb->irep[n] ですから，記述が．少なくとも本稿執筆時点では．</p>

<p>角が立つのを承知で，(でももう，どーでもいいので)，事例を言えば，uT 以降の T-kernel とか，新世代以降の TOPPERS とかですね．
技術的に正しいながらも，説明不十分でプレゼンスを落としたOSS，しばしば見かけるのは気のせいですかね．</p>

<p>mruby，どうなのですかね? &ldquo;長期的な視点&#8221;を持っているグルには，答えが見えているに違いない．信じるのじゃ．
…ので，大丈夫ですかね．</p>

<p>どうなのですかね?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[機器組み込み屋がRailsアプリを出した理由]]></title>
    <link href="http://www.monaka.org/blog/2014/05/24/why-i-create-rails-app/"/>
    <updated>2014-05-24T05:57:08+00:00</updated>
    <id>http://www.monaka.org/blog/2014/05/24/why-i-create-rails-app</id>
    <content type="html"><![CDATA[<p>会社名義で出したサービスの裏話．</p>

<p>機能としては，ソフト屋さんから別段の注目を浴びるほどのものでもなく．
プレスリリース等派手なことはしませんでしたが．
<a href="http://www.monami-ya.jp/blog/2014/05/24/movsign-map-redirect-beta/">合同会社もなみ屋の名義で，Webアプリをリリース</a>しました．</p>

<!-- more -->


<p>ほんと，機能としては大したものではないです．</p>

<ul>
<li>緯度経度情報に対して，短縮URLを発行する．発行した人しか編集はできない．</li>
<li>短縮URLの呼び元のHTTPヘッダを読んで，適切なURL (Android だったら Android Mapsとか，フィーチャーフォンなら Google Static Maps とか)に飛ばす．</li>
<li>どの短縮URLが何回呼ばれたか，統計を取る．</li>
</ul>


<p>やる気になれば，誰でもやれるネタです．
しかし，調べてみたところ，意外なことに，全く同一の機能を提供するサービスは無いようです．</p>

<h2>別に遊んでいるわけではなくて</h2>

<p>たぶん，もなみ屋を知っている人にとって，リリース告知を受け取った時の第一声は，「機器組み込み屋がなに Rails で遊んでんの?」かなと思います．</p>

<p>でもこれ，実は，(もなみ屋にしては珍しく!)，技術先行ではなくて，需要先行のサービスだったりします．
ファーストユーザが既に決まっています．どうしたんだ，地に足付けているなんて，弊社らしくないぞ．</p>

<h2>やっぱり紙は最強だから．</h2>

<p>もなみ屋の活動拠点は，浅草が近くてスカイツリーも近く，外国人向けのゲストハウスも多いという，IT活用型観光にとっては最高のテスト環境だったりするわけです．</p>

<p>そんななかで，徐々に判ってきたことなのですが．
スマホ街歩きって，技術者と一部のオタクだけが盛り上がりはするけれども，実用的ではないのですよ．
(別に特定地区の頑張りを dis る意図は無いです)</p>

<p>紙，印刷物っていうのは，やはり最強です．
シャチハタスタンプのスタンプラリー，最強です．
A3折りたたみのグルメマップ，最強です．</p>

<p>次点で，パッシブNFCタグ辺りかな…．電池交換不要なパッシブタグは，紙に準じます．
使える端末が少ないじゃん，というデメリットもありますが．</p>

<p>BLE…うーん．まあ，保守体制が盤石なら．</p>

<p>専用スマホアプリ? ダメでしょ．全然ダメ．
地図の AR マッピングとか，カメラと液晶をブン回して，どんだけ電池持つと思ってるのよ，って話ですよね．(…言っちゃった)</p>

<p>しかし，道案内(ナビアプリ)は，重要です．
特に土地勘のない人を相手にする観光分野では．
この点で，スマホ・タブレット・ガラケーは大事．</p>

<p>そんなわけで，「観光客の満足度を高めたまま帰途について頂くには，offine to online の連続性を持たせつつ，どれだけ offilne の情報で済ませるかというのが重要である．」
てなことが見えてきたわけです．バッテリーを使わないことの正義，みたいなものを．</p>

<p>具体的に言うなら，印刷物や掲示物として存在するQRコードやパッシブNFCタグから，地図アプリへのスムーズな連携，とかですね．</p>

<h2>でも，統計情報が取れないと</h2>

<p>じゃあ QRコードに Google Maps へのリンクを込めときゃいいじゃん，という話なのですが．
それには 2つほど課題があります．</p>

<p>一つは，デバイスの多様性．
ガラケーとAndroidとiOSとで，ユーザにとって自然と思えるリダイレクト先が違うわけです．
Android と iOS については，吸収するバッドノウハウがありますけれど，ガラケーはつらい．
しかも地方から上京する方の中には，ガラケー所持の方も少なくないわけです．</p>

<p>あともう一つは，統計情報取得の問題．
観光って，概ね何かしら自治体からの公金が入ります．
そうすると，成果の測定が求められます．
しかし，QR コードに Google Maps へのリンクを含めるだけだと，どこにもログが残らないわけです．</p>

<p>短縮URLサービスの多くは，統計機能を持っています．
しかし，観光担当の方はITに詳しいとは限らないので，いろいろとつらい．
できれば専用サービスで，地名，緯度経度情報くらいで管理したい，と．
それなら，パート職員の方でも片手間でできるわけです．</p>

<h2>てなかんじで</h2>

<p>もなみ屋というのは，RTOS やら開発ツールやらのサポートという，ハードボイルドな商品も
取り扱ってはいるのですが．
結局のところ，人々の生活を愉しくするためのお手伝いを，ソフトウェアを通じて提供するというのがミッションなのであります．</p>

<p>スマホがパッテリー食いで，バッテリーのエネルギー密度が今のままなら，スマホを使わないシステムを提供する．これはミッションに矛盾しないので，始めたわけなのであります．</p>

<p>この話に限らず，地元で観光資料を作ろうとしているのだけれど…．
という方のご相談にも乗れますので，ご縁がありましたらお声掛け下さい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファンディングのためのファンディング，始めます．(その2)]]></title>
    <link href="http://www.monaka.org/blog/2014/05/19/funding-for-funding-2/"/>
    <updated>2014-05-19T07:09:22+00:00</updated>
    <id>http://www.monaka.org/blog/2014/05/19/funding-for-funding-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org//blog/2014/05/19/funding-for-funding/">前回</a>の続きです．</p>

<!-- more -->


<h2>オンラインのカード決済サービス，日本の状況</h2>

<p>前回，米国での状況は説明しました．
小規模法人や個人が，ネット通販のサイトを開いていることからお判り頂ける通り，
オンラインのカード決済サービスは，いくつかあります．</p>

<p>しかし，目標額達成後，速やか(数営業日以内)に代金を回収できるのは，今のところ，
<a href="http://webpay.jp">WebPay</a> と <a href="https://fastpay.yahoo.co.jp/">Yahoo!ウォレットFastPay</a> の2社に限られます．とはいえ，今後，類似のサービスは，日本国内でも増えていくことでしょう．</p>

<p>現存する両社のAPIは，かなり似通っています．
(<a href="http://blog.webpay.co.jp/post/webpay%E3%81%A8yahoo%E3%82%A6%E3%82%A9%E3%83%AC%E3%83%83%E3%83%88fastpay%E3%81%AF%E7%AB%B6%E5%90%88%E3%81%A7%E3%81%99%EF%BC%81%E6%AD%93%E8%BF%8E%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81%E5%BE%B9%E5%BA%95">WebPayの運営者ブログで示唆</a>されているとおり，FastPay が WebPay の互換を狙っているように見えます．)</p>

<p>しかしながら，クラウドファンディングサイト構築のためのオープンソースが用いている <a href="https://www.balancedpayments.com/">Balanced Payment</a> や <a href="https://payments.amazon.com/home">Amazon Payments</a> とは，すくならず API が異なります．</p>

<p>やや悲観的な状況です．
しかし，逆説的にいうと，この部分を突破すれば，日本でもクラウドファンディングサイトの構築は圧倒的に容易になるということでもあります．</p>

<h2>この問題の解決って，もしかして社会起業的．</h2>

<p>例えば，地方自治体で，地元の産業活性化のために，クラウドファンディングを使いたいというような案件は，既にいくつかあります．最近だと<a href="http://www.city.yubari.lg.jp/contents/municipal/funding/">夕張市</a>や<a href="http://www.pref.hokkaido.lg.jp/kz/csk/crowdfundingsogyoumodel.htm">北海道</a>で見かけました．
各地観光協会や商工会など含めれば，潜在需要は大きなものでしょう．
それと，Fablab や発明クラブのような，民間団体にも需要はあるでしょう．</p>

<p>しかし，私は，それらの大きな潜在需要に食い込もうという気は，今のところ，ありません．
それは自分のビジネスではありません．</p>

<p>私は，単に私のビジネスのスタートアップの問題を解決したいだけなのです．
日本で使えるカード決済のモジュールを，既存のオープンソースに付け加えたい．</p>

<p>しかし，その副産物には，社会起業的なインパクトが…そんな気がしているのですが，どうでしょうか．</p>

<h2>問題: 日本人は，放っておいても作る人に寄付/投資をするか</h2>

<p>という感じで，話が大きくなりました．巻き戻しまして…．</p>

<p>私には，私が行おうとするビジネスに対して，一つだけ不安があります．
それは，「日本人は，放っておいても作る人に寄付/投資をするか否か」という点です．</p>

<p>また海外の比較になりますが，海外では，無料で入手できるオープンソース製品に対して，
バグフィックスや機能拡張に対してお金を払える，または投資を募ることができるという
サイトがいくつかあります．しかし，それらのサイトで，日本人らしきアカウントの姿は
見かけません．</p>

<p>言語の壁ということもあるかもしれませんが，もしや，</p>

<blockquote><p>どうせ，作りたい奴は勝手に作るし，できあがった成果(回路図やソースコードなど)が無料でwebサイトに上がったら使わせてもらうわ</p></blockquote>

<p>というメンタリティが主流だとすると，日本では，「電子工作好きのための小規模クラウドファンディング」は，成り立たないかもしれません．
その辺りについて，読みきれずにいます．</p>

<h2>お願い: テストマーケティングをさせてください</h2>

<p>「長々文章を読ませておいて，さいご，これかよ…」ということで，すみません．</p>

<ul>
<li>私は，オープンソースのクラウドファンディングサイトを日本で使えるようにするための決済モジュールを，夏前を目処に，作ります．</li>
<li>決済モジュールは WebPay に対応させます．FastPay は互換路線なので，追って使えるようになるはずです．</li>
<li>サイト用のオープンソース製品として，<a href="https://github.com/crowdtilt/crowdtiltopen">CrowdtitltOpen</a> を使います．</li>
<li>決済モジュールは，MIT License として公開します．改変も含めて自由にお使いいただけます．</li>
<li>目標額に未達でも，おそらく作ります．作りたいので．ただもしかすると，少し馬力は下がります．</li>
<li>目標額を超えたら，その分は，メッセージ和訳など，広く日本国内で使えるようにするために使います．</li>
</ul>


<p>ちなみに，作業は私が行う想定です．誰かに頼むにしても私が監修します．
本件に関する私のスペックは，下記のとおりです．</p>

<ul>
<li>Lokitron が提供しているサイトを FastPay に対応させるという hack をしました．(未運用:デモサイトは上がっています．)</li>
<li>Ruby on Rails のスキルは，そこそこ．</li>
<li>Ruby のスキルは，そこそこ．</li>
<li>mruby については，全網羅のスキル．</li>
</ul>


<p>本件のクラウドファンディングのサイトとして，オープンソース向けののクラウドファンディング機能がある <a href="https://www.bountysource.com/">Bountysource</a>を使います．
国内のほうが心理的に安心かもしれないと思いつつ，このお話を国内の大手クラウドファンディングサイトに持ちかけるほど，私の心臓は強くはありませんでした．</p>

<p><a href="https://www.bountysource.com/teams/crowdtiltopen-ja/fundraiser">ファンディングサイトへのリンクはこちら</a>です．</p>

<p>極めて勝手なお願いですが，ご協力頂ければ幸いです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファンディングのためのファンディング，始めます．(その1)]]></title>
    <link href="http://www.monaka.org/blog/2014/05/19/funding-for-funding/"/>
    <updated>2014-05-19T05:43:18+00:00</updated>
    <id>http://www.monaka.org/blog/2014/05/19/funding-for-funding</id>
    <content type="html"><![CDATA[<p><strong>社会起業を行おう，という結論に達しました．</strong></p>

<p>いや，いまさら，意識高い大学生のようなことを思い立ったわけではありません．
また，まだ40代前半ですから，社会貢献の余生を模索するには早すぎます．
私は私のビジネスも続けます．</p>

<p>ただ，私が取り掛かりたいビジネスの <strong><em>副産物</em></strong> に，社会起業的価値があるかもしれないと，ふと思いついたのです．</p>

<h2>当初，私が考えたこと</h2>

<!-- more -->


<p>私が何を考えたのかは，既に tweet し，<a href="http://togetter.com/li/668857">「クラウドファンディングサイトの未来」というタイトルで togetter にまとめました</a>．</p>

<p>一連の Tweet に対して，いくつかの反応も頂きました．
それぞれのご意見(共感も反論も総論賛成各論反対も)に傾聴した上で，小規模クラウドファンディングサイトの登場は必然だろうと思うようになりました．</p>

<p>当初，私が必要性を感じているのは，個人レベルの電子工作のコミュニティへの，クラウドファンディングでした．
このコミュニティは，オンライン/オフライン問わず，ソーシャルネットが，ある程度できています．
よって，「〇〇を作ります」と言っている人の技術レベルも，プロジェクトのリスクも，投資する側は，ある程度分かります．
大手サイトでは緻密に行わなければ担保できないリスク管理のコストは，ある程度低減できます．
低コストは，手数料を下げたり，より良いサービスの提供に振り分けたりできる，ということに繋がります．</p>

<p>このサービスは，大化けはしないでしょうけれども，赤字にはならない程度の需給はありそうに，私は思います．
なので，私は(もしくは私の会社は)，上記のクラウドファンディングサイトの構築に向けて，一定量の開発リソースを割り振ることにしました．</p>

<h2>クラウドファンディングサイトを構築する方法</h2>

<p>実は，海外では，クラウドファンディングは，もっと気楽に立ち上げられます．
そのための，オープンソースや決済基盤が存在しています．</p>

<p>有名どころを挙げるなら，<a href="http://lockitron.com/">Lockitron</a> があります．
彼らは，自社製品のためのクラウドファンディングサイトを作って，<a href="https://github.com/lockitron/selfstarter">オープンソースで公開</a>しています．</p>

<p>Lockitron のサイトを応用して自社のためのクラウドファンディングサイトを作った例は，記事となり， <a href="http://makezine.jp/blog/2013/03/roll-your-own-crowdfunding-the-scout-story.html">makezine.jp で読むことができます</a>．</p>

<p>また，<a href="http://www.moongift.jp/2014/03/crowdtiltopen-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%95%E3%82%A1%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/">クラウドファンディングサイトのための，もっと大規模なオープンソース製品</a>もあります．</p>

<h2>日本で構築する際の障壁</h2>

<p>ところが，日本では，大きな障壁があります．</p>

<p>それは，決済手段です．</p>

<p>クラウドファンディングは，当たり前ですが，クレジットカードへ課金をし(正確にはオーソリをかけ)，目標額の達成如何で集金をしたり返却をしたりという機能が不可欠です．</p>

<p>このような決済サービスは，米国では数多くあります．
しかし，先ほどご紹介した <a href="http://togetter.com/li/668857">togetter に含まれる tweet</a>でも示唆したのですが，日米の金融行政や租税関係により，日本から，米国のサービスを使うには，様々な制約があります．</p>

<p>具体的には，米国の金融機関に口座を持つ必要がある，租税に関する書類を米国に出す必要がある，送金に時間がかかることがある，などです．</p>

<p>つまり，日本では，海外(主に米国)では簡単に行えるクラウドファンディングサイトの構築が，容易ではありません．</p>

<p>もちろん，決済手段だけが問題というわけではありません．</p>

<p>集客のようなビジネス的な問題は当然として，特定商取引法を始めとする消費者保護行政や，言語(日本語と英語)の問題など，課題はいくつかあります．
しかし，特定商取引法は適切に表示すればよいですし，サイトに表示される文字は技術的には解決可能な問題です．</p>

<p>やはり，決済手段は，大きな課題として立ちはだかります．</p>

<h2></h2>

<p>以上，私がクラウドファンディングについて発言をしだした経緯と，海外での状況，日本での障壁について簡単にまとめました．</p>

<p>ここまでの話でしたら，「アメリカは，いいなぁ．それに引き換えニッポンときたら」という愚痴です．</p>

<p>長くなりましたので，<a href="http://www.monaka.org//blog/2014/05/19/funding-for-funding-2/">次回</a>と2回に分けたいと思います．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ピザ屋がお酒も始めました]]></title>
    <link href="http://www.monaka.org/blog/2014/04/30/pizzafactory-meets-brew/"/>
    <updated>2014-04-30T07:56:48+00:00</updated>
    <id>http://www.monaka.org/blog/2014/04/30/pizzafactory-meets-brew</id>
    <content type="html"><![CDATA[<p>たまには技術の話．
PizzaFactory の話は pizzafactory.jp に書くべきなのだけれども，諸般(外部)の事情で正式リリースとは言えないので．</p>

<h2>PizzaFactory for Homebrew アルファリリース</h2>

<h3>背景</h3>

<!-- more -->


<p>私個人としては，OSX でパッケージ管理ソフトを使うのは，PPC だった時代に fink を使ってあまりよい印象を持っておりませんでした．
そんなわけで，<a href="http://sourceforge.jp/projects/pf3gnuchains/releases/">OSX版のPizzaFactoryも，pkg を作って配ってきた</a>わけです．</p>

<p>しかし，pkg は，それなりに手間のかかること．
更新頻度が私の忙しさで決まってしまうのが悩みでした．</p>

<h3>Homebrew</h3>

<p>で，最近になって，TOPPERS のカーネルコンフィギュレータを作らねばならなくなって，boost のインストールが必要になり，ココロが折れました．
そして Homebrew に助けてもらいました．</p>

<p>OSXのデフォルトのコマンドを上書きしないという方針，気に入りました．
あと，Formula 既述の簡潔さも．</p>

<p>それに，Linux や MinGW/MSYS への対応も，そこそこ進んでいる様子．</p>

<p>ああ，もう PizzaFactory も Homebrew で配っちゃえばいいんじゃないの? と．</p>

<h3>PizzaFactory for Homebrew のインストール方法</h3>

<p>Homebrew のインストール方法は割愛します．
brew doctor の対応がある程度済んだら，PizzaFactory 用の tap を追加します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap PizzaFactory/commandline</span></code></pre></td></tr></table></div></figure>


<p>つらつらと読み込まれてきます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cloning into '/usr/local/Library/Taps/pizzafactory/homebrew-commandline'...
</span><span class='line'>remote: Counting objects: 114, done.
</span><span class='line'>remote: Compressing objects: 100% (39/39), done.
</span><span class='line'>remote: Total 114 (delta 82), reused 104 (delta 73)
</span><span class='line'>Receiving objects: 100% (114/114), 11.70 KiB | 0 bytes/s, done.
</span><span class='line'>Resolving deltas: 100% (82/82), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>Tapped 67 formula</span></code></pre></td></tr></table></div></figure>


<p>続いて インストール可能なツールチェインの一覧を得ます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew search 'pf-gnuchains4x-' | grep -v 'lib$'</span></code></pre></td></tr></table></div></figure>


<p>ズラズラっと出てきます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pf-gnuchains4x-arm-eabi
</span><span class='line'>pf-gnuchains4x-arm-elf
</span><span class='line'>pf-gnuchains4x-avr-elf
</span><span class='line'>pf-gnuchains4x-bfin-elf
</span><span class='line'>pf-gnuchains4x-fr30-elf
</span><span class='line'>pf-gnuchains4x-h8300-elf
</span><span class='line'>pf-gnuchains4x-i386-elf
</span><span class='line'>pf-gnuchains4x-lm32-elf
</span><span class='line'>pf-gnuchains4x-m32c-elf
</span><span class='line'>pf-gnuchains4x-m32r-elf
</span><span class='line'>pf-gnuchains4x-m68k-elf
</span><span class='line'>pf-gnuchains4x-microblaze-elf
</span><span class='line'>pf-gnuchains4x-mips-elf
</span><span class='line'>pf-gnuchains4x-mips64-elf
</span><span class='line'>pf-gnuchains4x-mips64-toppershrp
</span><span class='line'>pf-gnuchains4x-nios2-elf
</span><span class='line'>pf-gnuchains4x-powerpc-elf
</span><span class='line'>pf-gnuchains4x-rx-elf
</span><span class='line'>pf-gnuchains4x-sh-elf
</span><span class='line'>pf-gnuchains4x-v850-elf
</span><span class='line'>pf-gnuchains4x-xstormy16-elf
</span><span class='line'>pf-gnuchains4x-xtensa-elf</span></code></pre></td></tr></table></div></figure>


<p>arm-eabi ならば，次のようにしてインストールします．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install pf-gnuchains4x-arm-eabi</span></code></pre></td></tr></table></div></figure>


<p>お手軽ですが，本稿執筆時点では，ソースコードからビルドします．
1〜2時間は覚悟してください．</p>

<p>この点が，正式リリースと言わない理由です．
Homebrew には，bottle と呼ばれる，バイナリパッケージによるインストールのサポートがあります．
しかし，これが <a href="https://github.com/travis-ci/travis-ci/issues/2202">Travis-CI のバグ修正のため</a>滞っています．</p>

<p>なので，今のところは，どうしても欲しくて欲しくてという方のみお勧めします．</p>

<p>あと，<a href="https://github.com/PizzaFactory/homebrew-commandline/">tapへのプルリクは歓迎</a>です．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[失敗分析: 債務のこと]]></title>
    <link href="http://www.monaka.org/blog/2014/04/20/postmortem-3/"/>
    <updated>2014-04-20T14:59:59+00:00</updated>
    <id>http://www.monaka.org/blog/2014/04/20/postmortem-3</id>
    <content type="html"><![CDATA[<p>破産という不幸ネタであんまり引っ張るのは，なんか下品だなぁと思いつつ．
という前口上は<a href="http://www.monaka.org//blog/2014/04/11/postmortem-1/">毎度のこと</a>なので省略です．</p>

<p>そして，いつもながら，ご指摘頂いた方のお名前は伏せます．</p>

<h2>前回のおさらい</h2>

<blockquote><p>破産後に社会からどんな制裁を受けると予想しているのか…とか、債権者に対する申し訳ないという気持ちが全く無いのか…とか</p></blockquote>

<p>このtweet，<a href="http://www.monaka.org//blog/2014/04/20/you-may-kill-someone/">前回</a>も引用しましたが，質問に答えませんでした．</p>

<p>「ねえねえ，今どんな気持ち？」というアスキーアートが想起されるような，軽率な質問．
一般論として，こういう質問は危険です．
野放しにすると死人が出かねないので．</p>

<p>その点，重々に押さえた上で．</p>

<p>しかし，私は，(手続きの全てを終えておらず，渦中のまっただ中ですが)，心理的には整理がついています．
2つの質問に答えておきたいと思います．</p>

<h2>Q. 破産後に社会からどんな制裁を受けると予想しているのか</h2>

<p>質問の1つめについては，質問が「社会から」という曖昧模糊な表現なので答えづらい…．</p>

<p>答えづらいというのは，都合が悪いというのではなくて，曖昧過ぎて具体的に答えようがないわけです．
普通の破産は民事事案であり刑法事案ではありません．
国家が代表するような種類の社会から制裁を受けることは無いので．</p>

<p>とはいえ，曖昧模糊を解釈した上で言うならば，という見解はあって，それは本稿の後半で．</p>

<h2>Q. 債権者に対する申し訳ないという気持ちが全く無いのか</h2>

<p>質問の2つめについて，ストレートにいえば，申し訳ないと思いますよ．
建前でなく，本音で．
借りたものは返す，払うものは払う．
これ，言うまでもなく，商売のキホンのキですからね．</p>

<p>申し訳ないと思わないはずがないです．
日本の義務教育を受けて，通信簿の道徳の欄に問題がない人なら．</p>

<p>最初の起業をしてから約12年，急激に資金繰りが悪化してギブアップまで2年として差し引き，ざっくり10年間です．
この期間は，綱渡りながらも信用を得て商売していたわけですし．信用を得る程度の，最低限の商倫理はある(あった)ってことです．</p>

<h2>己の商倫理と現実との折り合いの付け方と，教訓</h2>

<!-- more -->


<blockquote><p>ということは、お役所なり裁判所なりというのは、結婚という、ひとつの法に定められた形式をとった男女に関しては、愛情という接着剤の効果をこの上なく信じているのか、ああしなさい、こうしなさいということは言わないけれども、一度、離婚という、社会の慣習を破り秩序を乱すような行動に出る者がいると、そんな奴の責任感なぞとても信じられないから、きちんと文書にして年数まで明記して</p></blockquote>

<p>上記は，小説家/エッセイストの景山民夫氏が書いたエッセイに「<a href="http://www.amazon.co.jp/o/ASIN/4041736013/monamour555-22">離婚調停書</a>」の引用です．</p>

<p>離婚と破産は違いますが，似たところがあります．
「オマエは社会の慣習を破るダメなヤツだから，代わりに裁判所が一線を引いてやろう．」という点で．</p>

<p>刑事にせよ，民事にせよ，裁判所は，その国家の良心の代表です．ときどき，変な判決を出すのも含めて．
「&#8221;申し訳ない&#8221;という気持ちに高低などないっ！」とドヤ顔するのも正論ですが，日本の良心たる裁判所，その論拠となる破産法が回収の優先度を決めていることもまた事実です．</p>

<p>破産法の条文や運用について文句のある方は，裁判所に駆けこむなり，最高裁判所裁判官国民審査のときに全員に×をつけるなり，国政選挙に積極的に関わるなりして頂ければ宜しいかと思います．</p>

<h2>残債との折り合いの付け方の方針</h2>

<p>極端にシンプルに考える．
これは，精神状態が不安定になるような事態にあって，自壊せずに過ごす唯一の方法です．</p>

<p>残債についても，シンプルに考えると，
「残債があるところとは，未来永劫，お付き合いの余地は頂けません」ということになります．</p>

<p>当たり前のことです．
約束の不履行があれば，その相手とはその先お付き合いできません．
裁判所が介入するような事案でなくても，同様ですし．</p>

<blockquote><p>免責5年過ぎたらまた元通りになるとでも思っているのだろうか</p></blockquote>

<p>などいうtweetも見かけましたが，「そんなわけないでしょw．そんな仮定を思いつくほうがどうかしてるwwww」です．</p>

<h3>金融系残債との折り合い</h3>

<p>開き直りと自分でも思いつつ，しかし「すみません．でも優先度は低いです」</p>

<p>金融系負債，つまり融資やクレジットカードなどは，利子に，保険料に相当する額(リスクプレミアム)が含まれています．</p>

<p>ふつう，怪我をして生命保険を使うときに，保険会社に「損をさせてすみません」とは言いません．
もちろん，頻繁に怪我をしたり，大病をしたりすると，生命保険の更新は拒否されることがあります．</p>

<p>同様に，免責から5年経ったからといって，お金を借りられるとかクレジットカードが作れる，なんて有り得ません．
貸し手にとってみれば，リスク管理上，当然の判断でしょう．</p>

<p>加えて，信用情報データは，相互接続されていて，別の会社ならOKというものでもありません．
つまり，人生を通じて，短期長期を問わず，金融機関から融資を受けるという選択肢は，ほぼ無くなります．</p>

<p>これを「社会からの制裁」と受け取るかは，その人次第でしょう．
私は，私自身のことを「制裁などではなく社会の合理であり，自業自得だ」としか思いませんが．</p>

<p>もし仮に，5年経って，借りられる日が来たとしても，私はたぶん融資での資金調達は行わないでしょう．
既に，私は私のことを，どこか信用していませんから．</p>

<p>そんなわけで，折り合いの付け方は，「これからは無借金でやっていきます」と．</p>

<h3>未納税等との折り合いの付け方</h3>

<p>倒産というのは，突然死ですから，未納税(社会保険料や労働保険料など含む)の未納は残ります．
国家から見れば，法人というのは，稼いで納税するための機械です．
それを履行できないということは，恥ずかしいことです．
しかも，旧破産法では，税金関係は，分配の優先度が高かったものでした．</p>

<p>しかし，現破産法では，労働債権よりも地位が下がっています．
折り合いの付け方としては，法律がそのように変わるものならば，労働債権を，その瞬間は優先すべきである．</p>

<p>折り合いの付け方は，「納税での貢献は，改めて頑張ろう．」</p>

<h3>買掛金との折り合いの付け方</h3>

<p>買掛金についてトラブルが起こると，同業では再起不能です．
そのことは，業績が良い時でも自覚的でした．
なので，自社開発を常としていましたし，買掛金が長く残らないよう，支払いサイトはなるべく短くするようにしていました．</p>

<p>しかし，結果として1社であれ残債が残ったのは，痛恨の極みです．
(まだ債権者集会前なので集計が取れていませんが，今回，2社破産のうち，未払い買掛金は1社数万円だろうと思います．)</p>

<p>金融系の残債ほどには，リスクプレミアムは乗っかっていないと思うので，申し訳ないとは思うのですが．
折り合いとしては金融系と同じになります．</p>

<h3>労働債権との折り合いの付け方</h3>

<p>労働債権…言い換えると，未払い給与です．
新破産法では，ほぼ最優先の債権です．
しかし私は，この辺りで，今も悔やむミスをいくつかしています．</p>

<p>長くなりましたので，その辺りは，次回以降に．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[無責任な倫理観は，'無責任な'人を殺すかもしれない]]></title>
    <link href="http://www.monaka.org/blog/2014/04/20/you-may-kill-someone/"/>
    <updated>2014-04-20T08:10:00+00:00</updated>
    <id>http://www.monaka.org/blog/2014/04/20/you-may-kill-someone</id>
    <content type="html"><![CDATA[<p>今回の日記，書くべきかどうかものすごく悩みました．
自己擁護とギリギリの話なので．</p>

<p>「当事者であるオマエが言うな」という反応は，折込み済みとして，書き始めます．</p>

<h2>Twitterで頂いた反応(mention)と私の感想</h2>

<blockquote><p>破産後に社会からどんな制裁を受けると予想しているのか…とか、債権者に対する申し訳ないという気持ちが全く無いのか…とか</p></blockquote>

<p>この方，既に当該 tweet を消しておられるようなので，お名前は伏せます．
軽くググッたところ，粘着荒らし系で単独スレが立つくらいの方なので，言いたいことと tweet とに乖離があるのかもしれません．</p>

<p>私は，鈍感力はあるほうです．
また，破綻してから2年近く経っていますから，いろいろとココロの整理がついています．</p>

<p>そんな私の，読後の第一印象は，「あんた，ヘタすると，人殺すよ．もしかすると，あんた自身も」です．</p>

<h2>倒産社長の心理</h2>

<p>「社長」と一口に言っても，個体差がものすごくあります．
また「倒産」と一口にいっても，その理由は様々です．</p>

<!-- more -->


<p>とはいえ，日本人で普通に公教育を受けて何らかの理由で起業して雇用して，というパターンの社長が，資金繰りに行き詰まって負債を抱えて倒産する．
こういう筋書きに直面した瞬間の反応には，それほどバリエーションは無いだろうと思います．</p>

<p>私が事務所を畳んだ直後は，かなり凹みました．
心理的に凹むだけでなく，いろいろ身体症状が出てきます．
へんな空咳がでる(たぶん逆流性食道炎になっている)とか，身体が強張るとか，不眠とか寝過ぎとか．
ふと我に返ると，ネガティブな独り言をブツブツ言っていて，自分に驚く，とか．</p>

<p>妻子が居なかったら，自死していてもおかしくないかもしれません．</p>

<h2>倒産したらどうなるのか，という不安</h2>

<p>倒産件数は，近年減少傾向があるとはいえ，年1万件を超えます．
その中で7割以上が，破産です．
日本の中小企業の場合，会社の破産は代表の破産なので，同じくらいの社長が破産していることになります．
しかし，倒産したらどうなるのか，破産したらどうなるのか，は，あまり情報共有されません．</p>

<p>情報が伏せられている世界に突入するのは，かなりの心理ストレスです．
「破産後に社会からどんな制裁を受けるのか…」を考えて，答えが出ず，しかし選択をすることになります．</p>

<p>心理ストレスがかかっている状態で，医者に行けば鬱病の診断書が出かねない状態で，
「破産後に社会からどんな制裁を受けるのか…」と不安で煽る．
これは，一番まずい対応です．
死にかねません．</p>

<h2>倫理観を問う無責任</h2>

<p>色々なタイプの社長は居ると思いますが，概ね3年を超えて事業が続く会社というのは，取引している顧客や金融機関から信用を得ています．
少なくとも，会社が傾くまでは信用を得ていたはずです．
倫理観の無い会社は，反社会的勢力は別として，長く持ちません．
逆説的に，潰れる会社の社長も商売に関する倫理観は，普通に持っています．</p>

<p>それでも会社は潰れます．
社長にとって，倒産というのは，自分が持っている倫理観を，実力では達成できなかったことを意味します．
正しい倫理観を持っていればいるほど，その挫折感は大きくなるはずです．</p>

<p>そこに「債権者に対する申し訳ないという気持ちが全く無いのか…」と畳み込むのは，その人に自殺教唆をするようなものです．</p>

<h2>そういうことにしたい，という心理</h2>

<p>…と，ここまで自己擁護とスレスレの話でした．
ここから先が，割と本題．</p>

<p>今回の日記の元になった tweet で，本当に怖いなと思ったことがあります．</p>

<p>件の彼としばらくtweetのやり取りをして，徐々に枠組みが見えてきたのですが．
彼は，私が無責任で「何の罪の意識もなく」破産し，「免責のあと5年でまた借金ができる」と思うくらい無知で，どうしようもない人だ．と，必死に思いたがっている…のでは? と．
(や，一般論として，私が無知でどうしようもないというのは否定しませんが．それはさておき．)</p>

<p>様々な情報を総合すると，発言者は，私と同様に小規模な会社をやっていて，どうやら同様に妻子がいるようです．</p>

<p>&ldquo;転んだ奴は馬鹿で無能だ．その点，オレは大丈夫．奴とは違う．&rdquo;
…なるほどそういうことにしたいのですね．と考えると，彼のtweetの一つ一つについて，割とすんなり合点がいきます．
(残念ながら彼はtweetのほとんどを削除しています．)</p>

<p>彼の中の私は，今このエントリを書いている私ではありません．
なので，どういうことにしておいて貰っても，私には実害は無いのですが．</p>

<p>ただ，彼の考えは，彼が万一の不可抗力で会社を畳まざるをえないような事態になった時，彼自身を追い詰めてしまい得ます．</p>

<p>彼がどうなっても，これまた私には実害はないのですが．</p>

<p>ただまあ彼にせよ誰にせよ，自死を考えるにまで追い詰められる，なんていうリスクは現代法治国家では気軽く負わせるべきではないと思うのです．
私の倫理観として．</p>

<h2></h2>

<p>「じゃああなたは，破産に際して，どういうふうに己の倫理観と折り合いつけたのよ．」という点については，たぶんそのうち書きます．
(<em>追記</em>: <a href="http://www.monaka.org//blog/2014/04/20/postmortem-3/">書きました</a> )</p>
]]></content>
  </entry>
  
</feed>
