<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-04-12T01:11:15+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[失敗分析:リスクのこと]]></title>
    <link href="http://www.monaka.org/blog/2014/04/11/postmortem-1/"/>
    <updated>2014-04-11T23:02:30+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/11/postmortem-1</id>
    <content type="html"><![CDATA[<p>破産という不幸ネタであんまり引っ張るのは，なんか下品だなぁと思いつつ．
でも，書いておくべきなのだろうなと思うので．</p>

<p>何故書くべきと思うかというとですね．
成功する人が出てくるためには，失敗事例の分析が大事だと思うのです．
「破産とか怖いから起業はダメだ」とは思う人が増えてしまうと，私は完全に無駄死ですので．</p>

<p>ですので．自分で自分の検死をする．
…なんかグロテスクですが…．</p>

<p>リスタートをかけている私にとっても，それは大事だと思ったりします．</p>

<p>事後分析(検死)については，コンピュータ業界では，日経BPさんの「動かないコンピュータ」系列，経営だと同じく日経BPさんの「敗戦の将，兵を語る」辺りは有名で，各回の内容も蓄積も濃いと思うのですけれども．
たぶんスタートアップがだめになる経緯を記した和書って，板倉雄一郎さんの「社長失格」が突出した名著で，あとは在りましたっけかなぁ，という感じではないかなと思っています．
(「この本を読め！」というお心当たりがある方は，はてブやtwitterで教えてください)</p>

<p>とはいえ，何から書くべきなのか，また何が大事なポイントなのか，私自身，十分に整理がついていません．</p>

<p>なので，<a href="http://www.monaka.org/blog/2014/04/09/startup-and-angel/">前回</a>，<a href="http://www.monaka.org//blog/2014/04/07/i-am-finally-restart-from-bung/">前々回</a>の日記に対して頂いたはてブやtwitterでのご意見について，書いてみようかなと思います．</p>

<!-- more -->


<p>通常の私の場合，前回のように，あまりにも的はずれなtweetは温和ながらもハッキリと晒します．
しかし，今回から数回で取り上げるご意見の，引用元のお名前は伏せます．
私の舌足らずな日記へのコメントがズバリ正解だとしたら，その方はエスパーか何かでしょう．
また，私も，ご指摘の内容は(条件付きながらも)正しいと思っています．
もし，私が引用したtweetの主で，正しい引用でのご紹介をお望みの方がいらっしゃいましたら，お知らせください．</p>

<h2>お金のこと</h2>

<blockquote><p>社長の賃金を資産計上できず倒れたってこと？CFがマイナスって時点で、リスクの大きい経営だったんだなあと思ってしまったりも。</p></blockquote>

<p>社長だけではなくて，取締役級の1名も，大幅な減額になっています．
社長以下4〜5名の会社で半分の給与が確保できない(そもそも研究開発助成なので，その他社員の給与も満額は出ない)となると，さすがにキツいです．</p>

<p>この辺りの事情は，記録も残っていることですし，機会があれば取り上げはできますが…．</p>

<p>ですが，経済産業省のスキームはたぶん変わります．
事情通によると，私以外にも，潰れる寸前まで追い詰められた組込みソフト会社さんがあるそうです．
このサイトの日記も，たぶん霞ヶ関の情報感度の高い方々には，既に伝わっています．
ですので，過去の話をしても，あんまり役に立たないかなぁと．</p>

<p>お役人さんを叩いても，潰れた会社は帰ってきませんし．</p>

<p>そもそも，0円査定の原因となった，無茶な単価設定をしたというどこかに居るバカ社長が悪いのであります．
そいつには窒息するまでパイ投げしてやりたいとは思いますけれどもね．</p>

<h2>高リスクであること，それは全くもって意識的でした．</h2>

<p>で，リスクの大きい経営だったかというと．ええ，リスクの大きい経営でした．
誤解を招く表現ですが，「我ながら，よく10年続いたな」と．</p>

<p>既にざっくりと tweet しています．</p>

<blockquote class="twitter-tweet"><p>ハイリスクな経営だったというのは，全くその通りで，そこはまったくもって自覚的だった．&#10;ニッポンの組込みシステムというガチガチの保守層にOSSをぶつける，という発想からして，ハイリスクだったわけだから．&#10;皿回しをしない人は，皿を割らない．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/453856186874351616">April 9, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>全くもって無鉄砲かというと，そういうわけでもなかったりはします．</p>

<p>組込みシステムにオープンソースを適用するというのは，今は RedHat に買収された <a href="">Cygnus solutions</a> の<a href="http://www.law.co.jp/okamura/OpenSource_Web_Version/chapter06/chapter06.html">成功事例</a>が，起業した 2000 年の段階でありました．
加えて，ちょうど <a href="http://toppers.jp/">TOPPERS プロジェクト</a> が興る頃でした．世間よりも少し早くソースコードを読む機会があって「これは業界の空気を変えられる」と確信しました．</p>

<p>ただし，ARMやMIPSといった海外セミコンダクタに比べて，日本のセミコンダクタ各社は，極めて保守的でした．それは起業時点で判っていたことでした．
(だから日本のセミコン会社は，危機的状況に陥っているのですよね，みたいな話は，また別の機会に)</p>

<p>その各社が作るチップを使う日本の組込み業界も，医療，航空宇宙，自動車，のみならず，白物家電のレベルまで，保守的なのも，自明でした．</p>

<p>そこに，まだ Linux でさえ十分に受け入れられていなかった2000年の段階で，オープンソースの旗を振って参入したわけです．
経済的な後ろ盾のない零細が．
これを高リスクでないという人は，きっとアタマがおかしいです．</p>

<p>高リスクであること，それは全くもって意識的でした．</p>

<p>意識的だったので，もなみソフトウェアは，常に結果を出しました．
私が，ではないです．…私も，ですが．
もなみソフトウェアには，優れたエンジニアが集っていましたから，</p>

<p>成果を出して次に繋げていかないと，保守の力に負けて潰れる，そういう危機感が常にありました．</p>

<p>TOPPERS/FI4 カーネルは，楽器店にならぶシンセサイザ・デジタルピアノ・PA卓や，ネットワークカメラ，等々幅広く採用されました．白物家電レベルには，ソリューションを出しました．</p>

<p>実働するまでの多くの箇所で貢献した TOPPERS/HRP カーネルは，航空宇宙系と言っても誰も異議を挟まない，JAXAのH2Bロケットに採用されました．</p>

<p>PizzaFactory は，gcc や gdb などの上流にコントリビュートしながら，教材から，プラント制御のようなミッションクリティカルな現場まで，幅広く使われました．</p>

<p>あえなく潰えましたが，サポイン事業でのメインターゲットは，自動車業界でした．</p>

<p>設立当時3万円，最終的には903万円しか資本金がなかった会社が，保守でガチガチな日本の組込み業界に切り込む．
そして目に見える結果を出す．
その10年間，毎日が薄氷を踏むようでした．
資金繰りがよくて数日間の温泉旅行に出た日も，気持ちは薄氷の上でした．</p>

<p>高リスクでしたよ．仰るとおりです．</p>

<p>でも，私，思うのですよ．
皿を回さない人は，皿を割りません．</p>

<p>割っちゃダメなのですけれども．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[社長と投資家の役割，その理解なく明日は来ない]]></title>
    <link href="http://www.monaka.org/blog/2014/04/09/startup-and-angel/"/>
    <updated>2014-04-09T00:30:00+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/09/startup-and-angel</id>
    <content type="html"><![CDATA[<p>昨日のエントリの反響は大きく，色々な意見がありました．
多くは暖かいご支援で涙が出てきました．</p>

<p>もちろん様々な意見はあり，そのほうが世の中としては健全と思います．</p>

<blockquote><p>そうは言っても経産省悪くないし</p></blockquote>

<p>的な意見もありました．
私もそう思います．
見積もりを出してきちんと名簿も積算もしたのに，後出しジャンケンをする．
これは，個人的には卑劣だと思いますが， <strong>_だってこの国ニッポンの商習慣じゃないですか，これ</strong>__ ．
(と同様のご意見も頂きました)</p>

<p>別に経産省は悪く無いです．
ニッポンの商習慣を踏襲しただけです．
昨日のエントリにも書きましたが，私は，黙って机を蹴って退席し，契約印を推さなきゃ良かっただけです．</p>

<p>…だからこそ，この国ニッポンには，未来がない．
とも，思いますけれどね．</p>

<p>そんな感じではあるのですが，一つだけ，いい大人がこの理解は無いわ，というご意見があったので，マイルドに晒します．</p>

<!-- more -->


<blockquote class="twitter-tweet"><p>サポイン事業って研究開発に金出すっていってくれてるんじゃないの？なんで社長の経費が0円で怒ってるのかよくわからないんだよなぁ。</p>&mdash; hashimoto kenichi (@h_kenken) <a href="https://twitter.com/h_kenken/statuses/453515308435652608">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>サポイン事業って研究開発に金出すっていってくれてるんじゃないの？なんで社長の経費が0円で怒ってるのかよくわからないんだよなぁ。</p></blockquote>

<blockquote class="twitter-tweet"><p>別に怒っちゃいないのだがぬ．&#10;ポイントは，研究開発に必要な人件費が，そいつが社長という理由で0円になる根拠．&#10;加えて，申請時の見積には，社長の人件費も計上するし経産省も見て採択を決めるわけ．なのに後出しで社長の人件費は0円です，っていうのがフェアか． <a href="https://twitter.com/h_kenken">@h_kenken</a></p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/453522491638439936">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>別に怒ってないです．まあ，ネットではよくある誤読です．活字には感情が出てこないですからね．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> 企業の社長が研究するから金出してくださいっていのもどうかなと思いまして。</p>&mdash; hashimoto kenichi (@h_kenken) <a href="https://twitter.com/h_kenken/statuses/453537535856087041">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>企業の社長が研究するから金出してくださいっていのもどうかなと思いまして。</p></blockquote>

<p>ん? なんか変なこと言い出して…ますね…．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> 社長さん(経営者)は投資する側じゃないんですか？</p>&mdash; hashimoto kenichi (@h_kenken) <a href="https://twitter.com/h_kenken/statuses/453539545221312512">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>社長さん(経営者)は投資する側じゃないんですか？</p></blockquote>

<p>…なるほど，判りました．
この方，技術には明るいようですが，
社会の仕組みが解っていないようです．</p>

<p>その後も，</p>

<blockquote><p>ってか自分質問しかしてないのに、なんで怒られたんだろ？サポイン事業の意義とか教えて欲しかったのに。</p></blockquote>

<p>とか</p>

<blockquote><p>まいいや、ちかよらんとこ</p></blockquote>

<p>など続くのですが，私としては別に怒っちゃいなくて．
というか私としては， tweet が，怒るレベルよりも低くて．</p>

<p>ところで，ちょっと何か言われると怒られていると思う人って多いですよね．
よほど好戦的なご友人に囲まれた人生を歩まれたのでしょうか．</p>

<p>閑話休題．
「ああ，この国ニッポンって，こういう方，多いよね」って白目になっていただけなのです．
とある記事を思い出しながら．</p>

<h2>それを聞いて，面白い調査結果を思い出しました．</h2>

<p><a href="https://cakes.mu/posts/4241">https://cakes.mu/posts/4241</a> を思い出していました．
引用します．</p>

<blockquote><p><strong><em>藤野</em></strong>　それを聞いて、おもしろい調査結果を思いだしました。3、4年前に、東大の学者や東京証券取引所が協力して、アメリカと日本で経済の知識についての大規模な調査をしたんです。その報告書を見たら、日米の起業家に対する意識の違いが如実に表れていました。「経済における起業家の役割はどれか」という、4択の問題があったんです。1「政府に対して事業機会を伝える人」、２「事業機会に対してリスクを負う人」、３「株の売買をする人」、４「投資家に対してリスクを限定させる人」という選択肢です。</p>

<p><strong><em>堀江</em></strong>　２以外は、よくわからない選択肢ですね。</p>

<p><strong><em>藤野</em></strong>　そうですよね。「株の売買をする人」って、ねえ（笑）。もちろん２が正解なんですが、この問題のアメリカの正答率は約90％、日本は約36％だったんです。問題は正答率の低さだけでなく、36％という率が中学、高校、大学、社会人とまったく変化しないことです。</p>

<p><strong><em>堀江</em></strong>　アメリカの場合はどうなんですか？</p>

<p><strong><em>藤野</em></strong>　年齢が上がるに従って、正答率が上がっていきます。アメリカでは学校の授業で、経済について教えるんですよね。日本では、資本市場や企業について義務教育の中でほとんど習わない。社会の教科書では2ページしかその部分に割かないんですよ。だから経済についての理解のベースの部分で、日本とアメリカにこれだけの差がある。</p></blockquote>

<p>「ひふみ投信」で知られる藤野氏と，「ほりえもん」で知られる堀江氏との対談記事です．</p>

<p>私は，アメリカが常に良いとは思いません．</p>

<p>でも，どの国との比較においても，知識が無いほうが良いとは，私はいかなる場面でも，思いません．
知識は大事．それはエンジニアとして生きるための立脚点ですから．</p>

<h2>社長さん(経営者)は投資する側じゃないんですか？</h2>

<p>いいえ違います．
私の主義主張ではなく，法人というものの成り立ちからして否定できます．</p>

<p>簿記や経営の初歩向けの本を読むと，だいたい最初に，人的会社ができた経緯のエピソードが出てきます．</p>

<p>曰く，</p>

<ul>
<li>大航海時代に，船長が，貴族から資金を調達した．</li>
<li>船長は，船が沈んだら死ぬ(無限責任)，けれども航海中の権力は絶大．貴族への配当をし終えたら，残りは船長のもの．</li>
<li>貴族は，船が沈んでも死なない．出資の範囲でしか損をしない(有限責任)．けれど金は出すので配当を得られる．</li>
</ul>


<p>現代の先進国は物的会社への移行が概ね済んでおり，社長(代表者・船長)でも有限責任を選択できます．
…ああ，代表者に連帯責任を取らせないと何も進まない，この国ニッポンという例外はありますね(頭痛い)．</p>

<p>ええと，大筋に戻ると，社長は，投資を受ける側で，投資をする側ではありません．
大航海時代の昔からです．</p>

<p>もちろん，社長が投資側に廻る，つまりキャピタリストやエンジェルになるというケースはあります．
これは将棋でいう金成りですね．&#8221;と金&#8221;は成った時点で&#8221;金&#8221;であり&#8221;歩&#8221;   ではありません．</p>

<p>金成りを成功事例と呼ぶのが相応しいのかには論の余地があると思いますが，少なくともIT業界では成功と見做されがちです．
一方で，広く世間を見渡すと，生涯社長で終わるのも，それはそれで評価を受けます．</p>

<h2>てなことを</h2>

<p>Web日記1日分を使って説明しなきゃいけない世の中って，たぶんどこかで公教育が歪んでいると思いますし，そういう説明が必要な大人が多数派であるならば，この国ニッポンが再浮上することもないのかなと思います．個人的には好きなのだけれどな，日本という国は．</p>

<p>怒っているわけではないのです．
悲嘆に暮れているのですよ．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[経済産業省に引導を渡された私，やっと，経済的な死亡宣告が出ました．]]></title>
    <link href="http://www.monaka.org/blog/2014/04/07/i-am-finally-restart-from-bung/"/>
    <updated>2014-04-07T22:22:47+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/07/i-am-finally-restart-from-bung</id>
    <content type="html"><![CDATA[<p>一般的には，黙り通す人のほうが大多数な話ですが．
業界のディープな方々は「どうなっちゃったの? 顛末がよく分からん」って永く思っていらっしゃるでしょうし，珍しい名字ですし，検索エンジンは非情ですので早晩，私の名前は出てきます．
官報の破産情報だけ転載し続けているwebサイトとか，ありますからね．</p>

<p>なので，言っちゃいます．
わたくし，やっと破産手続き，開始しました．</p>

<!-- more -->


<ul>
<li>平成26年(フ)第2841号</li>
<li>平成26年(フ)第2842号</li>
<li>平成26年(フ)第2843号</li>
</ul>


<p>なんで3つあるかというと，私の分．私が代表だった会社2つ分，合計3つだからです．
ややこしいです．
「東京地方裁判所民事第20部」でさえも，封書で誤記して，二重線訂正で送ってきましたから．</p>

<h2>原因</h2>

<p>まあいろいろあるのですけれど．
致命傷となったものを下記列挙しますが，結局は，私が，経営者として未熟だったということに尽きます．
〇〇が悪かったとは言っても，決断しハンコを押したのは，私ですから．</p>

<h3>税理士への丸投げ</h3>

<p>担当税理士が酷かったのを私が見抜けなかった，っていうのは，じわじわと効いてきました．
破産管財人さんに言われて気づいたのですが，固定資産の償却が一切行われていないとか，</p>

<p>回収済みの売掛金が数年に渡って残ったままだったとか．
これは知った私も唖然としましたが，それ以上にメインバンクが激怒しました．</p>

<p>そういえば，税務調査が入った時も，なんもしてくれなかったなぁ．
国税官の早とちりで，会社としては無実だったので，私が全面的に闘いましたが．</p>

<p>日々の記帳は会社(というか私)がやっていたので，両成敗の話なのですが．
月々数万円を払って，結局何も見てもらえていなかったという．</p>

<p>もとをたとれば，社員の友達が税理士事務所に勤めている，という縁故での契約だったのでした．
そういう契約は，とても良い結果がでるか，酷いことになるか，両極端ですね．</p>

<h3>サポイン事業</h3>

<p>急速に資金繰りが悪くなった直接の原因は，経済産業省の「戦略的基盤技術高度化支援事業」，いわゆるサポイン事業の採択でした．</p>

<p>私が代表を務めていた零細企業である，もなみソフトウェアは，典型的な，技術指向の会社でした．
代表者である私は，会社での仕事のほぼ全ては技術者としての実務でしたし，取締役(合資会社ですから正確には有限責任社員)にもエンジニアがいます．
会社組織なので，分担はしますが，会社の顔になるような技術の多くで，私がプロジェクトリーダとして動いていました．</p>

<p>サポイン事業の申請内容には，Eclipse が技術要素として入っていました．これは，私が，というよりも申請者の中で私だけが技術内容を十分に内容を理解していました．
当然のことながら，私はサポイン事業に100%コミットする予定で，申請書もそのようにかきました．</p>

<p>しかしながら，経済産業省は，採択が決定し，その契約説明会の段になって，以下のように知らせてきました．</p>

<blockquote><p>企業代表者の作業については，時間単価は 0 円とする．
取締役級の作業者については，時間単価を減ずる．</p></blockquote>

<p>どうやら，私の会社が採択される前年に，社長の単価を不当に釣り上げた事例があったようです．
あとから事情通から聞きました．
社長の報酬は，税法による縛りはあるものの，社長が勝手に決められますから．</p>

<p>もなみソフトウェアとしては，盛大な，とばっちりを受ける格好になりました．</p>

<p>説明会の席上で，机を蹴飛ばして出て行けばよかったのにと，他人には言われますし，私も今は思います．
「事業は1年あるから，その間に別の案件を取れば帳尻あうかな．それに製品化を急げば…」など思ったのが甘かったのでした．
アドバイザに，名だたる大手セミコンダクタ数社や自動車系企業が名を連ねていて，降りるとは言い出せなかったという，心の弱さもありました．</p>

<p>結局のところ，全責任は私にあります．
とはいえ，契約の直前になって，いきなり単価を0にしてくれといいだすというのは，社会通念上，ありえない話です．</p>

<p>サポイン以前も，そんなに経営的に安定しているわけでもない会社でしたが，
技術指向の零細である，もなみソフトウェアにトドメを刺したのは，経済産業省の事業の制度設計でした．</p>

<p>経済産業省としては，社長が技術者でもあるような会社は，消えてしまえばよいと思っているのでしょうね．
そりゃベンチャーが育たないわけですわ．</p>

<h3>弁護士介入から遅れた理由</h3>

<p>2012年に弁護士介入で，今になって手続き開始です．随分と間があります．</p>

<p>その理由も，一つはサポイン事業です．
サポイン事業は，お金が出る期間と，事業計画の期間にズレがあります．
事業計画の期間が終わるまで，会社を潰せなかったというのが理由の一つです．</p>

<p>あともう一つは，会社を潰す，つまり破産するにもお金がいるということです．
少しの余力も残さず破綻したので，破産管財人に支払う予納金も用意できない
というところまで追い詰められました．
個人なら法テラスに頼ることもできますが，法人にはそのような支援はありません．
この点も，今振り返れば，うまくできた気もします．
経験値は積めましたが，もう2度と使うことは無いので，まさにトリビア，ムダ知識です．</p>

<h2>この先，どうするの?</h2>

<p>すでに，合同会社もなみ屋という会社を作って，今までと似たような技術分野で仕事をしています．</p>

<p>1年半くらい前から，自分が作った会社の葬式の準備をしながら，新しく自分で作った会社を産み育てるという，相反する2つの作業を並行していた形になります．
片方だけでも精神的につらい作業なので，自己が崩壊するのではと思う時もありましたが，やっと人並みの追い詰められ方になりそうです．</p>

<p>ブラックリスト入りですから，強制的に無借金経営をすることになります．
クレジットカードも作れないのでカード決済が多いIT業界では自営は無理かな，と思っていたのですが，VISAデビなど上手く使うとそれなりになんとかなるということも判りました．
売上も社員も0からのスタートですが，肝心要の知財は残りました．</p>

<p>技術分野がオープンソース・ソフトウェアだったというのは不幸中の幸いでした．
プロプライエタリ・ソフトウェアであれば，それは会社の資産であり，継続することは不可能でした．
オープンソースの耐リスク性を，身を持って知りました．
そもそも会社を潰すなよ，という話ではあるのですが．</p>

<p>技術がダメで潰れたとしたら，たぶん足を洗って何か別の仕事に就いたかもしれません．
経営者としてはダメだったので，経営から足を洗うべきか真剣に考えました．
しかし，私が持っている技術を活かせそうな経営者が，周りにいませんでした．
無借金経営という枷がかけられている状態なら，以前のような過ちは起こしようがないかなと，自分に言い聞かせることにしました．</p>

<p>経営者としては控えめにコツコツと，技術者としては以前と同様に荒ぶって，日々を過ごせればと思っています．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[橋渡しとしてのAPI]]></title>
    <link href="http://www.monaka.org/blog/2014/03/23/api-as-glue/"/>
    <updated>2014-03-23T18:03:49+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/23/api-as-glue</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org//blog/2014/03/21/types-generated-by-compiler/">前回</a> の続き．
たぶんこれで本件に関する一応の最終回．</p>

<h2>APIは世界の境界線</h2>

<p>異なる世界観の端境にあって，両者の言い分を理解して橋渡しをする．
API の設計は，端的には橋渡しに尽きる．</p>

<p>API の直交性など，細かく言うと設計上気をつけるべき点はある．
しかし，それは，より美しく使いやすい API であるための付加価値である．
大事だけれども本質ではない．</p>

<p>API の代表例として，OS が提供するものがある．
システムコールとかサービスコールという名で呼ばれる．</p>

<p>フリーダムなユーザランドと，好き勝手されては困るOSとの間の橋渡しをする．
一例として，リアルタイムカーネル TOPPERS/JSP のサービスコール関数の冒頭を引用する．</p>

<p>心配ない．
RTOSのコードなんて読んだことが無いよ，という方でもざっくりと理解できれば十分．</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> *  メールボックスへの送信
</span><span class='line'> */
</span><span class='line'>#ifdef __snd_mbx
</span><span class='line'>
</span><span class='line'>SYSCALL ER
</span><span class='line'>snd_mbx(ID mbxid, T_MSG *pk_msg)
</span><span class='line'>{
</span><span class='line'>    MBXCB   *mbxcb;
</span><span class='line'>    TCB *tcb;
</span><span class='line'>    ER  ercd;
</span><span class='line'>    
</span><span class='line'>    LOG_SND_MBX_ENTER(mbxid, pk_msg);
</span><span class='line'>    CHECK_TSKCTX_UNL();
</span><span class='line'>    CHECK_MBXID(mbxid);
</span><span class='line'>    mbxcb = get_mbxcb(mbxid);
</span><span class='line'>    CHECK_PAR((mbxcb-&gt;mbxinib-&gt;mbxatr & TA_MPRI) == 0
</span><span class='line'>        || (TMIN_MPRI &lt;= MSGPRI(pk_msg)
</span><span class='line'>            && MSGPRI(pk_msg) &lt;= mbxcb-&gt;mbxinib-&gt;maxmpri));
</span><span class='line'>
</span><span class='line'>    t_lock_cpu();</span></code></pre></td></tr></table></div></figure>


<p>まず，関数に入った直後で，CHECK_* マクロの洗礼がある．
ここで，アプリケーションから渡された引数に，OS内部にとって不都合がないかどうかを調べる．
マクロだから見えないが，不都合な引数があった場合には，即座にエラーリターンとなる．</p>

<p>次に，t_lock_cpu() で，割込みが発生しない状況にする．
つまり，カーネルが CPU を独り占めする．
ここから先はカーネルの世界である．アプリケーションからは不可侵．</p>

<p>このような引数チェックは，API が備えるべき基本的な機能だ．
API の向こうは，全く違った世界観で動いている．
つまり，悪意，未必の故意，不理解により，有り得ないような引数で呼び出される可能性がある．
API は，どんな引数で呼び出されるかは判らないし，信用してもいけない．
上記のリストはシンブルなほうで，マルチプロセッサやメモリ保護など加わればその分だけ，チェックの量は増える．</p>

<p>呼び出し元を信用しない．
これが，単なる関数呼び出しとAPIとを分ける，ほぼ唯一の，しかし決定的な違いとなる．
APIの設計経験が浅い人は，呼び出し元を信用しがちである．
そして，呼び出し元のアプリケーションのせいで起きたバグなのに，APIの内側でのバグだとの冤罪を受け，無罪証明のために膨大な時間を費やしたりする．</p>

<h2>API と&#8221;ヒゲ&#8221;とC言語</h2>

<p>API の内外は，異なる世界観である．
だから，相手側の世界には，なるべく自分側の世界観を押し付けないように設計すべきだ．</p>

<p>けれども，何事にも限度というものがある．</p>

<p>例えば，mruby の API には，ほぼ全てに mrb_state 型のポインタがついている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* mruby/include/mruby.h から引用 */
</span><span class='line'>typedef mrb_value (*mrb_func_t)(mrb_state *mrb, mrb_value);
</span><span class='line'>struct RClass *mrb_define_class(mrb_state *, const char*, struct RClass*);
</span><span class='line'>struct RClass *mrb_define_module(mrb_state *, const char*);
</span><span class='line'>mrb_value mrb_singleton_class(mrb_state*, mrb_value);
</span><span class='line'>void mrb_include_module(mrb_state*, struct RClass*, struct RClass*);</span></code></pre></td></tr></table></div></figure>


<p>これを，C99 標準には mrb_state なんて型はない，など言って無理やり合わせようとするのは，筋が良くない考え方だ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* こういう変更はよくない */
</span><span class='line'>typedef mrb_value (*mrb_func_t)(void *mrb, mrb_value);
</span></code></pre></td></tr></table></div></figure>


<p>(C言語の基礎が解ればすぐに判るだろうけれども，念の為に理由を示すならば)
mrb_state * から void * に型を変更することで，コンパイラによる型チェックが効かなくなり，mruby の内側を危険に晒す．</p>

<p>こういった，API を跨いで漏れだしてしまう変数型を，私は密かに「ヒゲ」と呼んでいる．
個人的に用いている語で，たぶん他の誰にも通じない．</p>

<p>「ヒゲ」は可能な限り少ないほうが，APIとしては優れた設計と言える．
C言語の標準ライブラリは，コンパイラが生成する型を完全に理解していて，C言語向けのAPIとしては優れている．
POSIX の各種 API は，独自の型はあるものの，それらの命名規則はC言語の標準ライブラリを踏襲しており，優れている．</p>

<p>しかし，あったほうが魅力的だったり安全になったりする「ヒゲ」もある．
mruby の C言語APIにある，mrb_state ポインタがその例といえる．
Windows API は，独自型の乱発など，現代的なC言語仕様から見ると眉をひそめたくなる部分もある．
しかし，ISO C 標準よりも先に存在していたAPI仕様なので，仕方がない部分もある．安全を求めた結果の「ヒゲ」の部類だ．
μITRON仕様も Windows API と同様．</p>

<p>そして，「鼻毛」もある．
「鼻毛」は，APIの内外にある世界観，ならびに言語仕様を考えた上で，どう考えても魅力がない…というか残念というか危険結果しか想像できない場合．
前回取り上げた，size_t の代わりに mrb_int を使おうとした例がこれに当たる…</p>

<p>…のだが，「ヒゲ」が「鼻毛」か否かは，立ち位置によって，変わりうる．</p>

<h2>長さに関する立ち位置の違い</h2>

<p>当然ながら Ruby は C言語ではないので，size_t なんていう型はない．符号なし整数型もない．Fixnum 型となる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mirb - Embeddable Interactive Ruby Shell
</span><span class='line'>
</span><span class='line'>&gt; [].length.class
</span><span class='line'> =&gt; Fixnum</span></code></pre></td></tr></table></div></figure>


<p>mruby の内部では，Fixnum の値は mrb_int 型として格納される．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* include/mruby/value.h から引用 */
</span><span class='line'>typedef union mrb_value {
</span><span class='line'>  union {
</span><span class='line'>    void *p;
</span><span class='line'>    struct {
</span><span class='line'>      unsigned int i_flag : MRB_FIXNUM_SHIFT;
</span><span class='line'>      mrb_int i : (MRB_INT_BIT - MRB_FIXNUM_SHIFT);  /* ←これが Fixnum の実体 */
</span><span class='line'>    };
</span><span class='line'>    struct {</span></code></pre></td></tr></table></div></figure>


<p>したがって，文字列の長さも，mrb_int 型で格納されている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* include/mruby/string.h から引用 */
</span><span class='line'>struct RString {
</span><span class='line'>  MRB_OBJECT_HEADER;
</span><span class='line'>  union {
</span><span class='line'>    struct {
</span><span class='line'>      mrb_int len; /* ←これが長さ */
</span><span class='line'>      union {
</span><span class='line'>        mrb_int capa;
</span><span class='line'>        struct mrb_shared_string *shared;
</span><span class='line'>      } aux;
</span><span class='line'>      char *ptr;
</span><span class='line'>    } heap;
</span><span class='line'>    char ary[RSTRING_EMBED_LEN_MAX + 1];
</span><span class='line'>  } as;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>ここで，視点の差に基づく見解の相違について，可能性が見えてくる．</p>

<p>C言語標準の側から見れば size_t を使わないのはどう考えでも「鼻毛」なのだが，敢えて，Ruby の内側から見てみよう．
<strong>外側にあるC言語の連中は，mrb_int を使いやがれ．お前らmrubyに依存しているんだろう?</strong> という意見には，一定の合理性がある．</p>

<p>ああ，Matz氏とは面識もあるし，ジェントルな方である．
上記太字は，私が相当に盛った表現だ．
皆さんご存知だろうが一応補足．</p>

<p>表現はさておき，世間一般の論として「APIの内側と外側で，どちらが主人でどちらが従属か」というのは，API設計で，必ず出てくる悩みどころといえる．</p>

<h2>API の主従と設計</h2>

<p>実例を挙げる．</p>

<p>μITRON仕様OSは，UW, UH, UB など，uint32_t, uint16_t, uint8_t で済む型を，独自に定義している．
これは，C99標準よりも遥かに前からμITRON仕様が存在したためである．
同様のオレオレ型定義は Windows などにも見られる．</p>

<p>しかし，μITRON仕様の系譜を汲む TOPPERS カーネルは，第2世代カーネル (ASPカーネルベース)を境に，
μITRON仕様流の定義を捨てた．
現世代のTOPPERSカーネルは，全てC99標準に準拠したデータ型で API を定義している．
(構造体などで，独自定義の型もある．)</p>

<p>一方，同じくμITRON仕様の系譜を汲む T-Kernel は，今でもμITRON仕様の流儀で API のデータ型を定義している．</p>

<p>T-Kernel は，OSが主であるという考え方であるといえる．
この場合，しもべたるアプリケーションは，OSが定義した型に則るのがスジである．
他環境で動くライブラリを移植する際に悩ましかろうが，そんなことは知ったことではない．</p>

<p>一方，TOPPERSの第2世代以降の仕様は，API仕様から見ると，アプリケーション，もしくはC言語処理系の都合が主である．
仕様策定者たちの正確な意図は判らない．
size_tなどコンパイラが生成する型との摺り合わせについて考えたり，MISRA系のコーディングガイドラインとの整合性を考えたり，いくつかの要因があるのだろう．
しかし，結果として，ベアメタル(フリースタンディング)環境のC言語アプリケーションのための，
スレッドライブラリとして，TOPPERSカーネルのAPIは，自然にフィットする．
他のライブラリを応用する際にも，ライブラリがC99が推奨するデータ型にそっている限り，悩む箇所は多くない．</p>

<p>T-kernel と TOPPERS という，2つのカーネルのAPIは，その視点の違いで，使う型が異なる．
同じRTOS仕様を起源とし，今でも提供する機能に大差がないにも関わらず，である．
この例は，APIの主従関係の捉えかたがデータ型の選び方に影響することを，示している．</p>

<h2>mruby と C言語アプリの主従，そしてAPI設計</h2>

<p>というわけで，mruby へのコミットで，size_t から mrb_int へ変えたいと思ったことには，一定の妥当性がある，
というか，API設計をするものとして，気持ちは判る．
Matz 氏は，自他共に認める「Ruby のパパ」であり，彼が Ruby 世界を中心に mruby を考えるのは仕方がない．
仕方がないというか，そういう立ち位置でいて頂かないと皆困る．</p>

<p>一方で，mruby は，アプリケーションに組込むライブラリであり，そのAPIは，結合先の言語(今回の場合はC言語)を無視することができない．
C言語もれっきとした言語であり仕様標準があり，コーディングパターンもある．</p>

<p>片方の世界でベストプラクティスだったとしても，片方の世界でアンチパターンになることは，少なくない．
API設計の最も難しく，かつ醍醐味であるところ，それは，2つの世界を理解して橋渡しすることにある．</p>

<p>ここまでザザッと説明して，最後に2つほど質問．</p>

<p>mruby で mrb_int を使うのが「鼻毛」なのに，μITRON仕様やWindows API では「鼻毛」にはならないのは何故か?
これをスラっと回答できるのは，少なくともデータ型に関しては API 設計をするに十分なスキルのある人であろう．</p>

<p>μITRON仕様のAPIには，「鼻毛」と呼ぶのにふさわしいサービスコール群がある．それはどれか．
本稿読者の多くはμITRON仕様を知らないかもしれないが，批判な目で知らないAPIレビューできるのは，API設計者に
必要なスキルである．</p>

<h2></h2>

<p>てな感じで，結論があるような，無いような，けむに巻いた感じで，一連の話は終わり．</p>

<p>今回はC言語APIを題材にしたが，ビルド構成ファイルである build_config.rb に与える機能の話など，Ruby を使った DSL の設計に関わる話題もある．でもそちら方面は私の得意分野ではないので，割愛．</p>

<p>mruby の面白いところは，Matz 氏が作った世界である Ruby は当然のこととして，プルリクを送る開発者たちの多様性にあると個人的には思っている．
Cのほうが得意な人．C++のほうが得意な人．運用系への適用に興味を持つ人，gemsを量産する人，JITに魂を売った人，ちっちゃいものクラブ会員，などなど．
こういう状況だと，mruby に興味がなくても，プルリクを眺めているだけで，プログラミングの学習になりうる．
専門分野に属すると，その分野の定石みたいなものに縛られてしまう．
今のところ，mruby には，それがない．</p>

<p>大した分量ではない 2つのコミットから，ここまで話を伸ばせる．
他のコミットも，たとえ数行の変更でも，深い洞察の末だったりすることも，しばしばある．
C言語を覚えたけれども，その先の学習で伸び悩んでいるという向きにとって，mruby はなかなかよい教材だろうと思う．</p>

<p>最近，涼風 ( @suzukaze_jp )氏が，<a href="http://mruby-master-changes.hatenablog.com/">mruby masterの変更履歴を定期的にまとめている</a>ようなので，気が向いたらご参考に．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コンパイラが生成する型とAPI]]></title>
    <link href="http://www.monaka.org/blog/2014/03/21/types-generated-by-compiler/"/>
    <updated>2014-03-21T07:53:49+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/21/types-generated-by-compiler</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org//blog/2014/03/20/type-conversion-warning/">前回</a> の続き．</p>

<h2>C言語のおさらい</h2>

<p>繰り返しすぎてそろそろクドいかもしれないが，C言語は，いろいろとフリーダムすぎて扱いづらい．</p>

<p>にも関わらず，UnixというOSの記述言語を超えて広く使われた理由の一つに，ポインタを用いた自由なメモリアクセスがある．</p>

<!-- more -->


<p>OSやハードウェアの制約がなければ，プログラム自身を含む，全てのメモリは参照可能で，書き込みもできる．
ポインタは，加減算によってアドレスを変更できる．ポインタ同士の加減算も可能だ．</p>

<p>自らが管理する変数を，ポインタを用いて，書き換えることもできる．
そのような操作を支援するために，特定の変数が専有しているメモリサイズを取得することが可能だ．…など書くと無駄にややこしいが，要するに sizeof 演算子がある．</p>

<p>sizeof は sizeof(foo) など括弧を添える書き方が一般的なので，ときどき関数やマクロと誤解されるが，<strong>演算子</strong> である．本稿では，この事実が大きな意味を持つ．</p>

<h2>sizeof によって得られる値は?</h2>

<p>sizeof の演算結果は，正整数となることは確実だ．マイナスのサイズなんてありえない．
さて，では，unsigned int が適切だろうか? それとも unsigned long?</p>

<p>ここで，C言語の整数型のフリーダムっぷりが仇となる．
まず，unsigned long が扱える範囲が処理系定義だ．
加えて，仮想記憶などの技術で，またはムーアの法則に沿って，実装可能なメモリの量は爆発的に増えた．
そのため sizeof の結果が unsigned long の上限を超える可能性が出てきた．</p>

<p>たとえば，unsigned long がUnix系の慣習に沿って32ビットだとしたら，4GB以上のメモリを占める配列の sizeof の結果は格納できない．
本稿読者には言うまでもないが，4GB以上のRAMを持つ機器は，いまや珍しくない．</p>

<p>このような問題への対処として，sizeof の結果を保存するための型を，C言語仕様は導入した．
それが，size_t である．</p>

<p>size_t は，多くの場合，符号なし整数型の typedef となる．
しかしどの型の typedef なのかは，処理系次第である．
動作するCPUが扱えるメモリサイズによって，処理系の作者が決める．</p>

<p>たとえば，メモリアドレスの上限が65535なのに 32ビット分を割り当てても無駄だろう．
16ビットのメモリ空間なら，uint16_t 相当になる可能性はある．同様に 32ビットなら uint32_t 相当だろうし，もし 24ビットのメモリ空間なら uint24_t になるかもしれない．でも24ビットの型を作るのは面倒だからuint32_t相当にしました，という実装もあるかもしれない．</p>

<p>こんな按配なので，C言語を用いるプログラマは，size_t の最大値を決め打ちしたコーディングをしてはいけない．
そのコーディングの典型が，(値チェックを伴わない)size_t 以外の整数型変数への代入である．</p>

<p>これは好みの問題ではない．
仕様から容易に導き出される，事実だ．</p>

<p>蛇足になるが，このように演算結果により処理系が生み出す型は，ptrdiff_t など他にもある．
移植性を保ったAPIを考える際には，これらの型についても十分に理解しておく必要がある．</p>

<h2>いつになく噛み付いた理由</h2>

<p>ここまでくると，<a href="https://github.com/mruby/mruby/commit/048bca43c9438b1245fec92d8f05ca0cc0b929d2">mruby の API 変更を意図した Matz 氏のコミット</a>について，私が噛み付いた理由が見えてくるだろう．</p>

<p>mruby の mrb_int 型は，実際は符号付き整数型の typedef だ．
しかも，mruby の実行環境に合わせて，ビット幅は変えてもよい造りになっている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* 参考: include/mruby/value.h から引用 */
</span><span class='line'>
</span><span class='line'>#if defined(MRB_INT64)
</span><span class='line'># ifdef MRB_NAN_BOXING
</span><span class='line'>#  error Cannot use NaN boxing when mrb_int is 64bit
</span><span class='line'># else
</span><span class='line'>   typedef int64_t mrb_int;
</span><span class='line'>#  define MRB_INT_BIT 64
</span><span class='line'>#  define MRB_INT_MIN INT64_MIN
</span><span class='line'>#  define MRB_INT_MAX INT64_MAX
</span><span class='line'>#  define PRIdMRB_INT PRId64
</span><span class='line'>#  define PRIiMRB_INT PRIi64
</span><span class='line'>#  define PRIoMRB_INT PRIo64
</span><span class='line'>#  define PRIxMRB_INT PRIx64
</span><span class='line'>#  define PRIXMRB_INT PRIX64
</span><span class='line'># endif
</span><span class='line'>#elif defined(MRB_INT16)
</span><span class='line'>  typedef int16_t mrb_int;
</span><span class='line'># define MRB_INT_BIT 16
</span><span class='line'># define MRB_INT_MIN INT16_MIN
</span><span class='line'># define MRB_INT_MAX INT16_MAX
</span><span class='line'>#else
</span><span class='line'>  typedef int32_t mrb_int;
</span><span class='line'># define MRB_INT_BIT 32
</span><span class='line'># define MRB_INT_MIN INT32_MIN
</span><span class='line'># define MRB_INT_MAX INT32_MAX
</span><span class='line'># define PRIdMRB_INT PRId32
</span><span class='line'># define PRIiMRB_INT PRIi32
</span><span class='line'># define PRIoMRB_INT PRIo32
</span><span class='line'># define PRIxMRB_INT PRIx32
</span><span class='line'># define PRIXMRB_INT PRIX32
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>一方，size_t は，符号なし整数型の typedef だ．
しかも，ビット幅は判らない．</p>

<p>これらを，API 関数呼び出しという，値チェックを伴わない(実質的な)代入を行った時，何が起こるか．</p>

<p><a href="http://www.monaka.org//blog/2014/03/19/implicit-type-conversion-in-c/">先日</a>とりあげた，暗黙的なダウンキャストが，起こる．
特定環境のみ，かつ特定のアプリケーションのみで．</p>

<p>「概ね大丈夫だが，たまに致命的に動かない．」
こういう挙動は，ライブラリとしては，忌み嫌われる最悪のパターンである．</p>

<h2>strlen は問題ではない．</h2>

<p><a href="https://github.com/mruby/mruby/commit/180b3d5678d613b79593ef202089e93abb4eacfc">この問題に対し Matz 氏が一部を revert した際のコミットメッセージ</a>は下記のとおりだ．</p>

<blockquote><p>change mrb_int to size_t that would take strlen()</p></blockquote>

<p>コミットメッセージなんて，ちゃっちゃっと済ますものなので，筆が滑ることはよくある．
Matz 氏は実は理解しておられるだろうが，そうでない人もいるだろうから，書いておく．</p>

<p>strlen() の返値も，size_t ではある．
しかし，別に strlen() はどうでもよい．
なぜならば，strlen() は関数だから．
mrb_int を返す strlen() の代替を作るのは，難しい作業ではない．</p>

<p>しかし，sizeof は演算子である．
Cにはそもそも演算子オーバーロードの機能が無いし，C++ でさえオーバーロードできない．
だから，sizeof 演算子の結果の型を size_t 以外にすることは，不可能である．</p>

<p>そして，mruby の文字列系・シンボル系の長さには sizeof 演算子が使われる可能性が極めて高い．
なにしろ，mruby の API 自身に， sizeof を内包するものもあるのだから．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define mrb_strlen_lit(lit) (sizeof(lit "") - 1)</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<p>というわけで，C言語仕様の視点から，なぜ私が一連のAPI変更に異議を立てたのかということを纏めた．
本件は，好みの問題ではない．
ISO Cの仕様を踏まえると，自明として適切な結果が浮かび上がる．</p>

<p>とはいえ，mrb_int にしたくなる気持ちも解らなくもない．
明日以降，その辺りの，わりと人情系というかピープルウェア的な話で，一連の話題を閉じたいと思っている．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[-Wconversion は，いかがでしょう?]]></title>
    <link href="http://www.monaka.org/blog/2014/03/20/type-conversion-warning/"/>
    <updated>2014-03-20T12:08:52+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/20/type-conversion-warning</id>
    <content type="html"><![CDATA[<p>ちょいと寄り道して，<a href="http://www.monaka.org//blog/2014/03/19/implicit-type-conversion-in-c/">前回</a>の補足．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> gccのversionは何をお使いですか？4.3以降だと-Wconversionとか使えませんかね。。</p>&mdash; ぬん。 (@amasawa_seiji) <a href="https://twitter.com/amasawa_seiji/statuses/446205477546762240">March 19, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>鋭い．(汗</p>

<p>はい．<code>-Wconversion</code> ，使えます．記憶が正しければ GCC 2.95.x から．
ただ，検出が割と難しいようで，3.4系でパッチが出て，立ち消えになったり．
当時の経緯は<a href="http://d.hatena.ne.jp/yupo5656/20040830/p2">このエントリが詳しい</a>です．</p>

<p>また，GCC 4.3 以降では，挙動が微妙に変わったりしています．
変更内容の詳細は，<a href="http://gcc.gnu.org/wiki/NewWconversion">GCC Wiki</a> を．</p>

<p>GCC は，そんな事情なので，前回の記述</p>

<blockquote><p>もしかしたら気の利いた処理系では警告を出してくれるかもしれないが．</p></blockquote>

<p>は，完全に筆が滑っております．
お詫びします…が，必ずしも訂正はしません．</p>

<p>今回の後半は，その辺りについて．</p>

<!-- more -->


<h2>-Wconversion の頼りなさ</h2>

<p>確かに -Wconversion オプションは，暗黙的なダウンキャストについて警告してくれる．
なので，gcc/g++ を使ってコーディングする場合には，可能な限り付けておくべきだ．</p>

<p>しかし，API 設計という今回の話題では，-Wconversion は必ずしも頼りにはならない．</p>

<p>例示しよう．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 65535;
</span><span class='line'>  long b;
</span><span class='line'>
</span><span class='line'>  b = a;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これを手元の XCode の gcc (Apple LLVM version 5.1 (clang-503.0.38) (based on LLVM 3.4svn) Target: x86_64-apple-darwin13.1.0) でコンパイルする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc -Wconversion test.c
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>warning は出ない．</p>

<p>Renesas製 H8/300 というマイコン向けのクロス gcc (gcc version 4.6.4 20130204 (prerelease) (GCC) )でコンパイルしてみる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /pizza/bin/h8300-pizzafactory-elf-gcc -Wconversion test.c 
</span><span class='line'>test.c: In function 'main':
</span><span class='line'>test.c:4:3: warning: conversion to 'int' alters 'long int' constant value [-Wconversion]
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>今度は warning が出る．</p>

<p>この差異は，gcc のバージョン違いに因るものではない．</p>

<p>前回，C言語仕様の整数型は，決っているようで何も決まっていないことに言及した．
char も int も short も long も，それぞれどんな範囲の整数を保持できるかは，実行対象のCPUの特性に合わせて，処理系(コンパイラ)が勝手に決めて良いのだ．</p>

<p>(…まあ完全にフリーダムかというとそうでもなくて，long 型より広い範囲の整数を格納できる short 型はダメとか，制約はある．
商業誌掲載原稿なら，このへんの細かいことも書く．けれども，本稿は日記なので割愛．ご興味ある方はGoogle先生へ．)</p>

<p>H8/300 という系列のCPUは int が 16ビットであるほうが都合が良いので，デフォルトではそのようになっている．つまり 32767 までしか格納できない変数に 65535 を代入しようとしている．
結果，警告が出る．</p>

<p>ちなみにH8/300 は動作クロック 25MHz という，今や貧弱なCPUだが，有志のご尽力により Linux が動く．
Linux は，元が i386 アーキテクチャ向けだったこともあって， int が 32ビット以上あることを暗に期待しているフシがある．
そんな理由…だけではないだろうが，int を 32 ビットとみなしてコンパイルするオプション <code>-mint32</code> が用意されている．これを使ってコンパイルしてみる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /pizza/bin/h8300-pizzafactory-elf-gcc -Wconversion -mint32 test.c 
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>XCode の環境と同じく，警告は出なくなる．
暗黙のダウンキャストが起きなくなるのだから，当然ではある．</p>

<h2>API 設計者は，-Wconversion には頼れない</h2>

<p>つまり，-Wconversion は，<strong>今まさにコンパイルしようとしている環境において</strong>，暗黙のダウンキャストを検知する．
<strong>他の処理系で何が起こるかは関知しない</strong> ．
H8/300 の例から判るとおり，同じコンパイラの同じターゲットでも，ABI (アプリケーション・バイナリ・インタフェース)が違えば，検出したりしなかったりする．</p>

<p>このような動作では，API の移植性を担保できない．</p>

<p>アプリケーションの開発者にとっては，-Wconversion で少なからずのミスは見つかるかもしれない．
ただし，C 言語 API の設計者は，特に移植性を問われる種類の API の設計者にとって，-Wconversion は，頼りない．</p>

<p>もう少し踏み込んで言ってもよい，頼ってはいけない．</p>

<p>蛇足だが，この点について，コンパイラの開発者を責めるのはお門違いだろうと，私は思う．
責めるとしたら，整数型についてほぼフリーダムとした，最初期にC言語の仕様を決定した面々だろう．</p>

<h2>API 設計者が取りうる態度は，2つある</h2>

<p>よく言えばターゲットアーキテクチャに対して柔軟，悪く言えば何も決めてない優柔不断な，C言語の整数型．
これに直面する際に， API 設計者が取りうるアプローチは 2つある．</p>

<h3>完璧な移植性は諦める派</h3>

<p>一つは，動作環境に期待する整数型を明示してしまうというアプローチ．</p>

<blockquote><p>char は 8ビット符号付き・int は 32ビット・short は16ビット・long は32ビット・ポインタは32ビット．それ以外は認めない．以上</p></blockquote>

<p>これは，20世紀のUnix世界ではしばしば見られる態度だった．
C言語といえばUnix．そのUnix動作マシンが概ね備える整数型を前提にすれば，世の中のほとんどをカバーできるではないか，と．</p>

<p>そのため，int やポインタが 16ビットであることが自然である MS-DOS の世界には移植できないソフトが山盛りになったりした．
まあでも，MS-DOS なんて，俺らが使う Unix からみればオモチャだし，みたいな．</p>

<h3>意地でも移植性を追い求める派</h3>

<p>永らくC言語といえばUnixだったが，ゲーム機や組込みシステム開発に使われるようになるにつれ，話が若干違ってくる．</p>

<blockquote><p>C99準拠って言っているのだから，それを達成するのがエンジニアとしての誠意ってモンだろう?
DSPからスパコンまでで同じソースコードが動かなきゃ認めない．以上</p></blockquote>

<p>冷蔵庫サイズのワークステーションよりも，ゲーム機やケータイのほうが出荷台数が多いのは，いくら世間に疎くても判る話だ．
Unix も，ゲーム機やケータイの高機能化に助けられて，それらの中に入れるようにはなった．
しかし，同時に組込みシステムの広がりも爆発的なものがある．
いまやクルマはコンピュータなしには動かない．エンジンの環境性能を満たせない．
ゲーム機本体がUnixでも，周辺機器を動かしているマイコンには Unix は入らない．</p>

<p>このような，非Unixな世界では，整数型に前提を設けることなんてできない．
移り変わりの早いマイコンの世界で，特定のアーキテクチャに依存するコードなんて，リスクが高すぎて書けない．
ライブラリも同様に，アーキテクチャ独立が求められる．</p>

<h2>C言語 API 設計者の異文化が交わる場所としてのmruby</h2>

<p>実際には，このような2つの派閥の極端に立つ人は，まず居ないだろう．
これがトレードオフの問題だということに気づけない人は，ソフト屋には向かない．
だが，両極端の間のどこに重心を置くかというのは，人により，またはプロジェクトにより，分かれる．</p>

<p>mruby というのは，立ち位置として面白いと，個人的には思っている．</p>

<p>mruby が処理する Ruby 言語は，Unix 文化の代表的側面である Little Language がその根底にあるように思える．
また，LAMP から Rails へという，Unix 系文化の進化に添って大きくなってきた．
だから，その API 設計が，理屈は判っていながらも Unix 的な方向に時々流れるのは，不思議なことではない．
私の好みはさておき．</p>

<p>同時に，mruby は<em>組込み向け</em>言語処理系でもある．
利用者の少なからずは，移植性が担保されていないなら魅力を感じない．
API は，C99に準拠する限りのあらゆる処理系であっても耐えうる設計か．
そのことを常に問われる分野の人も，コードを観ている．</p>

<p>mrubyでのMatz氏のAPI変更に対して，私が文句を言っているときは，APIに対する2つの派閥を思い浮かべると，解りやすいかなと思う．</p>

<p>a bit philosophical とか言われて，まあそうだよなと心の何処かで思いつつも，あるんだよ．広大な組込み世界には．びっくりするような構成のアーキテクチャってのが．</p>

<h2></h2>

<p>ちょいと脇道に逸れたけれど，@amasawa_seiji さんから mention 頂かなかったら書きそびれたはずの話題に言及できた．
あと1回…2回…くらい? あんまり長くても飽きるので．私が．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C言語における暗黙の型変換とAPI設計]]></title>
    <link href="http://www.monaka.org/blog/2014/03/19/implicit-type-conversion-in-c/"/>
    <updated>2014-03-19T14:06:12+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/19/implicit-type-conversion-in-c</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2014/03/18/how-to-write-portable-api-introduction/">前口上</a>の，つづき．</p>

<h2>C言語の整数型に潜む悪夢</h2>

<p>まずは，よく知られているところから．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 65535;
</span><span class='line'>  char b;
</span><span class='line'>
</span><span class='line'>  b = a;
</span><span class='line'>
</span><span class='line'>  printf("%d %d\n", a, b);
</span><span class='line'>
</span><span class='line'>  return EXIT_SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>「a に 65535 を代入し，b に a の値を代入しているのだから，b も 65535 になるはず．」
などとLL言語(JavaScript や Ruby など)に慣れていると思ってしまいがちだが，そうはならない．</p>

<!-- more -->


<p>なぜなら，一般に，char 型の変数が保持できる値の範囲は，int 型の変数が保持できる値の範囲よりも小さいから．
概ね(…とボカす理由は後述)，char は -128 から 127 までの整数しか保存できない．</p>

<p>この性質は，ときどき，極めて恐ろしい．
C言語は，上の例のように保持できる値の範囲が小さい変数への代入を，エラーとして扱わない．しかしその結果は，おそらく，プログラマの期待とは異なる．
こういう挙動によるバグは，発見するのが困難なものとなる．</p>

<p>もしかしたら気の利いた処理系では警告を出してくれるかもしれないが．
しかし，私の手元にあった XCode の gcc では，割と厳格な警告を出すようオプションとして <code>-pedantic -std=c99 -W -Wall</code> を指定したが，素通りした．</p>

<p>(2014-Mar-20 補足: 上記，ちょっと筆が滑っている．ダウンキャストへの警告については<a href="http://www.monaka.org//blog/2014/03/20/type-conversion-warning/">こちらのエントリ</a>もご参照頂きたい)</p>

<p>さて，それでは変数 b の型を int 型にすれば解決か?
残念ながら，それもダメ．なぜなら，int 型が保持できる整数の範囲は処理系定義であるから．
int 型のサイズが 16 ビットだったなら，保持できる整数の範囲は -32768 から 32767 までしかない．a への代入の時点で，数値が期待と異なる．
つまり，上記のリストは，ある環境では動くかもしれないが，別の環境では動かない．</p>

<p>さらに疑心暗鬼になると，char 型のサイズも実はC言語仕様は決めていない．
だからもしかすると，int 型と char 型のサイズが共に17ビット以上ある処理系なら，上記のリストは期待通りに動くかもしれない．
DSP など特殊用途のプロセッサでは，char 型が 24 ビットだったり 32 ビットだったりというのは，十分に有り得る．</p>

<p>このように，学校などで無邪気に語られる「C言語には移植性がある」などというのは嘘っぱちも甚だしい．
C言語プログラマは，細心の注意をもって，自ら移植性を担保しなければならない．</p>

<p>さて，上記をまとめると，C言語プログラミングには，次のような鉄則がある．</p>

<blockquote><p>整数型変数の代入の際には，右辺にある数値が，左辺にある変数の型に収まるかどうかを，しつこいほど気にしなければならない．</p></blockquote>

<p>以上が前提知識．本題に入る．</p>

<h2>移植性が確保できる C 言語 API</h2>

<p>C 言語 API は，(プリプロセッサマクロで書けなくも無いが)普通はC言語の関数として用意する．</p>

<p>C 言語の関数呼び出しは，値渡しだ．ポインタ渡しも，ポインタの値を渡している．
つまり，関数呼び出しにおいて，代入と同じことが起こる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>foo(char b)
</span><span class='line'>{
</span><span class='line'>  printf("%d\n", b);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 65535;
</span><span class='line'>
</span><span class='line'>  foo(a);
</span><span class='line'>
</span><span class='line'>  return EXIT_SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このリストも，エラーも(GCCでは警告も)出ずにリンクまで通る．
代入に関する話題から判る通り printf の出力は，65535 にはならないかもしれないし，なるかもしれない．</p>

<p>ここで C言語での API 設計における鉄則が見えてくる．</p>

<blockquote><p>APIでは，暗黙の型変換を誘ってしまうような，関数宣言をしてはいけない．</p></blockquote>

<p>この鉄則を守る方法として，安直なのは，API が受け取る整数型を大きめにとっておくこと．
ダウンキャストでは値が落ちるが，アップキャスト(大きな範囲を取れる型へのキャスト)では整数が確実に代入できることは保証されている．
しかし，&#8221;安直&#8221;である理由が2つあり，お薦めはしない．</p>

<p>まず，大きな整数型というのは，コストが高いから．
CPUから見て計算コストが高い．メモリも余計に消費する．</p>

<p>そして，古めのC言語仕様では，最大の数値型が何なのか実は判らないから．
C99標準以降，処理系が扱える最大の整数型 uintmax_t ならびに intmax_t という型が規定された．しかし，分野によっては無視できないシェアを誇る Microsoft Visual C++ は，C99 への対応が中途半端で，umaxint_t, intmax_t は，定義されていない．</p>

<p>そんなわけで，API は，関数呼び出し時に，整数型のアップキャストもダウンキャストも，させてはいけない．</p>

<p>暗黙の型変換が無いとC言語のコーディングは酷く窮屈になる．
だから，C言語仕様も，容認している．
しかし，こと API についていえば，暗黙の型変換は，害悪でしかない．</p>

<p>結論として，APIでは，ユーザの関数呼び出し時に使うであろう型を，そのまま用いる，というのが唯一無二の選択となる．</p>

<h2></h2>

<p>さて，長くなった．
Matz 氏と私が，mruby の API についてどのように考えたのか．
それは<a href="http://www.monaka.org//blog/2014/03/20/type-conversion-warning/">明日</a> 以降に．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C言語APIの作り方 - 前口上]]></title>
    <link href="http://www.monaka.org/blog/2014/03/18/how-to-write-portable-api-introduction/"/>
    <updated>2014-03-18T22:00:12+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/18/how-to-write-portable-api-introduction</id>
    <content type="html"><![CDATA[<h2>Twitter から</h2>

<blockquote class="twitter-tweet"><p>この辺のやりとり勉強になるぅ <a href="https://t.co/BQzNAjSoyP">https://t.co/BQzNAjSoyP</a></p>&mdash; MATSUMOTO, Ryosuke (@matsumotory) <a href="https://twitter.com/matsumotory/statuses/445772972775571456">March 18, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>というやりとりは，こちら．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yukihiro_matz">@yukihiro_matz</a> ええ，それはRuby世界からの見方ですね．C世界から見れば，const char * の長さが mrb_int になるのは危険です．SIZE_MAX と MRB_INT_MAX の大小関係は，C言語処理系に依りますから．(続</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/445771388297564160">March 18, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>連ツイなので，前後も読んで頂ければと．</p>

<p>ちなみに，この後，Matz 氏がコミットを一部撤回し，結局のところ，API の分裂は避けられた．</p>

<h2>やっちゃマズい fork</h2>

<p>ソフトウェア開発の世界では，やってよい fork と，やっちゃマズい fork というのがある．
やりかけておいてナンだが，API の fork は，やっちゃマズい系の最右翼だ．</p>

<!-- more -->


<p>オトナの事情で分裂したオープンソースプロジェクトは，枚挙に暇がない．
OpenOffice.org と LibreOffice，Hudson と Jenkins，などなど．
そんな事態に陥っても，せめて API は互換になるよう頑張る．</p>

<p>なぜなら，APIの分裂は，開発者の利便性を下げる．
利便性の悪いソフトは，開発者コミュニティから敬遠される．
結局のところ，分裂したプロジェクトの両方にとって損となる．</p>

<p>これは，どんなソフトウェアでも言える話ではある．
が，特にオープンソースの世界では，深刻な話となる．
開発者を惹きつけないと，旨味が出ないから．</p>

<h2>なんでそんな損な fork を?</h2>

<p>じゃあなんで，私が損な選択を敢えてしようとしたのか．</p>

<p>Matz氏がAPIを変えたいと思った理由にも，妥当性はある
(上記tweetを読めば，解る人には解る)．
そして，私の言い分にも，もちろん妥当性はある．</p>

<p>mrubyリポジトリ上の話題としては過ぎたことなので，どうでもよいといえばどうでもよいのだけれども．
C言語の入門を脱したくらいのプログラマが，再利用性の高いライブラリを作ろうと思った時に，有用かもしれないと思った．
なので，140字の行間を，私なりに(一方的に)埋めてみる．</p>

<p>今日は，話のマクラだけ．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[君の代わりはいない．ぼくの代わりもいない．]]></title>
    <link href="http://www.monaka.org/blog/2014/02/17/no-one-can-take-his-place/"/>
    <updated>2014-02-17T15:35:11+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/17/no-one-can-take-his-place</id>
    <content type="html"><![CDATA[<p>食材の買い出しのため，八百屋に行った．
タラの芽が並んでいた．
そうか，そういう季節か．</p>

<!-- more -->


<p>タラの芽の天ぷらは，この季節の定番だ．
…大好きかと問われると，実は，そうでもない．
でもまあ，今の季節なら，食べる．
噛みしめると，そろそろ寒さも緩むな，という気がするから．</p>

<p>タラの芽を，夏の暑い盛りに食べても，別に変ではないだろう．
独特の軽い苦味は，夏バテにも効きそうな気もする．
でも食べない．
旬じゃないから．</p>

<h2></h2>

<p>食べ物だけでなく，あらゆるものには旬がある．
昔の人は，人生を，春夏秋冬になぞらえた．
人は変わっていく．
私は変わらないと胸を張る人でも，老いていかないということはない．</p>

<p>そして昔の人は，世の中も，1年よりも長い何らか周期のあるものとして捉えた．
その周期は，地方や時代によって様々だ．
けれども一般論として，古今東西，環境が不変だいう解釈は無いということは言えるだろう．
世の中にも，旬がある．</p>

<p>人は，世の中で生きている．
自分も変わる．周りも変わる．</p>

<h2></h2>

<p>「<a href="http://internet.watch.impress.co.jp/cda/news/2006/10/24/13721.html">次のビル・ゲイツを</a>」「<a href="http://wired.jp/2012/04/24/sxsw-vol3/">日本のザッカーバーグは誰だ!?</a>」「<a href="http://www.nhk.or.jp/sakidori/backnumber/120909.html">日本のジョブズを探せ！</a>」</p>

<p>ビル・ゲイツ，マーク・ザッカーバーグ，スティーブ・ジョブズ，いずれも成功したアイコンであることは，否定の余地がない．
しかし，彼らの成功は，旬を無視できるような，汎用的なメソドロジによって為されたのだろうか．</p>

<p>私は，疑わしいと思う．
ある人の，ある時の成功は，世界を取り巻くあらゆるものが旬であったから成し得たのではないか．</p>

<p>成功した人を見て，その成功を否定するほど，私はヒネてはいない．
しかし，彼らの成功の要因には，その時代の旬が強く影響している，とは思う．
旬の巡りあわせだけで成し遂げられる，なんてことも思わないが．
こういった微妙なところを無視して真似して，成功に辿り着けるのだろうか．</p>

<p>だれも誰かの代わりには成れない．
コピーにも成れない．</p>

<h2></h2>

<p>IT関連の所轄官庁の一つである経産省が，企業への支援から，その一部を優秀な個人をも支援するようになってから，約15年になる．
具体例の一つであるIPA未踏事業については，実数は怠惰により調べていないが，3桁規模の採択者が存在するはずだ．
採択者には，その後，大成した人もいれば，そうでもない人もいる．</p>

<p>おそらく，メソドロジ確立のための母集団としては，そこそこ成り立つ量になっているだろう．</p>

<p>IT関連の育成に関わる方々のお考えは様々だが，<strong>成功した人の二番煎じになる天才を見つけよう育てよう，という考え方については捨て</strong>たらどうだろうかと，思う．
そこそこの才能の持ち主が確実に成功するためのメソッドは，有り得ないだろうか．
そういうメソッドの開発を考えるだけのデータは，そろそろ貯まってきているのではないだろうか．</p>

<h2></h2>

<p>ニッポンは，優れた人材を輩出し組織化する能力はあるが，それらの要因を調べメソッドとして抽出する能力は，極めて低い．
このことは，しばしば言及されるところだろう．</p>

<p>アジャイルプロセスは逆輸入だし，ジョブズのソニー好き，ジェフ・ベゾスのKaizen好きもよく知られている．
日本の優れたところは，猿真似やコピーはされず，抽出・応用され，ニッポンを劣勢に追いやっている．</p>

<p>日本は，メソドロジの開発を，考えていく必要があるのではと思う．
苦手としている分，ことさら意識的に．</p>

<p>本稿はIT関係について述べている．
でも，テクノロジが関わるあらゆる分野についても，似たようなことが言えるのかもしれないとも思っている．</p>

<h2>…</h2>

<p>など考え事しながら買い物をしていたら，タラの芽を買ってくるのを忘れた．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メディア・リテラシと，生存]]></title>
    <link href="http://www.monaka.org/blog/2014/02/16/media-literacy-saves-you/"/>
    <updated>2014-02-16T13:56:50+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/16/media-literacy-saves-you</id>
    <content type="html"><![CDATA[<p>大雪が降った．
東京浅草，スカイツリー界隈も大変だった．
しかし，その後の雨と，今日の好天もあって，残雪はあるものの乾いたアスファルトも顔を出している．</p>

<h2></h2>

<p>山梨方面では，積雪が1mを超え，自衛隊が出るほどの騒ぎになっているらしい．
被害者救援募金の立ち上げも行われていないところをみると，まだ被害の全貌も明らかになっていない状態なのだろう．</p>

<p>ニュースを眺めていて，ふと思った．</p>

<!-- more -->


<blockquote class="twitter-tweet"><p>もしアテクシが大雪でホテルに缶詰になったら，ネットの接続が切れるまでありったけの力で救援を求めるとは思うのだが．&#10;それによって救援の順序がついてしまうとしたら，それはどんなもんなのだろうか．&#10;など，コーヒーを淹れながら，ぼんやりと思う．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/434911942117818368">February 16, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>助かってよかったね，と素直に思う．
自衛隊の皆様お疲れ様でした，とも．</p>

<p>別にトリアージなんかついていなくて，メディアへの露出とかも関係なく，例えば，救援活動拠点の近くに閉じ込められていただけかもしれない．
事情がよく伝わっていない状態では，いかなる考えも，邪推とか妄想とか，そういうものでしかない．</p>

<h2></h2>

<p>義父母が，神奈川県の，山梨との県境に近いところに住んでいる．
とんでもない量の雪が写ったの写メが送られてきた．
山の中腹にあり玄関までは，結構な長さの階段もある．
しかしながら，不幸中の幸いというか，体格の良い義弟が同居している．
雪かき戦力の心配は無さそうではある．</p>

<p>スカイツリー界隈も，雪は解けてきた．
下町特有の細い路地でも，ほぼ長靴でなくても歩けるようにはなった．でも，ときどき，路面が雪に覆われたままの箇所もある．
雪とアスファルトがトラ模様になっている道路を見ながら，そういえば，雪が残っている箇所のお宅は，おばあさんしか見かけないような気がする．
など気づく．
雪かき，したくても，できないのかな．</p>

<p><a href="http://area-info.jpn.org/nenHN0001190004.html">山梨は高齢者が多い</a>．
おそらく，豪雪で身動きがとれなくなっている家の中には，高齢者のみ世帯もあるだろう．
ホテルでさえ備蓄の食料がなくなるような状態で，ライフラインがストップし，助けを求める方法がなければ，生命の危機にも直面するだろう．
私の畏れが杞憂で，みなさんご無事であればよいのだが．</p>

<h2></h2>

<p>そういえば．ふと，先週の都知事選に関する，報道映像を思い出した．
IT系をひっさげて立候補し落選した陣営が，おばあちゃんの原宿，巣鴨へ繰り出して支持を訴えたらしい．</p>

<p>SNSを駆使した選挙戦では，高齢者へは伝わらない．
このことは，合わせ鏡でもある．
高齢者は，何か困ったときに，ブロードキャストする声を持っていない．</p>

<h2></h2>

<p>これからの時代に取り残されないために，ではなく，万が一の事態でも生き残るために．
そういう視点で，高齢者へのメディア・リテラシ啓発を行う余地があるのかもしれない．</p>

<p>雪害に見舞われた若者たちが，ソーシャルメディアを駆使してニュースになり，救援物資が届いた．
そんなハッピーニュースをwebブラウザで眺めながら，思った．ぼんやりと．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[便利な世の中になったのに]]></title>
    <link href="http://www.monaka.org/blog/2014/02/15/does-it-become-easier/"/>
    <updated>2014-02-15T00:00:00+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/15/does-it-become-easier</id>
    <content type="html"><![CDATA[<p>特定の話題にインスパイヤされ，いくつか似た話題で連投した．
けれども，これで一旦打ち止め．
本稿は，アッサリと進め，終わる．
オレオレ定義を始めると，長くなるし焦点はボケるし，ロクなことがない．</p>

<p>本稿の契機(元ネタ)は「<a href="http://d.hatena.ne.jp/hyoshiok/">未来のいつか/hyoshiokの日記</a>」の「<a href="http://d.hatena.ne.jp/hyoshiok/20140212/p1">まつもとゆきひろのコピーは作れるのか。</a>」および，その反響 tweet から．</p>

<p>元ネタ曰く，</p>

<blockquote><p>Rubyが世界中で使われるようになるまで10年かかった。だけど、クラウドのサービスを使えば、それは1年に短縮できるとまつもとさんは言う。mrubyも成功したので、自分の方法論をまねすれば誰でもできるのになんで後進がいないのだろうか？と彼は問う。</p></blockquote>

<!-- more -->


<h2>1日なのか，20年+1日なのか</h2>

<p>ここで唐突に，話題を移す．</p>

<p>Ruby のような，世界の誰もが使うような素晴らしいソフトウェアの話 <strong>ではない</strong> ．
世界の片隅ニッポンのとある休日に起きた，一人ハッカソンのお話．</p>

<p>経緯の詳細は <a href="http://togetter.com/li/505758">togetter に纏まっている</a>．
リンク先を読む必要は無い．
「iPhone では存在するアプリが，Android には無い」という tweet を見て，うだつのあがらないAndroid好きエンジニアが立ち上があった，という．そこら辺に転がっているような話だ．
で，結局，8時間かそこらで実働モックアップはできあがった．</p>

<p>そのときのtweetで印象的だったものがあった．
検索したけれど，出てこなかったので趣旨だけ要約する．</p>

<blockquote><p>これって，1日仕事だけれど，25年+1日だよね．</p></blockquote>

<p>そう．確かにAndroid版アプリは1日だけれども，そもそも25年前に宇宙研でパルサートラッキングに関わっていなければNMEAって何??? みたいな話だし，同時期からJavaに触れていたのは強みだし，震災がなければGPS連動アプリを作る経験も無かったし．
8時間の背後には，亀みたいなノロマな伸びだったかも知れないが，25年がある．</p>

<p>その25年を隠して，1日で作れたぞ，と言ったとしたら，ちょっとした詐欺だ．</p>

<p>オッサンになると，ときどき，こういう小さな詐欺を働く．
悪意は無いんだ．許しておくれ．</p>

<h2>10年なのか，10+1年なのか</h2>

<p>話を元に戻そう．</p>

<blockquote><p>Rubyが世界中で使われるようになるまで10年かかった。</p></blockquote>

<p>(中略)</p>

<blockquote><p>それは1年に短縮できる</p></blockquote>

<p>(中略)</p>

<blockquote><p>mrubyも成功した</p></blockquote>

<p>(mruby が成功したかどうかの断定には，若干の猶予が欲しい気もするが)概ね事実だと思う．
1年に短縮できる．それは私も思う．10年前を知っているから．
そして実際にmrubyの発展は1年だ．</p>

<p>全てが便利になった．</p>

<p>若い人に共感を得てもらうのは難しいけれど，便利になったのだよ．本当に．あらゆるものが．</p>

<h2>さてはて</h2>

<p>私の場合，25年+1日について指摘してくれた若者に対して，アタマを掻いた．
そして少しだけ開き直った．その25年分こそがオッサンの強みだと．</p>

<h2>スタートラインは，どこ?</h2>

<p>同じスタートラインに立っていないのに，お前ら恵まれているのについてこない，っていうのはフェアじゃあない．
私は，そう思う．</p>

<p><em>1年でできたの? 10+1年なの?</em></p>

<p>フェアでないものに，若い才能は集まらない．
私の知る限りでは．</p>

<p>しかし，言うまでもなく，私は，グローバルソフトウェアなんて縁遠い．
せいぜい，世界中で演奏されているであろう楽器群に搭載されているRTOSと，
輸出も視野にあるらしい宇宙機に組み込まれているはずのブートローダモニタくらいが，私の設計物だ．
それらの製品は全体として素晴らしいが，私の意識からは，縁遠い．
世界に対し，OSという，高々部品でしかないものを提供したに過ぎない．
組込み屋の世界のソフトは，どのように評価されたとしても，高々部品だ．</p>

<p>なので，グローバルソフトウェアの文脈では，違う意識が通用するのかもしれない．</p>

<h2>なんにせよ</h2>

<p>成功する若者を増やそうという試みそのものには，賛成ではある．
成功した人たちに，ぜひ頑張っていただきたい．心から．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[howto と way]]></title>
    <link href="http://www.monaka.org/blog/2014/02/14/way-and-howto/"/>
    <updated>2014-02-14T21:49:23+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/14/way-and-howto</id>
    <content type="html"><![CDATA[<h2>一言で纏めると</h2>

<blockquote class="twitter-tweet"><p>一時期流行った，〇〇やらない人のtweetと〇〇やる人のtweetみたいな話だもんなぁ．「OSSやりたいです」は一生やらない．「パッチ投げました」でしか前には進めない．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/433831823135621120">February 13, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>みたいなエントリは，地べた這いつくばっている私みたいな雑魚が書くのはいいけれど，
OSSコミュニティの後進育成とか考えているひとは思案のしどころですよね，てな話．</p>

<h2>政治家と議員</h2>

<p>何年か前に読んで「へぇなるほど」と思って，曖昧な記憶のまま，何度か引用しているブログエントリがある．
本稿を書くにあたり探してみたら，割と難なくみつかった．</p>

<!-- more -->


<p>「<a href="http://www.t-ken.jp/">田中けんWeb事務所</a>」の「<a href="http://www.t-ken.jp/diary/20101213">職業としての地方議員</a>」から引用する．</p>

<blockquote><p>　一般的には政治家と議員を同意語として使っている場合が多い。その点、私は政治家と議員を別の言葉として分けて使っている。</p>

<p>　政治家というのは、生き方の問題。政治的な主張をして具体的な行動をしている人間は広義で全て政治家である。</p></blockquote>

<p>(中略)</p>

<blockquote><p>　それに比べて、議員とは、狭義で言う政治家の更に狭い範囲である、現職議員にしか使えない言葉だ。働いて報酬をもらう。つまりその多くが職業でなければ、議員とは言わない。</p></blockquote>

<p>本稿に関係ないところは中略した．また，私は江戸川区に居住しておらず，引用に政治的な何らの意図もないことも述べておく．</p>

<p>引用した理由は，シンプル．
&ldquo;しごと&#8221;には，&#8221;生き方(ライフスタイル，主義，信条)&#8221;と&#8221;職業&#8221;の2つの側面で成立するという例示が欲しかったから．</p>

<h2>生き方と職業</h2>

<p>世の中では，&#8221;しごと&#8221;の2つの側面に関する微妙な差は無視されることが多い．
議員と政治家の呼び分けなんて，ふつうは深く考えない．</p>

<p>でも，経営層はこの辺りについて，実に敏感だ．</p>

<p>数年前に，トヨタが「トヨタ・ウェイ」という本を出して書店のビジネス棚を賑わした．
世界企業のトヨタが，微々たる印税を期待して本を出すはずがない．
これは，国際企業として成長するトヨタが，関連企業向けに，自社の精神を説くべく作られた本である．</p>

<p>IT関連でいえば，ある時期，Microsoft press から「私がマイクロソフトで学んだこと」系のライトビジネス書がぼこぼこと出た．
本体であるマイクロソフトの経営層の流れと出版年を見比べると，なるほどと思うだろう
．</p>

<p>IBMの「巨象も踊る」も，社外への広告宣伝の要素もあれば，自社関連企業への要素もあるだろう．</p>

<p>これら巨大企業は，当然のこととして，自社内従業員のための作業手順書を完備している．
それでもなお，各社は，各社の哲学や精神論を通じ，身の処し方のレベルまで従業員に考えさせ，考えを合わせていく．</p>

<p>そういう潮流を，キモチワルイと切り捨てたくなるとしたら，その気持ちは判る．
ただ，かつて国家のレベルで行っていたことが，国境を軽々と跨ぐようになってきて，多国籍巨大企業が自ら行わなければならなくなった，と考えると，それは必要なこと…必要悪なのかもしれないが…ではないだろうか．</p>

<p>これはたぶん営利企業に限らない．
NPO/NGO無しでは今の世界は回らず，それぞれにそれぞれのアイデンティティがあり，構成員は自らの生き方と組織の生き方をすりあわせているのだろう．</p>

<h2>howto と way</h2>

<p>そして，私は思うのだ．
OSSエンジニアにも，職業と生き方との，2側面が存在するのでは，と．</p>

<p>本稿では，２つの側面を表現する適切な語が思いつかなかったので，howto と way という言葉を使う．</p>

<p>howto は，OSSエンジニアが開発を遂行するに当たって直接的に必要な知識，直接的に賃金を得るための手段．つまり職業に相当する．
一例を挙げるなら，Linux界隈で膨大に存在する howto 文書を理解し開発なり設定なりする能力だ．</p>

<p>一方，way は，OSSエンジニアとして円滑に生き続けられるために必要な知恵．つまり，生き方，に相当する．
具体的には，ソフトウェアの自由に対する知識と自分なりの見解，ハッカーマインドの実践，などなど．</p>

<p>これらは，両方必要に見えて，短期ならば，片方でも割とどうにかなる．</p>

<p>顧客や上司からLinuxを指定された，という理由でOSSに関わる技術者は，howto だけ心得ておけばよい．
実際そういう技術者も，世の中には少なくない．
ときどき GPL のコードをコピペして炎上するかもしれないが，まあ，なんとかなる．</p>

<p>wayだけ理解して食いっぱぐれないでいるのは，エンジニアとしては厳しい．
しかし，ヒョーロンカとか扇動家としてなら，wayだけでも関与はできる．
某巨大匿名掲示板などを眺めていると，この層も，案外多いように思う．</p>

<p>ただしもちろん，両方備えるのがスタートラインではある．
片方だけでは，エコシステムに参加できず，やがて消えていくであろう．</p>

<h2>howto と way，何にフォーカスするか</h2>

<p>OSS関連のコミュニティ活動を傍から見ていて，不思議だなと思うことがある．
参加したいと思う側も受け入れる側も，howto と way の区別があんまりついていないのではないか．
これがニッポン固有のことなのか，世界普遍な傾向なのかは判らない．</p>

<p>壇上に登るような方々は，OSSエンジニアとして大成しており，両者は不可分のものとして会得してるものだろう．だからこそ大成したという言い方もできるだろうとも思う．</p>

<p>一方で，「OSSにあこがれています．スーパーハカーすごいと思います」「でも VCS よくわかりません苦手です．英語もダメです．上司の説得が」という層は，howto と way の両側面があるということも，理解できていないだろう．</p>

<p>その辺り，整理できていないと，伝わるべき情報が上手く伝授されないのではないか．
「憧れたけれど，何をすれば判らなくて，やっぱ俺には無理だったわ」と，情熱の無駄使いだけが起きて終わるのではないだろうか．</p>

<p>さて，冒頭の私の tweet は，howto についてのみ言及している．
そして，howto には way も伴うと，根拠なく期待している．
おそらくスジの悪い言い回しだ．
しかし私はそういう tweet でも許される．</p>

<p>だって，私が気にする必要なんてあるの?
tweetを眺めていると，後進育成の文脈で目立つ方々も，深く考えていなさげなのに．</p>

<h2>そして神格化と娯楽化で終わる</h2>

<p>かくして壇上は「よくわからないけれど，すごい」一代芸を持つエンジニアの舞台となる．
行き着く先は，神格化と娯楽化．</p>

<p>義務教育では，なぜかやたらと偉人の伝記を読ませられる．
それらは，偉人たちにとっては(脚色はあるかもしれないが)リアルな人生だ．
しかし，読む子供たちには，ファンタジーの一種である．
なぜすごいのか，近づくためにはどうすればよいのか．
そういうことをリアルに感じられない物語は，容易にファンタジー化する．
たぶん成人でも一緒だ．意識高い層の，奇妙なジョブズ信仰をみればいい．</p>

<p>「OSSの仲間を増やしたい」「興味のある人に伝えたい」
そう思っても，至るのは，神格化と，娯楽化．
聴衆に与えるのは一時の高揚感と，名刺交換をしたという事実．</p>

<p>それで十分だ，という人もいるだろう．
解る人には解る，伝わる人には伝わる．</p>

<p>…まあ，それはそれでもよいのかもしれないが．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハッカーとして名を成すための「運」]]></title>
    <link href="http://www.monaka.org/blog/2014/02/14/luck-for-being-a-great-hacker/"/>
    <updated>2014-02-14T13:14:58+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/14/luck-for-being-a-great-hacker</id>
    <content type="html"><![CDATA[<p>本稿の契機(元ネタ)は「<a href="http://d.hatena.ne.jp/hyoshiok/">未来のいつか/hyoshiokの日記</a>」の「<a href="http://d.hatena.ne.jp/hyoshiok/20140212/p1">まつもとゆきひろのコピーは作れるのか。</a>」および，その反響 tweet から．</p>

<p>元ネタで示されている「Rubyにみるグローバルソフトウェア開発」というタイトルでの講演は，聴講していない．
そのため，今書いているエントリは，元の文脈から逸れている可能性はある．
インスパイヤ系ってことで，ひとつよしなに．</p>

<p>いろいろ思うところはあるのだが，一気に書くと発散するので，数回に分けて書く．</p>

<blockquote class="twitter-tweet"><p>「運」てのは，生き方の一番深いところに直結するゆえに共通見解を極めて見出しづらい概念だからなぁ…．140字ではやはり無理なので，web日記行きだぬ．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/434162914497294336">February 14, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>今回は，「運(幸運/成功)」について．</p>

<h2>「運」とは何か．</h2>

<!-- more -->




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/miura1729">@miura1729</a> <a href="https://twitter.com/hyoshiok">@hyoshiok</a> 最初の一人が運なのは当たり前で、問題は分析して再現確率を上げることが可能かどうかじゃないかと。不可能なら純粋に運ゲーだけど。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/434153565423013888">February 14, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>プログラミング言語の開発者といえば，用語定義に対しての厳格さで言えば，世界最強の部類にいるであろう．
その猛者たちが，「運」とは何かを定義しないで話を進めている．</p>

<p>みたいなところを興味深く思いつつ．</p>

<h2>とりあえずオレオレ定義する</h2>

<p>さりとて辞書定義を引っ張ってきても，汎用過ぎて収束させづらい．
本稿では，「運がいい」「幸運」を，「至近数十年に影響する成果，またはそれを出す力」くらいに定義しておく．
もちろん，そうでない幸運があるということは，私も知っている．
しかし，今扱おうとしている狭い文脈では，「幸運」と「成功」「実力」辺りとを同一視しても許されるだろう．</p>

<p>すると，「運」は，「幸運」へ導く(もしくは遠ざける)要素である．
「運」は，1回で「幸運」か否かを決することはおそらく稀で，複数の「運」の積み重ねで決まる．</p>

<p>この辺までは，本稿の文脈でという条件付きなら，大きな異論は出ないだろう．</p>

<h2>「運」はコントロール可能か</h2>

<p>さて，この辺りから，合意形成への雲行きは怪しくなる．
「運」とはコントロール可能だろうか．</p>

<p>両極端は，&#8221;コイントスのようなものでコントロール不能&#8221; と
&ldquo;集合知や学習によってコントロール可能&#8221;だろう．</p>

<p>もちろん，考え方の中間の考え方も有り得る．
&ldquo;特定の条件では再現確率を上げられるが，時代背景など異なれば再現することは困難&#8221;，のような</p>

<p>この辺りは，各自の&#8221;生き方&#8221;に関わってくる問題であり，また同じ人であっても扱う問題領域により主義主張が変わってくることも多い．</p>

<p>本稿での，私の基本的な立場は，チキンだ．
「コントロール可能か否かも含めて，わからない．
ここがコントロールできないものである可能性を踏まえると， <strong>運の最適化はできるかもしれないが，試みは不経済</strong> ．以上．」</p>

<p>不経済な最適化は行わない．
これは hack のキホンだと思う．</p>

<h2>「幸運」はコントロール可能か</h2>

<p>「運」については，私個人としては，コントロール可能かどうか判断は投げた．
しかし，「幸運」はどうだろうか．</p>

<p>本稿での定義による「運」と「幸運」は金融市場での勝敗と似ている．
私は経済学の素養に乏しいので，例示しておいてナンだが，馬脚を表す前に言及を切り上げたい．
…どうやら， <em>特定の市場に対し，長期に渡って資本を投下し続けられた人が「幸運」を手にする</em> ，らしい．</p>

<p>振り返り，ソフトウェア業界で目立つ人思い起こす．
多作の hacker も皆無ではないが，傾向としては，ごく少数の技術要素に拘り抜いた人への高評価が目立つのではないか．</p>

<p>本稿を書く契機になった Matz 氏は「私は人の役に立ったプログラムは人生で3つくらいしかない」と壇上で公言する．
もちろん Ruby は大成功．
mruby もたぶん成功するだろう．</p>

<p>Linux の Linus 氏は，git も成功させたが，言い方を変えると絶大な知名度の割に2つしか作品がない．</p>

<p>TOPPERSの高田教授は静的OS一筋．</p>

<p>こどもプログラミングの第一人者となった阿部さんは筋金入りのSmalltalker．</p>

<p>その他，枚挙に暇がない．</p>

<p>「成功するには，成功するまで続けることだ」というのは，しばしば軽口として使われる．
しかし，ソフトウェア開発に関しては，これが最強かつ唯一の成功法則なのではないかと，私は思う．
<strong>とにかく継続する，という行動は，個々人のレベルでも十分にコントロール可能だ</strong>．</p>

<p>こんな風に過度に単純化すると，成功した方々が何も考えていないように見えて失礼かもしれないが．継続するという行為そのものが，才能であると私は考える．</p>

<p>ちなみに私は，一行パッチを送ったプロジェクトの数なら日本で5%に入れる気がしているが，一途なものがなく，いまやこのアリサマだ．
浮気性は，野垂れ死ぬ．</p>

<h2>「幸運」に向かわせて良いか</h2>

<p>だから，もし本気で「まつもとゆきひろのコピー」なるものを作りたいのであれば，脇目もふらずに開発を続けさせるべきだろう．
もうちょっと穏当に言い直すなら，単一プロダクトの開発を長期継続できる環境を整備すべきだ．
人生を賭して構わないと思うプロダクトを早めに見つけさせる(見つける手伝いをする)ことも大事だ．
「幸運」を手にするまで10年から20年くらいかかるから，若いうちに．</p>

<p>そうすれば，歩留まりはわからないけれど，それなりの量のコピーはできるかもしれない．
が，しかし，まあ…．
<a href="http://www.yomiuri.co.jp/science/news/20140202-OYT1T00332.htm">STAP細胞の発見に際して，小保方さんと共同研究を行った若山教授の一言</a>は，受け止めて置く必要はあるだろう．曰く，</p>

<blockquote><p>「彼女は次元が違い、難しいかもしれない。小保方さんのように世紀の大発見をするには誰もがあり得ないと思うことにチャレンジすることが必要だ。でもそれは、若い研究者が長期間、成果を出せなくなる可能性があり、その後の研究者人生を考えればとても危険なこと。トライするのは並大抵の人ではできない」</p></blockquote>

<p>不世出を量産しようとすれば，歪は出る．
その歪に沈んだ若者(たぶん沈む頃にはオッサンオバサン)をどうするのだろう．
セーフティネットの用意もなく，イケイケドンドンで若いのを向かわせるのだとしたら，無責任であろう．</p>

<h2>…</h2>

<p>オレは賭けるんだ，という若いのを留めることも，私はしないけれどもね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[組込みシステム is 何?]]></title>
    <link href="http://www.monaka.org/blog/2014/02/11/what-is-embedded-system/"/>
    <updated>2014-02-11T12:57:57+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/11/what-is-embedded-system</id>
    <content type="html"><![CDATA[<p>曰く．</p>

<blockquote><p>一円単位でコストを削っているのでファームウェア書き換え前提のプロセスは組み込みではないです。iPhoneは組み込みじゃないですから。</p></blockquote>

<p>溜息が出る．
組込みシステムの文脈で露出の高い方から，こういう類の意見が出るたびに．</p>

<!--more-->


<p>組込みシステムでは，一円単位でのコスト抑制がかかることは，珍しくは無い．
それは，その通り．
コストが全て．だから，最近の自動車のコンピュータは書き換え可能になっている．
ムダ・ムラを徹底的に排除する，あのトヨタの自動車でさえも．</p>

<p>iPhone は組込みではないという．
ならば，科学館や美術館へ行ってみるといい．
iPhone の兄弟である iPad が，壁面に掲げられ，パネルに埋め込まれ，運用されているのをしばしば見かけるだろう．
ああ，組込みシステムの開発者たちは，そういう場所に行く暇もないくらい忙しいのだっけか．</p>

<p>サイネージの多くが，Windowsで動いている．
自動販売機でLinuxのブートプロセスが表示されている写真が，SNSにアップロードされている．
これらは組込みではないって?</p>

<p>リセットベクタから管理するのが組込み?
ならば.NET Micro frameworkや一部の組込みLinuxは，れっきとした組込みだろう．
これらは自ら(つまりファーム)の一部を書き換えるケースを暗黙的に仮定している．</p>

<p>組込みシステムの守備範囲は，膨大だ．
そしていまだに膨張を続けている．
この文明が滅ぶまで，膨張し続けるだろう．</p>

<p>歴史の中で，確かに，ファームウェア書換ができないシステムが優位な時代もあった．
そういうシステムは今もあるだろう．今後も全滅するとは思わない．
しかし，組込みシステムの守備範囲が広がっていく中で，割合として減っていくのは間違いない．
かつて，自動車のエンジン制御用コンピュータは，ファームウェアの書換を想定した作りではなかった．家電も，同じ傾向があった．</p>

<p>時代の流れに抗っても，得られるものは多くない．
過去のある時点における優位をもって「組込み」を定義し続けたとき，
得られるのは自己肯定感だけだろう．
世間と専門家との定義の乖離は，専門家の価値低下を招き，組込みシステムを取り巻く業界を衰退に導くだろう．</p>

<p>溜息が，こぼれる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EC2でXenのmini-osを動かす手順]]></title>
    <link href="http://www.monaka.org/blog/2014/02/04/how-to-build-ebs-image/"/>
    <updated>2014-02-04T10:26:39+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/04/how-to-build-ebs-image</id>
    <content type="html"><![CDATA[<h1>余談</h1>

<p>最近，mruby を動作させる超軽量クラウドOSなんてのを，なんちゃってで作っている．
ざっくりとした経過は，先週末くらいからtwitterで呟いている．</p>

<p>一応，会社を持っているので，そちらで展開することは不可能ではなさげではある．
でも開発資金もないし市場も立ち上がっている風でもない．ネタ系で済ましておいたほうが，傷を負わなくて済むような気もする．
資金力が十分にあるならば，大学に持ちかけて共同研究でも始めちゃうようなネタという気もするのだが．
思案の最中．
うだつが上がらんと，ほんと，なんにもできないねぇ．
やだやだ．</p>

<p>閑話休題．</p>

<h1>まくら</h1>

<p>そのOSは，Xen の mini-os (厳密にいうと stubdom)をベースにしているので，Amazon EC2 でも動作する．
Amazon が提供していないカーネルを独自に EC2 で動作させるためには，どうやら EBS ボリュームを作らねばならないらしい．
私は，AWS の単なるユーザで，細かいところはあまり詳しくない．
よって，EBS ボリューム以外での起動方法もあるのかもしれないが…．</p>

<p>手順は本家ヘルプページに割と細かく説明されている．
解説ブログも，ググれば山盛り．
さすがは，みんな大好きAWS．</p>

<p>だがしかし，最近になって，AWS は，管理ツールを AWS-CLI というものに統合しようとしている一方，本家ヘルプページは，AWS-CLI への対応が十分にできていない．</p>

<p>そこで，本稿では，AWS-CLI で mini-os をブートさせるための手順を記す．</p>

<!-- more -->


<h1>作業</h1>

<h2>概要</h2>

<p>独自のカーネルをEC2上で動作させるためのイメージ(以下，オレオレイメージ)は，EBS のスナップショットから作るようになっている．
Xen ではおなじみの PV-GRUB が，オレオレイメージ中にある boot/grub/menu.lst を読み，
kernel (本稿の場合は mini-os)をロードしブートする．
手元環境でEBSを作ってアップロードすることもできるのかもしれないが(知らない)，ここでは EC2 上で t1.micro を立ち上げて作業する．
一連の作業時間は，1時間もかからない．t1.micro なら10円にも満たないような額だろう．</p>

<p>本稿では，ビルドは手元で行うことを想定している．ビルド環境さえもEC2上に立てるということも，もちろんできる．
その際の作業の読み替え箇所は，いちいち言及するまでも無いだろう．</p>

<h2>手順0: ~/.aws/config</h2>

<p>こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[default]
</span><span class='line'>aws_access_key_id=ないしょ
</span><span class='line'>aws_secret_access_key=ないしょ
</span><span class='line'>region=ap-northeast-1
</span><span class='line'>output=text</span></code></pre></td></tr></table></div></figure>


<p>region が違うと，下記例示の image-id やらなにやら変更が要るかもしれない．</p>

<h2>手順1: EBSボリュームへのアクセスを行う EC2 インスタンスの生成</h2>

<p>EC2のインスタンスを立ち上げる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 run-instances --image-id ami-dcfa4edd --instance-type t1.micro --security-group-ids quick-start-1 --key-name monaka</span></code></pre></td></tr></table></div></figure>


<p>&mdash;security-groups-ids や &mdash;key-name は，ご自分の環境に合わせて．
&mdash;image-id も，好みの環境があるなら，それで．
でも，本稿の例だと複雑なことはしないので，amiの選択に凝るのは時間の無駄かも．</p>

<p>結果はこんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>578606849602 r-351e1831
</span><span class='line'>GROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>INSTANCES 0   i386    None    False   xen ami-dcfa4edd    i-a3bec9a4  t1.micro    aki-ec5df7ed    monaka  2014-02-01T11:04:33.000Z    None    None    /dev/sda1   ebs None    paravirtual
</span><span class='line'>MONITORING    disabled
</span><span class='line'>PLACEMENT ap-northeast-1b None    default
</span><span class='line'>SECURITYGROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>STATE 0   pending
</span><span class='line'>STATEREASON   pending pending</span></code></pre></td></tr></table></div></figure>


<h2>手順2: 諸々のファイルを入れるEBSボリュームの生成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 create-volume --size 1 --availability-zone ap-northeast-1b</span></code></pre></td></tr></table></div></figure>


<p>mini-os のサイズは1MB以下なのだが，EBSボリュームの最低サイズは1GB．無駄だがやむなし．</p>

<p>結果はこんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ap-northeast-1b  2014-02-01T10:46:19.012Z    1   None    creating    vol-1cbb4b16    standard</span></code></pre></td></tr></table></div></figure>


<h2>手順3: EBSボリュームのEC2インスタンスへのアタッチ</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Monacintosh:~ monaka$ aws ec2 attach-volume --volume-id vol-1cbb4b16 --instance-id i-a3bec9a4 --device /dev/sdh1</span></code></pre></td></tr></table></div></figure>


<p>vol-1cbb4b16 は，手順2の結果で得られたもの．i-a3bec9a4 は，手順1の結果で得られたもの．</p>

<p>結果はこんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2014-02-01T11:05:25.613Z /dev/sdh1   i-a3bec9a4  attaching   vol-1cbb4b16</span></code></pre></td></tr></table></div></figure>


<h2>手順4: 作業用 EC2 インスタンスへの ssh ログイン</h2>

<p>手順1で，インスタンスを立ち上げた直後は，サーバのFQDNが判らない．
そろそろインスタンスのプロビジョニングも終わっているはずなので，確認．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 describe-instances --instance-ids i-a3bec9a4</span></code></pre></td></tr></table></div></figure>


<p>結果はこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RESERVATIONS 578606849602    r-351e1831
</span><span class='line'>GROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>INSTANCES 0   i386    None    False   xen ami-dcfa4edd    i-a3bec9a4  t1.micro    aki-ec5df7ed    monaka  2014-02-01T11:04:33.000Z    ip-10-132-154-11.ap-northeast-1.compute.internal    10.132.154.11   ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com   54.199.18.76    /dev/sda1   ebs None    paravirtual
</span><span class='line'>BLOCKDEVICEMAPPINGS   /dev/sda1
</span><span class='line'>EBS   2014-02-01T11:04:36.000Z    True    attached    vol-69bc4c63
</span><span class='line'>MONITORING    disabled
</span><span class='line'>PLACEMENT ap-northeast-1b None    default
</span><span class='line'>SECURITYGROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>STATE 16  running</span></code></pre></td></tr></table></div></figure>


<p>compute.amazonaws.com で終わっているのが，外向きのFQDN．
今回の場合は，ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com
なので，おもむろに ssh．</p>

<p>Amazon Linux の場合は，ログインユーザは ec2-user となる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh ec2-user@ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<p>サーバの公開鍵を受け入れるかどうかなど聞かれる．
結果は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The authenticity of host 'ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com (54.199.18.76)' can't be established.
</span><span class='line'>RSA key fingerprint is e8:10:70:59:ce:4b:7b:59:97:92:35:d8:35:a7:3a:92.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added 'ec2-54-199-18-76.ap-northeast-1.compute.amazonaws.com,54.199.18.76' (RSA) to the list of known hosts.
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>See /usr/share/doc/system-release/ for latest release notes.
</span><span class='line'>No packages needed for security; 170 packages available
</span><span class='line'>Amazon Linux version 2013.09 is available.
</span><span class='line'>[ec2-user@ip-10-132-154-11 ~]$ </span></code></pre></td></tr></table></div></figure>


<h2>手順5: EBSボリュームのマウント</h2>

<p>手順3では，EBSボリュームはアタッチしかしていない．
ここでファイルシステムを作成して，マウントする．</p>

<p>ファイルシステムの生成は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-132-154-11 ~]$ sudo mkfs.ext2 /dev/sdh1</span></code></pre></td></tr></table></div></figure>


<p>結果は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mke2fs 1.41.12 (17-May-2010)
</span><span class='line'>Filesystem label=
</span><span class='line'>OS type: Linux
</span><span class='line'>Block size=4096 (log=2)
</span><span class='line'>Fragment size=4096 (log=2)
</span><span class='line'>Stride=0 blocks, Stripe width=0 blocks
</span><span class='line'>65536 inodes, 262144 blocks
</span><span class='line'>13107 blocks (5.00%) reserved for the super user
</span><span class='line'>First data block=0
</span><span class='line'>Maximum filesystem blocks=268435456
</span><span class='line'>8 block groups
</span><span class='line'>32768 blocks per group, 32768 fragments per group
</span><span class='line'>8192 inodes per group
</span><span class='line'>Superblock backups stored on blocks: 
</span><span class='line'>  32768, 98304, 163840, 229376
</span><span class='line'>
</span><span class='line'>Writing inode tables: done                            
</span><span class='line'>Writing superblocks and filesystem accounting information: done
</span><span class='line'>
</span><span class='line'>This filesystem will be automatically checked every 24 mounts or
</span><span class='line'>180 days, whichever comes first.  Use tune2fs -c or -i to override.</span></code></pre></td></tr></table></div></figure>


<p>ファイルシステムはできたので，早速マウント．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@ip-10-132-154-11 ~]$ sudo mount /dev/sdh1 /mnt</span></code></pre></td></tr></table></div></figure>


<p>特にメッセージの出力など無く，コマンドプロンプトに戻ってくる．</p>

<h2>手順6: menu.lst の生成</h2>

<p>PV-GRUB が読む menu.lst を，EBSボリューム(の中にあるファイルシステム)に置く．
エディタ使ってもいいけれど，この程度なら猫で十分．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ip-10-132-154-11 ec2-user]# sudo -s
</span><span class='line'>[root@ip-10-132-154-11 ec2-user]# cat &gt; /mnt/boot/grub/menu.lst
</span><span class='line'>default 0
</span><span class='line'>
</span><span class='line'>title MiniOS test
</span><span class='line'>        root (hd0)
</span><span class='line'>        kernel /mini-os
</span><span class='line'>[root@ip-10-132-154-11 ec2-user]# exit</span></code></pre></td></tr></table></div></figure>


<p>sudo -s を使ったので，最後には exit で，ec2-user に戻しておいた．</p>

<h2>手順7: mini-os のコピー</h2>

<p>何らかの方法で行う．
ふつうは scp を使うと思う．
そして，EC2 インスタンス上の /mnt/mini-os に配置する．
ここでmenu.lst の記述に引っ張られて，うっかり，/mini-os に置いたりとかしないように．</p>

<h2>手順8: スナップショットの生成</h2>

<p>手順7までで，EC2インスタンスは用済みとなる．
だから，stop-insrance なり terminate-instance なりで落としてもよい．
けれども，最初の動作確認ができるまでは，立ち上げっぱなしのほうがよいかもしれない．
EC2の課金は1時間単位だけれども，1時間以内にn回立ち上げ直すと，n時間分の料金になる．</p>

<p>EC2のインスタンスにアタッチしたままでも，スナップショットは取れる．
そうでないと，スナップショットの意味が無い．</p>

<p>操作は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 create-snapshot --volume-id vol-1cbb4b16</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>結果は，こんな感じ．
</span><span class='line'>None  578606849602    None    snap-940d6c7a   2014-02-01T11:24:16.000Z    pending vol-1cbb4b16    1</span></code></pre></td></tr></table></div></figure>


<h2>手順9: スナップショットからオレオレイメージの生成</h2>

<p>いよいよ佳境．スナップショットからオレオレイメージを生成する．
正直言うと，よく調べがついていないのだけれど，イメージの概要を示すjsonファイルが必要らしい．
短いものなので，これもテキストエディタを持ち出すまでもないはず．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt; blockdevice.json
</span><span class='line'>[
</span><span class='line'>        {"DeviceName":"/dev/xvda","Ebs":{"VolumeType":"standard","DeleteOnTermination":true,"VolumeSize":1,"SnapshotId":"snap-940d6c7a"}}
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>VolumeSize は，最初に 1GB で作ったから．SnapshotId は，手順8の出力と合わせる．</p>

<p>そして，イメージの登録を行う．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 register-image --root-device-name /dev/xvda --name "Mini-os test" --block-device-mappings file://blockdevice.json --architecture x86_64</span></code></pre></td></tr></table></div></figure>


<p>結果は，こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ami-ef650eee</span></code></pre></td></tr></table></div></figure>


<h2>手順10: オレオレイメージの起動</h2>

<p>そして感動のフィナーレ．オレオレイメージの起動．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 run-instances --image-id ami-ef650eee --instance-type t1.micro --security-group-ids quick-start-1 --key-name monaka</span></code></pre></td></tr></table></div></figure>


<p>結果は，こんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>578606849602 r-f17d65f5
</span><span class='line'>GROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>INSTANCES 0   x86_64  None    False   xen ami-ef650eee    i-b38630b4  t1.micro    monaka  2014-02-01T11:46:28.000Z    None    None    /dev/xvda   ebs None    paravirtual
</span><span class='line'>MONITORING    disabled
</span><span class='line'>PLACEMENT ap-northeast-1b None    default
</span><span class='line'>SECURITYGROUPS    sg-e242dbe3 quick-start-1
</span><span class='line'>STATE 0   pending
</span><span class='line'>STATEREASON   pending pending</span></code></pre></td></tr></table></div></figure>


<p>これだけだと，本当に立ち上がったのか判らない．</p>

<p>ログの取得は，こんな感じで行う．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ aws ec2 get-console-output --instance-id i-b38630b4</span></code></pre></td></tr></table></div></figure>


<p>i-b38630b4 は，オレオレイメージの run-instance の結果から引っ張ってくる．</p>

<p>mini-os 自身は小さいものの，mini-os の実行環境のプロビジョニングには，そこそこの時間がかかる．
遅い時は5分以上かかるので，気長に待つ．
どうせ1時間までは同じ時間だから．</p>

<h1>雑感</h1>

<p>EC2 == クラウド == インフラ屋さんやWeb屋さん</p>

<p>という第一印象を持つかもしれないが，stubdom は，newlibだのlwIPだの使っていて，技術要素としては，むしろ組込み屋の定番ライブラリで成り立っている．</p>

<p>2000年ごろには，IOKit を用いてオレオレOSを作るのが流行ったが，同様に，オレオレクラウドOSを作るのが地味に流行るかもしれない．
情報量が少なくて，とっかかりは辛いが，#kernelvm の常連発表者のレベルであれば，たぶん半日のハッカソンで，何らか創り出せるだろう．そんな気がする．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep good company]]></title>
    <link href="http://www.monaka.org/blog/2014/02/03/keep-good-company/"/>
    <updated>2014-02-03T15:30:22+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/03/keep-good-company</id>
    <content type="html"><![CDATA[<p>起業したいという方と話をしていると，必ず出るのが，雇用に関する話．</p>

<p>曰く，「起業をしたいのに，社員候補が居ない．」
経営と雇用を混同している起業志望者の．典型だ．</p>

<p>別のパターンもある．
同年代で先に起業した人たちの「社員の定着が悪い」とぼやくのを聞き，起業前から心配している．
中年から上の年代に多い．</p>

<p>こんなふうに，起業/経営と，雇用することが不可分になっている方は，想像以上に多い．
…というか，私自身が，割と長い間，不可分に考えていた．</p>

<h2></h2>

<p>今の私は，こう思う．
「雇用するから，社員の心配をしなければいけなくなる．雇用はしちゃダメ」</p>

<!-- more -->


<p>限られた例外は，人材派遣会社だ．
特に特定派遣は，雇用をしないわけにはいかない．社員にしないと派遣できないから．
私に思い浮かぶのはこの1例のみだが，その他，許認可等で，雇用が避けられない場合も無くはないだろう．</p>

<p>しかしそれでも，雇用は可能な限り避けるべきだと，思う．</p>

<p>ネットの進展で，特に経理総務系の仕事の多くはアウトソーシングできる．
10年前に Money Forward があったなら，私は総務雇用のみならず税理士との契約もしなかっただろう．
物販のロジスティクスは，月5000円からでAmazonが引き受けてくれる．</p>

<p>セールスだけは，どんな分野であれ自社で抱えたほうがよいと，私も思う．
しかし付随するPRやブランディングに関しては，外にだしたほうがよい結果が得られる．(もちろん，それらを商材としている会社は別)</p>

<p>技術者も，優秀な人は必ずしも雇用しなくてもよい時代だ．
もしIT関係なら，人材派遣や紹介業に頼らなくても，勉強会などで学生やフリーランスを一本釣りすることは不可能ではない．
サラリーマンでも，以前ほど副業規定はきつくない．
もちろん，一本釣りに見合うだけの目利きや信頼を，釣る側が備えている必要はあるけれども．</p>

<h2></h2>

<p>起業関連のセミナーに行くと，厚生労働省が数多くの雇用対策の助成を行っている，と紹介される．
なんとなくお得に感じるのは，解る．
でも，国が特定分野に助成を行うということは，
経済合理性に任せた場合には，誰も国の思惑通りには選択しない，ということでもある．</p>

<p>中規模老舗企業は，なんだかんだいって資金的にも総務人事機能的にも体力がある．
延命として，そういう貧乏くじを自ら引くのは，アリだろう．
しかし，資本力が無いスタートアップにとっては，まさに自殺行為だ．</p>

<p>少し考えると，解ることだと思うのだが．
目の前の現金に釣られたくなる気持ちも解るのだが．</p>

<h2></h2>

<p>こういったことを切々と説明しても，起業志望者たちの少なからずは，納得した顔にならない．</p>

<p>私の説明が舌足らずなのだろう．
そんなときは，「そうですね．気のいい社員が見つかって，愉しい会社ができるといいですね」
と作り笑顔で話を打ち切る．</p>

<p>作り笑顔ではあるけれども，発した言葉は嘘ではない．
そう．
気のいい社員と一緒に製品やサービスと世に問うのは，とても愉しいことなのだ．</p>

<p>だからこそ，起業家たちは，雇用には慎重にならなければならない．
気のいい社員を解雇する瞬間の絶望を，先回りして想像しなければならない．
経営をしたいのか，雇用をしたいのかを，常に自らに問わなければいけない．</p>

<p>悪いことは言わん．
絶望を味わったヤツの言うことは，聞いておけ．</p>

<p>この辺甘く考えていると，My own Limited Company しか残らない最後が来るよ．</p>

<h2></h2>

<p>その上で，雇用をしたいなら，すればいいと思う．</p>

<p>なお，言うまでもないことだけれども，雇用自身は絶対悪ではない．
費用対効果が得られる確証があっての雇用は，経営者が決断すべき仕事ではある．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加しないと見せないよ．を作った罪]]></title>
    <link href="http://www.monaka.org/blog/2014/02/01/my-fault/"/>
    <updated>2014-02-01T08:28:21+09:00</updated>
    <id>http://www.monaka.org/blog/2014/02/01/my-fault</id>
    <content type="html"><![CDATA[<p>140字以内で纏めると，こういうこと．</p>

<blockquote class="twitter-tweet"><p>「Q. 決定プロセスを何かで公開してほしい」「A. 軽量Rubyフォーラムに加入すると参加する事ができる。」&#10;あかん，TOPPERSが抱える数少ないデスパターンを，完全踏襲しとる．w <a href="http://t.co/bVOtyNMrs9">http://t.co/bVOtyNMrs9</a></p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/429207095041224704">January 31, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>私は，TOPPERSプロジェクトという，組込み系OSSを担いだNPOに参加していた．
設立準備から手伝って，一応10年くらい理事もしていた．</p>

<p>NPO法人TOPPERSプロジェクトは，組込みソフトの団体として，成功したと思う．
電子ピアノにも，宇宙機にも，自動車にも載った．
私が書いたソースコードも，割と入っている．
そこらそんじょのOSSなんざ蹴散らすくらいの採用例，出荷総数はあるだろう．</p>

<p>今は辞めた．
理事も辞めたし，今や会員ですらない．</p>

<!-- more -->


<p>当時やっていた会社が傾いたとか，いろいろ直接的な理由はあるのだが．
大きな背景として， <strong>OSSプロジェクトとしてのアンチパターンを作っているのではないか</strong> ，という疑問が年を追う毎に，私の中で大きくなっていったのが，ある．</p>

<p>TOPPERSプロジェクトには，会員以外には見せないよ，という仕組みがある．
具体的には，いわゆる，早期リリースという制度．
当初から，会員企業が受託製品に使った場合の，ソースコードの扱いとか，厳密運用が難しいことは解っていた．
私が辞める頃には，会員が，先に開かれたOSS (って表現は変だが) として公開し，そのあとプロジェクトにコントリビュートするなんてこともあったりして，制度として崩壊していた気もする．</p>

<p>&ldquo;オープン&#8221;ソースを管理するプロジェクトがソースコードを隠す，というのは，少し考えればわかる．矛盾した話だ．なんで当時気づかなかったのだろうw．</p>

<p>そして，各方面が指摘しているとおり，オープンソースは，ソースコードもさることながら，生産や管理のプロセスの透明化にメリットがある．
生産や管理のプロセスを，参加者にしか見せないというのは，ソースコードを隠すのと同様に，スジとしては最悪手の部類だろう．
そこで，本稿最初に引用した tweet へ繋がる．</p>

<p>組織として成立させるためには，なんらかのメリットを出す必要はある．
その辺りの仕込みは大変なところだと思うのだがしかし．</p>

<p>言い訳になるが，TOPPERSプロジェクトが立ち上がった2000年当時，オープンソースは暗中模索だった．
私は他人様よりも愚かなので，間違いも多い．
でも，もうあれから月日は流れた．
私は愚かなままかもしれないが，他人様はそろそろ良手を編み出しても良い頃だろう．</p>

<p>良手を編み出す上で，悩ましいのが，TOPPERSプロジェクトの確かな成功ではないかという気がしている．
厳密に言うと，NPO組織としては，安定収入で成功しているという事実だ．
…というと不幸を望んでいるように読めそうだが，言うまでもなく，そうではない．
今は袂を分かつ立場だが，成功するように私も頑張った．
成功し続けていただかないと，日本の組込みソフト業界全体が困る．</p>

<p>しかし，言葉を慎重に選ぶべきかもしれないが，OSSプロジェクトとしてのTOPPERSは失敗だったとも思っている．
もともと「OSSは目的ではなく手段だ」という立ち位置の団体ではあった．
なので，OSSプロジェクトとして側面がどうなろうとも，TOPPERSプロジェクトには何らの傷がつくわけでもない．</p>

<p>私がマズいと思っているのは，TOPPERSプロジェクトの成功が，OSS系NPOのロールモデルになりそうな傾向だ．
実際，TOPPERSプロジェクトの定款を参照しました，という声は，他の{組込系|OSS系}NPOから，ずいぶんと頂いた．</p>

<p><a href="http://ossforum.jp/ossaward8th2">「第8回 日本OSS貢献者賞・日本OSS奨励賞」</a> が示す通り，ニッポンのOSSは，この点についてあまり深く考えていないか，判っていて目をつぶっているか，どちらからしい．
そして，そのロールモデルが確立するまでの10余年には，間違いなく私がいる．
割と中心に近いところに．</p>

<p>罪なことをしたなぁ，と，肩を落としている．ごめんなさい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今日現在のmrubyについて雑想]]></title>
    <link href="http://www.monaka.org/blog/2014/01/31/memorandom-about-mruby/"/>
    <updated>2014-01-31T10:28:44+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/31/memorandom-about-mruby</id>
    <content type="html"><![CDATA[<p>なんとなく，今日現在の mruby について，私自身が薄ぼんやりと考えていることを書いておく．
なんでこのタイミングなのかに，あまり深い意味はない．
一つのきっかけとして，イベントはある．
mruby を話題の中心に据えたイベントが，<a href="http://www.digitalfukuoka.jp/events/30?locale=ja">今日の午後開催される</a>．
私も聴講者として参加する予定だ．
参加した後だと，その感想と混じる．
なんとなく私見の純度が下がるかな，とか．</p>

<p>私は，何を書いても，誰かや何かをdisっているように受け取られがちだ．
けれども，本稿もdisりの意図は全くない．
徒然なるままに．</p>

<!-- more -->


<h2>小規模組込みも視野に入れている割に，Lチカに向かない言語</h2>

<p>この tweet が象徴的だと思う．</p>

<blockquote class="twitter-tweet"><p>TinyFeather+mrubyでLチカしてみたんだけど、意外と難しいかったw String &lt;=&gt; byte Arrayの変換がpack/unpackないのに苦労したっていうのが本題</p>&mdash; ふぇえ (@fenrir_n) <a href="https://twitter.com/fenrir_n/statuses/428290481617780738">January 28, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>IIJさんが pack/unpack を提供する mrbgem を提供しているのではあるけれども．
小規模組込みでは，ペリフェラルレジスタの操作で，ビット演算を多用する．
しかし mruby は，言語仕様からして，数値に対して態度が煮え切っていない．と，思う．</p>

<p>オブジェクト指向脳でいうと，pack/unpack じゃなくて，GPIOクラスとかSPIクラスとかを作るのが正道だろう，製品開発の実務では，それらを作りこまないでいては生産性も上がらないとも思う．</p>

<p>しかし，ボードが届いて最初にやるのは，Lチカなのだ．</p>

<p>プロジェクトのスタートアップで手間がかかるというのは，製品採用にあたっては致命的に痛い．</p>

<h2>不安定が活況を生み，それゆえ採用が難しい言語</h2>

<p>これも他人様の tweet から．</p>

<blockquote class="twitter-tweet"><p>mruby-gtk2が未だに動かない。。。多数のモジュール連結するタイプのプロジェクトは、私はコレで動かした！という動作確認済みのハッシュ一覧が欲しいな。どれかのモジュールで仕様変更があると総崩れ。</p>&mdash; きむしゅ (@kimu_shu) <a href="https://twitter.com/kimu_shu/statuses/427641049054322688">January 27, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>mrubyは本家のアップデートによるmrbgemの突然の死があるので、とりあえず、自分のmrubyリポジトリを持って、動く状態に整合性をとらないとつらい。</p>&mdash; take-cheeze (@take_cheeze) <a href="https://twitter.com/take_cheeze/statuses/428792261032177664">January 30, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>本家 mruby は走り続ける．
おそらく永遠に不安定だ．
それは，mruby の設計や実装がダメだからでは(もちろん)無い．
原作者である Matz 氏の根本的な考え方が反映されているものだろう．
本人が，こう tweet している．</p>

<blockquote class="twitter-tweet"><p>タダ乗りから自由であるための条件として、そのプロジェクトを無視できない重要性、タダ乗りしただけでは置いて行かれてしまう進化の速さ、金や地位で言うことを聞かせられない没交渉性などはあまり知られていないかもしれない。特に最後。</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/statuses/416389827181826048">December 27, 2013</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>タダ乗りしただけでは置いて行かれてしまう進化の速さ</p></blockquote>

<p>こういった性質は，ハッカーと呼ばれる人たちのマインドに火をつけやすい．
実際，あっというまに mrbgem が量産された．
今では Ruby の代替として考えてもよいのでは，と思える程の充実ぶりだ．</p>

<p>この性質は，機器組込み屋にとっては，酷く辛く痛い．
他の保守部品と同様に，機器組込み向けソフトウェアも，バージョン固定するのが基本線だから．</p>

<h2>とはいえ，安定版にあまり意味は無い</h2>

<p>mruby が抱えるサグラダ・ファミリア的性質と，機器組込み業界との親和性の無さは，私もどこかに登壇するたびに言ってきた．</p>

<p>その言動と関係があるのかどうかは知らないが，mrubyを担いでいる方々も，安定版を出す方向で動いているらしい．
私は軽量Rubyフォーラムに参加していないので，詳しいことは知らない．</p>

<p>安定版の登場は，確かに，ビジネス的には意味がある．
開発者をかき集めるときに，スキルセットを設定しやすくなる．
応用製品を作る際に，準拠バージョンを設定しやすくなる．</p>

<p>こういったメリットは，非技術系経営層への対策としては，一定の意味がある．とても大事なことだ．しかし，技術者たちは，あまり歓迎しないかもしれない．</p>

<p>安定していることを再優先にしつつも， <strong>最新版に最も近いもの</strong> を，機器組込み系エンジニアは，使いたがる傾向がある．
バージョン固定で永く付き合うことになるので，最初の時点で古いのは嫌なのだ．</p>

<p>なので，機器組込み系エンジニアは，安定版を採用しないだろう．
安定版が 3ヶ月おきに更新される，というような，想像しづらいリリース体制が構築されれば別だが．</p>

<p>かつて「プロジェクトの数だけITRONは存在する」と言われたように，「プロジェクトの数だけ mruby が存在する」というような状況が展開されると予測する．
コード規模で見ても，mruby は ITRON に各種ミドルウェアを付けた状態と概ね似ているので，同じような運用が為される可能性は高い．
規格適合のための処理系テストスイートが，もてはやされることになるだろう．</p>

<p>歴史に学ぶ，という観点では，TOPPERSプロジェクトの第一世代カーネル群が，おそらく参考になる．
FI4カーネルは新規設計したほうが綺麗になるのは明らかだったのに，JSPカーネルへの拡張で済むように作った．
そのようにした理由はいくつかあるが，JSPカーネルとFI4カーネルの中間的なカーネルを，実製品開発プロジェクト毎に作れるようにしたかったから．
設計思想としては，mruby と mrbgems の関係に割と近い．
そして，FI4カーネルは，目論見通りに使われた．</p>

<p>だから何なのだ，という話ではないのだけれど．
過去の分析と近未来予測は，使い方を考える上で重要だろうとは思う．</p>

<p>あ，ぐだぐだ書いていたら，そろそろ会場へ向かう時間だ．
そろそろ着替えるか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スタートアップで優秀な技術者を探す方法]]></title>
    <link href="http://www.monaka.org/blog/2014/01/28/best-way-to-employ-on-startup-stage/"/>
    <updated>2014-01-28T14:35:11+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/28/best-way-to-employ-on-startup-stage</id>
    <content type="html"><![CDATA[<h1>雇用はいちばん難しい</h1>

<p>かつてお世話になった方が，起業計画中とのことで，相談を受けた．
私は，起業家としては失格の部類なのだけれども，スタートアップの空気感は解る，みたいなレベルではあるので，返事を書いた．</p>

<p>送信後，読みなおしたら割と一般論っぽかったので，ちょちょいと書きなおして当日記にも載せておく．
ついでにセルフツッコミも入れておく．</p>

<p>のっけから自分の話の腰を折るが，スタートアップでは&#8221;一般論&#8221;は&#8221;役に立つ&#8221;を意味しない．
毒にも薬にもならない，ってことだ．</p>

<!-- more -->


<blockquote><p>優秀な技術者の雇用ですか…これは一番難しい問題ですね．
たぶん私自身もあと20年くらい悩み，挙句に答え出ないかも…．</p>

<p>私自身の近況に限って言えば，もう新規の雇用は止めました．法定福利や源泉税務にかかる手間を考えると，どんなに優秀な技術者であっても割に合いません．
(日本の雇用行政は，本当に不合理非効率だと思います)
省いた手間は，費用に応じフリー技術者への委託をする際の，報酬の上積みに当てています．</p>

<p>…というのは，人的規模の拡大は諦めてしまった悪めのケースです．</p>

<p>一般論として，スタートアップの雇用は，紹介が最善かなと思います．
優秀な方は優秀な方を知っていますから，優秀な方に心当たりを尋ねるのが確実です．</p></blockquote>

<p>私は優秀ではないけれども，業界内ではそれなりに目立ってはいたので，人材を探しているという旨の紹介はときどき受ける．
そんなときは，私よりも優秀な方に，お心当たりが無いかどうかを尋ねるといったようなことはする．</p>

<p>私の職業は人材紹介業ではないので，報酬は頂かない．
そのかわり，信用できる相談者でなければ，行動を起こさない．</p>

<p>こういった信頼の鎖に入れるかどうかは，雇用を考えるスタートアップにとって，第一の壁だろうと思う．
壁の高さは，その集団の能力の高さに比例する．たぶん．</p>

<p>スタートアップを考えてからでは遅い．信頼は作るのに時間がかかるから．
壊れるのは一瞬なのに．</p>

<blockquote><p>他に多いのは，いわゆる&#8221;IT系勉強会&#8221;のようなところで，活きがいいのを一本釣りしてくるという方法です．
同業で固まって酒のんで，チャラい感じはありますが…．
発表で技術力は測れますし，人柄についての照会も容易ですので．
これも身の回りのスタートアップではよくやっている手です．
ナナロク世代の若手におだてられて，たまに手伝っています．</p></blockquote>

<p>イベント．ミートアップみたいなやつ．
地べたを這いつくばっている組込み系から見ると，正直Webチャラいよとか思わなくもないけれど．
ハズレを引かないよう事前にお互いを知っておくというのは，至極当然だし．</p>

<p>むしろ組込み系の雇用流動性の低さを，どげんかせんといかんかもね．
こういうイベントが少ない，要らないってことについて．</p>

<blockquote><p>反対に，成功例を見たことがないのが，人材紹介会社や求人サイトを経由した採用です．
人海戦術的なビジネスモデルを立てているところは別ですが，どんなに優秀なヘッドハンタを使っても，ダメなようです．</p></blockquote>

<p>これは，私周辺の狭い範囲の観測なので，ハズレていたら謝る．
ただ，本当に成功例の記憶がないんだよねぇ…．
たぶん，下記の理由なのだろうと推測している．</p>

<blockquote><p>不思議なものですが，採用に際し，関わった知人が多いと，
どんなにドライな人柄であったとしても，そうそう独善な行動は
しないものである，ということなのかもしれません．</p></blockquote>

<p>スタートアップって，どんなにお互いが誠意を尽くしてもなお，不条理に出くわしたり，金銭的に，工数的にしんどかったり，いろいろあるから．</p>

<blockquote><p>採用は，本当に，難しいです．</p></blockquote>

<p>(しみじみと)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パスワードもユーザ名も正しいはずなのに，の巻]]></title>
    <link href="http://www.monaka.org/blog/2014/01/15/cant-login-to-gmail-from-commandline/"/>
    <updated>2014-01-15T01:33:07+09:00</updated>
    <id>http://www.monaka.org/blog/2014/01/15/cant-login-to-gmail-from-commandline</id>
    <content type="html"><![CDATA[<h1>ことの起こり</h1>

<p>AWS EC2上に，OTRS をインストールし，　Gmail からのメールをポーリングで読むように設定した．
難しい話ではない．</p>

<p>だけど繋がらない． あれれ?</p>

<p>だって，先日の日記エントリの通り，Ruby では問題なくできたぜ?
IMAP は有効にしたし，2段階認証はやっていないし．</p>

<h1>Perl 書いた IMAP クライアントで試してみる．</h1>

<!-- more -->


<p>仕方がないな．
OTRS は (Ruby ではなく) Perl で大半が書かれている．
それと似たような記述でログインをテストしてみる．
こんな感じ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use strict;
</span><span class='line'>use warnings;
</span><span class='line'>use Net::IMAP::Simple;
</span><span class='line'>
</span><span class='line'>use IO::Socket::SSL;
</span><span class='line'>
</span><span class='line'># Create the object
</span><span class='line'>my $imap = Net::IMAP::Simple-&gt;new('imap.gmail.com', use_ssl =&gt; 1, port =&gt; 993) ||
</span><span class='line'>  die "Unable to connect to IMAP: $Net::IMAP::Simple::errstr\n";
</span><span class='line'>
</span><span class='line'># Log on
</span><span class='line'>if (!$imap-&gt;login('___________@gmail.com','_p_a_s_s_w_o_r_d_', debug =&gt; 1)) {
</span><span class='line'>  print STDERR "Login failed: " . $imap-&gt;errstr . "\n";
</span><span class='line'>  exit(64);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>実行…あれれ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu@ip-10-0-0-208:~$ perl test.pl
</span><span class='line'>Login failed: [ALERT] Please log in via your web browser: http://support.google.com/mail/accounts/bin/answer.py?answer=78754 (Failure)</span></code></pre></td></tr></table></div></figure>


<p>んんん?</p>

<p>ブラウザでアクセスせよ，とな．
でも，この動作環境，Ubuntu Server で，デスクトップ環境入ってないよ．もちろんブラウザも．</p>

<p>手元のブラウザで事態を把握してみようと試みたところ，どうやらイカガワシイと思われるアクセスを遮断しているようだ．
<img src="http://www.monaka.org//blog/2014/01/15/screen-shot-2014-01-15.png" alt="赤い画面でお怒りのGmail様" /></p>

<h1>socksサーバを立ってて逃げ道を作る．</h1>

<p>w3m など，文字ターミナル向けブラウザを使ってアクセスすれば良いのかもしれない．
でも，たぶん，Googleのことだから，JavaScriptとか入っていていろいろ面倒なことになりそうだ．</p>

<p>なので，ssh についている socks サーバ機能を用いる．
手元の端末から，次のようにして，1080 版をsocksの口にする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -D1080 server.example.com</span></code></pre></td></tr></table></div></figure>


<p>server.example.com は，実際には，EC2のインスタンス．
ここで指定した1080番ポートはlocalhostのもの．だから，EC2側のincomingはsshのポート，TCP 22番だけ開いていればよい．</p>

<p>そして，手元のブラウザのproxy設定．localhost:1080 で socks を経由するよう設定する．</p>

<p>ここまでで下ごしらえは完了．
手元のブラウザから，Gmail へアクセスする．
あとは…なりゆきでアクセスすれば，お怒りが解けた…はず．
(2月に入ってからこの稿を書き上げているので，記憶が既に曖昧…)</p>

<h1>まとめっぽい何か</h1>

<p>ssh の -D オプションは，ヘッドレスサーバを管理している時に割と便利なので，覚えておくと何かと役に立つ．</p>

<p>こういう対策をGmail側がしなきゃいけないくらい，botからの不正アクセスが多いってことなのだろうなぁ…．
面倒だ，と不満を漏らしてはいけないのだろう．</p>
]]></content>
  </entry>
  
</feed>
