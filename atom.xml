<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[もなもなもなかのページ]]></title>
  <link href="http://www.monaka.org//atom.xml" rel="self"/>
  <link href="http://www.monaka.org//"/>
  <updated>2014-06-17T14:23:04+09:00</updated>
  <id>http://www.monaka.org//</id>
  <author>
    <name><![CDATA[Masaki "monaka" Muranaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[なぜ monami-ya.mrb は RTOSとバインドするのか]]></title>
    <link href="http://www.monaka.org/blog/2014/06/17/why-monami-ya-dot-mrb-loves-rtos/"/>
    <updated>2014-06-17T13:19:03+09:00</updated>
    <id>http://www.monaka.org/blog/2014/06/17/why-monami-ya-dot-mrb-loves-rtos</id>
    <content type="html"><![CDATA[<p>さきほどは，重くはならないよ，という，疑問への回答でした．</p>

<p>加えて，RTOS とバインドする積極的な理由を述べておきます．</p>

<p>理由はある程度の理詰めはあるものの，結局のところ「オレはこう思うんじゃい」という色彩が強く，別にそうしなくても軽量Rubyはベアメタルで動きます．
時間と予算が潤沢にあるなら，ね．</p>

<p>とはいえ実際のところ，別段のファンドが獲得できているわけでもなく，取れる時間も限られ，加えて</p>

<blockquote><p>過去の事例だとこの手のOSSは長期的には失われる結果になりそうです</p></blockquote>

<p>という<a href="http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly/">呪い</a>までかかった状態なので，素早くカタチにしないと，呪いが成就してしまうのでした．</p>

<h2>大目標: ゆるふわ Ruby だけで，ガチ組み込み開発をしたい</h2>

<p>すべては大目標の実現のためです．</p>

<p>＼ゆるふわ Ruby だけで，ガチ組み込み開発をしたい／ that&rsquo;s all.</p>

<h3>大目標(言い換え): ゆるふわでない Ruby で，ガチ組み込み開発をする気なんて無い</h3>

<!-- more -->


<p>対極的な大目標として「mrbgems を全部削って，parser も削って，バイトコード実行だけできればよい．場合によってはバイトコードの命令セットも削る．」という設定がありえます．
これもまた組み込み風味，いや，むしろ従来型の組み込みシステムっぽくて安全な気がします．</p>

<p>ですが，私はそこには寄り添いません．
先行事例が既にあるから，というのも理由の一つです．
加えて「そこまでするならCで書くわ」とミもフタもなく思うからです．
コードゴルフをしたいなら，C言語を使えば良い．その用途ならばC言語は最強です．Ruby で挑む理由がありません．</p>

<p>さてはて，ゆるふわを極めるには，irb 相当の REPL がオンボードで動くことは必須です．</p>

<p>現実的な解として，<a href="http://d.hatena.ne.jp/kyab/20130621">ホストベースirb</a>の実装が既にあります．私には思いつきませんでしたし，なるほどなぁと関心しきりです．
なのですが，ホスト側にもソフトウェアが要る点で，私の想定分野では，重いなぁと思います．
昔の 8bit BASIC マシンやポケコンのようなゆるふわ感はありません．UART で繋ぐだけで REPL が立ち上がってほしい．
(ホストベースirbの実装理由が「&#8221;ゆるふわ&#8221;にしたかった」なんてことは絶対に無いでしょうから，私がどう思おうとも，実装の価値がどうこうなる話ではありません)</p>

<p>先行事例の実装で十分な領域があるのは，アタマでは十分に解っています．
今ここに書いているのは，「ぼくがかんがえたさいきょうの」厨二病的な放言です．</p>

<h3>ゆるふわガチ組み込みに必要なアイテム</h3>

<p>REPL を内蔵するとなると，UART ドライバが必要です．USB-serial ならさらに良いですね．</p>

<p>さらに，&#8221;ゆるふわ&#8221; なら，何も考えずに Socket や File を使い出せないと嘘です．
ファイルシステムやプロトコルスタックを載せたくなります．</p>

<p>きっと使う mrbgems も malloc とかバンバン使っています．</p>

<p>うーん，&#8221;ゆるふわ&#8221;．
でも，その環境で，ガチ組み込みをしたいわけです．</p>

<p>uClinux 載せるとか，ご冗談でしょう?</p>

<p>しかし，ファイルシステムとプロトコルスタックを，割り込みハンドラから書くのは…
書いている間に，呪いが成就しちゃいます．ねぇ．</p>

<h2>RTOS とバインドする 3 つの理由</h2>

<p>そんなわけで，monami-ya.mrb が RTOS とのバインドを推進する理由は概ね述べてしまった気がしますが…．
ざっくりいって，理由は，3つあります．</p>

<h3>信頼性の観点</h3>

<p>仮にRTOSを入れなかったとしても，UART，タイマ等々の割り込み処理は書かなければなりません．
RTOSと比べて自前で書いたほうが十分に高信頼であれば，書くのも悪くないでしょう．</p>

<p>ですが…．</p>

<p>TOPPERS や uT-Kernel を始めとして，有名どころの RTOS には，第一線の研究者やエンジニアが関わっています．
彼らが日々バグを潰し合っているコードのほうが，明らかに信頼できます．</p>

<p>(多くのRTOSでは，最小構成に UART ドライバを含みません．
しかし，UART は初歩的なデバイスです．大抵の RTOS ではドライバのコードが提供されます．)</p>

<h3>保守性の観点</h3>

<p>RiteVMの実装はほぼ1つでしょうけれども，マイコンはARMで集束に見えているようでいて，
いまだにたくさんあります．特にガラパゴニッポンでは．</p>

<p>ARMにしても，セミコン各社でペリフェラルに特色を持たせた結果，なかなか心折れる状態です．</p>

<p>RTOS の上に構築した場合，mruby より下の層を気にせずに保守できます．</p>

<p>保守可能な動作環境の狭さは，その上で動作するソフトウェアのシェアに響きます．
軽量Rubyは，クロスプラットフォーム動作がメリットの一つです．
それのメリットを活かせないようでは，自ら潰しているようなものでしょう．</p>

<h3>普及の観点</h3>

<p>おそらく，最初期のユーザは</p>

<blockquote><p>C言語で書かれた既存資産を活かしながら，mruby を使ってみたい</p></blockquote>

<p>と言ってくるでしょう．</p>

<p>Rubyでの書き換えで発生するコストやRubyで実行したときの速度低下のリスクを考えると，保険をかけながらの導入をしたいと思うはずです．</p>

<p>mruby が動作するようなレベルのマイコンなら，既にRTOSを前提としたソフトウェア資産が存在するでしょう．</p>

<p>もし「全部をRubyで書き換えるかmrbgem化しないと，始まりません」と言ったとしたら，おそらくユーザは逃げだします．</p>

<p>ファーストユーザを掴めないなら，普及を考えるなんてありえないでしょう．</p>

<h2>まとめ，っぽい何か</h2>

<p>そんなわけで， monami-ya.mrb は，従来の mruby 開発者が狙っていたところとは若干違ったところを目指しています．
でなければ，fork なんて面倒なことをする必要なんて，なかったわけですし．</p>

<p>私は，私が狙った分野には，2つの大きな需要があると思っています．</p>

<ul>
<li>Gainer &ndash; Arduino の系譜に続く流れ</li>
<li>パラメタチューニングやデバッグ用のシェル(ブートローダ含む)の高度化の延長</li>
</ul>


<p>私の実装が生き残れるか，というのとは，また別の話ではありますけれども．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTOS は monami-ya.mrb を遅くするか?]]></title>
    <link href="http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p/"/>
    <updated>2014-06-17T11:01:52+09:00</updated>
    <id>http://www.monaka.org/blog/2014/06/17/rtos-makes-mruby-slow-p</id>
    <content type="html"><![CDATA[<p>とある，案件契約ではない非公式なやりとりから．
個人が特定されるような内容ではないので，これくらいなら許され…ますよね．</p>

<blockquote><p>mruby 自身もC言語に比べて処理に時間がかかるところに，RTOSが入るとさらに遅くなったりしないのか少し心配です．</p></blockquote>

<p>個人が特定されるどころか，同じような直感を持たれる方，案外多いのではないかなと思います．
機器組み込み業界で働いておられるエンジニアの中にもいらっしゃるのではないかな，とも．</p>

<p>端的に言うと，RTOS が入ると遅くなるというのは，概ね誤解です．
いやもちろん RTOS がゼロオーバヘッドだと言っているわけではありません．</p>

<p>いまや<a href="http://www.monami-ya.jp/product/monami-ya.mrb/about/index.html">会社の製品の機能として提供されている部分</a>なので，本来なら会社の公式ページに書くべきところですが，そうすると定量計測してホワイトペーパーにしないと格好がつきません．
そこまで喫緊の話でもない(非公式なやりとりですし)ので，こちらに書いておきます．</p>

<h2>RTOS とは何か?</h2>

<!-- more -->


<h3>そもそも OS とは何か</h3>

<p>RTOS の前に OS とは何か，から確認していきましょう．
多くのデスクトップ環境では，CPUのコア数はたかだか8個程度でしょうけれども，OS上ではより多くのCPUが存在しているかのように見えています．
本当は1つしかないメモリ空間は，MMUなどメモリ管理ハードウェアの支援を得て，プロセス毎に分けつつも，プロセス内では全メモリを専有しているように見せかけています．
ストレージも，本当は1つしかなくても，ファイルシステムという構造を導入することで，複数のプロセスに競合しないように調停されます．</p>

<p>ざっくり言うと，OS というのは，何かを抽象化し管理し保護するソフトウェアです．
現在的なOSのほとんどは，プロセスと呼ぶ抽象化した計算機を管理し，処理がプロセスから外に漏れないようにして，物理的な計算機資源を保護しています．</p>

<h3>RTOS は何を保護するものか</h3>

<p>RTOS の抽象化対象は，CPUです．
実際には全ての処理は時分割されているのですが，それぞれの処理はCPUを専有しているものと(RTOSによって)勘違いさせられています．
そして保護対象は，RT == Real Time が示す通り，時間です．
なので，多くの RTOS は時間以外のリソースの保護については，かなり無頓着です．
最近になって，セキュリティや機能安全についての世論が固まったため，リソース保護機能付きのRTOSも増えました．
それでも，リソース保護機能が時間保護を阻害するとなれば，時間保護のほうが優先されます．</p>

<p>ここでいう時間には，2種類あります．</p>

<p>ひとつは物理時間です．これは一般的な「壁時計」と同じと思って頂いて構いません．
RTOS自身オーバヘッドが影響するので，重要といえば重要ではあります．
しかし，CPUに与えるクロック次第で改善されやすいものでもあります．</p>

<p>もう一つは実行順序制約です．RTOS ではこちらのほうが重要です．
RTOS では，実行順序が事前に見積もれなければならない，とされます．
そして，優先されるべき処理については，他の処理を止めてでも実行して良い，とされます．
他の処理を止めれば，実行順序を見積もりやすくなりますから．</p>

<p>通常のOSにも実行優先度の概念はあります．しかしRTOSの場合は強烈です．
アプリケーション設計者が必要と思うなら，デバイスへの割り込みすら止めることができます．
CPUが持つ計算資源の全てを，特定の処理に割り当てられる．
それが RTOS の特徴です．</p>

<p>RTOS は時間を管理する OS なので，これは当然の特徴と言えます．
(計算資源 == 計算に要するクロック数 == 時間)ですから．</p>

<h2>RTOS のオーバヘッド</h2>

<p>RTOS は，複数の処理(タスク)に対して，CPU が複数あるように見せかける抽象化を行っています．
抽象化の裏には，オーバヘッドがあります．
これは，時間量として見ると，コンテキストスイッチに要する時間で表されます．
商用 RTOS の星取表で，この数値が俎上にあるのを見たことがある方も多いでしょう．</p>

<p>あまりにも商用 RTOS の営業さん達がけたたましく言うので，このオーバヘッドが無視できないと誤解する方が後を絶ちません．
しかし実際のところ，このオーバヘッドが致命的かどうかは，アプリケーションに依ります．</p>

<p>mruby は，大目に見ても C言語で書くよりも2桁のオーダで遅くなります．
「週に何度も口にしない飴玉のカロリーを気にするなら，まず毎日の三食を見直しましょう」という喩えでお分かり頂けますでしょうか．</p>

<p>なお，RTOS のオーバヘッドとして有名な指標には，コンテキストスイッチの他に，割り込みへの応答時間もあります．
こちらも，似たような議論が成り立ちます．</p>

<h2>「RTOS は重い」神話の，ミもフタもない理由</h2>

<p>とはいえ，「RTOS は重い」にも相応の理由は思いつきます．
それは，優先度設計の難しさ，です．</p>

<p>既述の通り，RTOS では，高優先度の処理は，CPUへの割り込みさえも止められます．
このような条件で，高優先度で実行される処理の設計が悪くCPUを専有した場合は，システムは最悪の状態になります．
低優先度の処理にはいつまでたっても，処理の機会が与えられません．
(ちなみに，このような状態に陥った低優先度の処理は，RTOS 界隈の用語では，&#8221;飢餓状態&#8221;としばしば言われます．)</p>

<p>日本の組み込み業界では，優先度設計から詳細実装まで全てを一人でこなす例もありますが，
上流が検討もしないで適当に優先度を割り振った仕様書を元に，受託で(再受託で(再々受託で))詳細を実装するということが，しばしば行われます．
こういうケースでは，組み上げてみたら真っ当に動かない，ということは，珍しくなかったりします．</p>

<p>それは設計の不備であり，RTOS が悪いわけではないのですが．
外から買ってきた RTOS をスケープゴートにする，ということが起こるのは，人として理解できないわけでもありません．</p>

<h2>monami-ya.mrb は，RTOS で処理が重くなったりはしません．</h2>

<p>…もちろん，高優先度の処理で無限ループなどされるとダメですけれども．</p>

<p>優先度の設定に気をつけている限りにおいて，monami-ya.mrbはRTOSと併用しても処理が重くなったりはしません．
その辺りには，20年前から RTOS 関わり，TOPPERS/FI4 など RTOS の実装にも関わった経験を活かしてあります．</p>

<p>本家 mruby は…? メモリアロケータの部分をキチンとケアできれば，大丈夫にできると思いますよ．たぶん．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb での static thread binding サポート]]></title>
    <link href="http://www.monaka.org/blog/2014/06/16/monami-ya-dot-mrb-static-thread-binding/"/>
    <updated>2014-06-16T11:15:55+09:00</updated>
    <id>http://www.monaka.org/blog/2014/06/16/monami-ya-dot-mrb-static-thread-binding</id>
    <content type="html"><![CDATA[<blockquote><p>注: 2014-06-17 00:30:00JST バグフィックスがあったので，コードの引用を修正し，体裁も整えました．</p></blockquote>

<p>昨日で，monami-ya.mrb への sandbox サポートについて，峠を超えました．</p>

<p>当日記でも，<a href="http://www.monaka.org//blog/2014/06/15/monami-ya-dot-mrb-sandbox-support/">実装</a>と<a href="http://www.monaka.org//blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/">背景</a>について取り上げました．</p>

<p>その際，sandbox が必要な理由の説明で，スレッドの使い方について説明しました．
つまり，monami-ya.mrb は，下位層にスレッドライブラリ(RTOS含む)の存在を暗黙的に期待しています．</p>

<blockquote><p>RTOS 含めると，動作が重くなるんじゃないの?</p></blockquote>

<p>みたいなことを仰る方も，世間には稀にいます．
それは概ね誤解です．
その辺りの話は，別の機会に取り扱いましょう．</p>

<p>注: 本稿は，mruby のビルドシステムと，uITRON4.0 仕様でのアプリケーション記述についての知識があることを前提として書かれています．</p>

<h2>目指せ，ゆるふわ組み込みライフ</h2>

<!-- more -->


<blockquote class="twitter-tweet"><p>って思っていたのに，とんでもねぇ修羅の道だったという．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/478026904457326592">June 15, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>いやほんと，組み込み向け軽量 Ruby って言葉を聞いた時に，大いに期待したのですが．
組み込みって，分野広いですから，仕方ないと言えば仕方ないのですが．</p>

<p>愚痴っていてもしかたがないので，fork して拡張するのです．</p>

<h2>解決したいこと</h2>

<p>せっかく軽量 Ruby で &ldquo;ゆるふわ&rdquo; したくても，RTOS の細かい差異に振り回されるようではゲンナリです．</p>

<p>OSEK の OIL とか，uITRON/TOPPERS のコンフィギュレーションファイルとか，書きたくないわけです．</p>

<p>そこで，static thread binding の登場となります．</p>

<h2>記述と内部処理</h2>

<p>static thread binding は，sandbox 同様， monami-ya.mrb の master ブランチにも develop ブランチにさえも入っていません．
なので，仕様は微調整される可能性があります．
でも，もう手元では概ね動いているので，ガッツリ変わるということは，ないでしょう．たぶん．</p>

<h3>build_config.rb への記述</h3>

<p>&ldquo;static&rdquo; と謳っているくらいですから，記述箇所は build_config.rb になります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  s = conf.sandbox('blink') do |conf|
</span><span class='line'>    conf.gem :github =&gt; 'ShinyaEsu/mruby-direct'
</span><span class='line'>    conf.gem :bitbucket =&gt; 'monami_ya_mrb/mruby-toppers-itron'
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  conf.thread do |conf|
</span><span class='line'>    conf.sandbox = s
</span><span class='line'>    conf.activate = true
</span><span class='line'>    conf.type = :task
</span><span class='line'>    conf.script_path = "script/bf533cb/led_blink.rb"
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>前半は，sandbox です．後半の conf.thread でスレッドを定義します．
あまり説明の必要は無いでしょう．
アクセサは，こんな感じです．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ThreadBind
</span><span class='line'>  attr_accessor :activate
</span><span class='line'>  attr_accessor :script_path
</span><span class='line'>  attr_accessor :sandbox
</span><span class='line'>  attr_accessor :priority
</span><span class='line'>  attr_accessor :stack_size
</span><span class='line'>  attr_accessor :type</span></code></pre></td></tr></table></div></figure>


<p>activate は，システム起動時に，スレッドを実行開始の状態にするかを決めます．
Win32 や POSIX では無視かエラーかかもしれません．
RTOS ではシステム起動時のタスクの実行状態を決められることが多いので，重要なパラメタです．</p>

<p>stack_size は，RTOS では必要でしょうけれども，Win32 や POSIX なら無視されるのでしょう．
type は，uITRON/TOPPERS の場合には，:task, :cycric, :alarm, :interrupt とかになるでしょう．</p>

<p>script_path は，そのスレッドが実行する Ruby (mruby)スクリプトを指定します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Direct.write16(0xffc00730, 0x0001)
</span><span class='line'>while true
</span><span class='line'>  ITRON.dly_tsk 1000
</span><span class='line'>  Direct.write16(0xffc0070c, 0x0001)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>とか．
普通のスレッド(タスク)なら，while ループの中で何かをさせる感じになります．
上記の場合は，BF533CB ボード上の LED を 1000ms 周期で Lチカしています．</p>

<p>ワンショットのスレッド(uITRONでの，alarm / cyclic / 割り込みハンドラ)では
ループをさせないで終わらせることになるでしょう．</p>

<h4>余談:割り込みハンドラをRubyで書けるか</h4>

<p>ええ，割り込みハンドラも書けます． monami-ya.mrb ならね．</p>

<p>性能的に使い物になるかどうかなんて気にしてはいけません．
ムーアの法則が解消する可能性が高いからです．</p>

<p>割り込みハンドラを RiteVM (mruby の VM) で書く場合に，物理時間制約以外のリスクがあるとすると，malloc 時のロックとメモリ枯渇です．
monami-ya.mrb では，TLSF アロケータの採用による，mrb_state 間のロックフリー化をしてあります．
また，VMのスタック上限をmrb_state毎に指定可能にしてあるため，どうしようもない枯渇は起こし辛いようにしてあります．</p>

<p>現在の本家 mruby では，これらの対応が抜けています．
本家のままでは，割り込みハンドラを Ruby で書くのはリスクが高すぎて実用不能でしょう．
まさか割り込みハンドラまで書くとは思っていないフシがあるので，たぶん今後も．</p>

<h3>内部処理</h3>

<p>build_config.rb の記述から，下位のスレッドライブラリへのバインディングに必要なコードを静的に生成します．</p>

<p>現時点では，TOPPERS/JSP 用のコードを生成します．決め打ちです．
将来的には， toolchain のように，動作環境の OS を build_config.rb に記述することで，生成されるコードを，変更可能になるべきでしょう．</p>

<p>具体的には，このようなファイルができます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "mrb_thread_bind.h"
</span><span class='line'>INCLUDE("\"mrb_thread_bind.h\"");
</span><span class='line'>ATT_INI({TA_HLNG, 0, mrb_thread_bind_initialize});</span></code></pre></td></tr></table></div></figure>


<p>uITRON4.0 のコンフィギュレーションファイル</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "itron.h"
</span><span class='line'>#ifdef _MACRO_ONLY
</span><span class='line'>extern void mrb_thread_bind_initialize(VP_INT exinf);
</span><span class='line'>extern void mrb_thread_bind_entry(VP_INT exinf);
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>TOPPERS/JSP側が用いるヘッダファイル</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>const uint8_t mrb_thread_script0[] = {
</span><span class='line'>0x52,0x49,0x54,0x65,0x30,0x30,0x30,0x32,0xe9,0xce,0x00,0x00,0x00,0xe2,0x4d,0x41,
</span><span class='line'>0x54,0x5a,0x30,0x30,0x30,0x30,0x49,0x52,0x45,0x50,0x00,0x00,0x00,0xc4,0x30,0x30,
</span><span class='line'>0x30,0x30,0x00,0x00,0x00,0xb8,0x00,0x01,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x10,
</span><span class='line'>0x01,0x00,0x00,0x11,0x02,0x00,0x00,0x02,0x03,0x00,0x01,0x02,0x01,0x00,0x82,0x20,
</span><span class='line'>0x00,0x80,0x07,0x17,0x01,0x00,0x02,0x11,0x02,0x00,0x02,0x02,0x01,0x01,0x81,0x20,
</span><span class='line'>0x01,0x00,0x00,0x11,0x02,0x00,0x03,0x02,0x03,0x00,0x01,0x02,0x01,0x00,0x82,0x20,
</span><span class='line'>0x01,0x00,0x00,0x07,0x01,0x7f,0xf7,0x18,0x01,0x00,0x00,0x05,0x00,0x00,0x00,0x4a,
</span><span class='line'>0x00,0x00,0x00,0x04,0x02,0x00,0x16,0x34,0x2e,0x32,0x39,0x30,0x37,0x37,0x34,0x38,
</span><span class='line'>0x33,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x65,0x2b,0x30,0x39,0x01,0x00,0x01,
</span><span class='line'>0x31,0x01,0x00,0x04,0x31,0x30,0x30,0x30,0x02,0x00,0x16,0x34,0x2e,0x32,0x39,0x30,
</span><span class='line'>0x37,0x37,0x34,0x37,0x39,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x65,0x2b,0x30,
</span><span class='line'>0x39,0x00,0x00,0x00,0x04,0x00,0x06,0x44,0x69,0x72,0x65,0x63,0x74,0x00,0x00,0x07,
</span><span class='line'>0x77,0x72,0x69,0x74,0x65,0x31,0x36,0x00,0x00,0x05,0x49,0x54,0x52,0x4f,0x4e,0x00,
</span><span class='line'>0x00,0x07,0x64,0x6c,0x79,0x5f,0x74,0x73,0x6b,0x00,0x45,0x4e,0x44,0x00,0x00,0x00,
</span><span class='line'>0x00,0x08,
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>conf.script_path で指定したスクリプトファイルのコンパイル結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "itron.h"
</span><span class='line'>#include "mruby.h"
</span><span class='line'>#include "mruby/irep.h"
</span><span class='line'>#include "/Users/monaka/git/monami-ya.mrb/monami-ya.mrb/build/jsp-bfin/threads/thread_script_0.cinc"
</span><span class='line'>
</span><span class='line'>static const uint8_t *thread_scripts[] = {
</span><span class='line'>  mrb_thread_script0,
</span><span class='line'>  NULL
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static mrb_state *mrb[1];
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>mrb_thread_bind_initialize()
</span><span class='line'>{
</span><span class='line'>  mrb[0] = mrb_open_sandbox(1);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void mrb_thread_bind_entry(VP_INT exinf)
</span><span class='line'>{
</span><span class='line'>  mrb_load_irep(mrb[(size_t)exinf], thread_scripts[(size_t)exinf]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ITRONタスクのエントリポイントと，カーネル初期化ルーチンのエントリポイント．</p>

<p>これらのうち，Cソースコードは，コンパイルされ libmruby.a に纏められます．</p>

<p>最終的に，TOPPERS/JSP の libitron.a とコンパイルするところは，monami-ya.mrb の外です．
イマイチ，パンチに欠けますが．
あんまりタイトにバインドさせると，OS毎のビルドシステムの差異に苦しめられることになるので，今のところはここまでです．</p>

<p>セルフビルドが可能な環境では，全てを隠ぺいすることは容易でしょう．</p>

<h2>設計方針</h2>

<p>設計方針は，繰り返しになりますが「ゆるふわ Ruby でガチ組み込み」です．</p>

<h3>Arduino 方面ではありません．</h3>

<p>Arduinoのスケッチみたいなのにも存在価値は認めますが，狙っているのは，そこではありません．
mruby と Arduino的なライブラリの組み合わせについては，<a href="http://d.hatena.ne.jp/kyab/20130806">kyab 氏が約1年ほど先行</a>しています．
そこを今更になって再発明する必要性は無いでしょう．</p>

<h3>Ruby で全ての記述をすべきとは思いません．</h3>

<p>ここで，monami-ya.mrb は全てのタスクを Ruby で書くことを強要しては <em>いない</em> ということは，注目して頂きたい点です．</p>

<p>大目に見ても，RiteVM の処理時間は，C で書く場合より 2桁のオーダで遅いでしょう．
なので，物理時間制約の大きなところでは，Cでタスク(スレッド)を書きたくなるはずです．
そもそも，いちいち Ruby に移植しないと使えないというのであれば，使う気が削がれます．</p>

<p>TOPPERS にせよ uT-Kernel にせよ，既に資産があるわけです．
それら資産を活用しながらも，新しいことができる．
そういう設計方針で，この機能は作られます．</p>

<h3>この機能だけで RTOS とのバインディングをする気はありません．(但:要検討)</h3>

<p>それと，この機能はスレッドバインディングに特化しています．
スレッドがある以上，スレッド間の通信機能が必要になります．
この設計では，通信機能は mrbgems として提供されるべき，と割り切っています．</p>

<p>静的OSの場合，mrbgems だけで通信機能のためのカーネルオブジェクト生成を行うのは
辛いはずですが…それは今後の課題です．</p>

<h2>本家へのマージは…?</h2>

<p>MITライセンスで出します．
誰かが本家にプルリクを投げることは止め用が無いですし，止めませんが．
常識的に考えて，マージは無いでしょう．
ターゲットが違いすぎます．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb が sandbox サポートを追加する理由]]></title>
    <link href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/"/>
    <updated>2014-06-15T09:58:37+09:00</updated>
    <id>http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support/">先ほど</a>の続き．</p>

<blockquote class="twitter-tweet"><p>sandbox の需要を理解するには，前提として，Webサーバと RTOS とで，スレッドの使われた方が違う，ということを，知識ではなく，腹に落としていないといけない．世界観の問題．&#10;mruby のコアを弄るような方々は，知識としては心得ているはず，だが．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/477722322862759938">June 14, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>など言って，実装理由を詳説しないのは，ちょっとイケ好かないかなということで．</p>

<p>本題に入るには，OS が提供する thread の使い方について，寄り道をする必要があります．</p>

<p>注: 本稿は，mruby の内部構造，特に，mrb_state と mrbgems の関係を理解していることを前提にしています．</p>

<!-- more -->


<h2>thread の使い方，2通り</h2>

<p>thread は，たかが機構なので，使い方は幾通りもありえます．</p>

<p>しかし，代表的なパターンとして，2通りの使い方があります．
たぶんデザインパターン的な名前がありそうですが，知らないのでオレオレ命名で．</p>

<h3>対称(symmetric)なスレッド</h3>

<p>同じデータ構造で同じ処理を持つスレッドが，多数あるパターンです．</p>

<p>非同期に起こる多数の要求を裁くときに，しばしば見られます．
具体例としては，サーバのワーカースレッドや，ファイルシステム内の処理などがあります．</p>

<p><img src="symmetric.png" alt="対称なスレッド" /></p>

<h3>非対称なスレッド</h3>

<p>複数のスレッドが，それぞれ異なるデータ構造を管理するパターンです．
データ構造が異なるのですから，各スレッドが行う処理も，当然異なります．</p>

<p>「そういう時はプロセス分けるだろ」と思った方は，POSIX や Windows に頭を侵されています．</p>

<p>多くの RTOS では，スレッドに相当する概念はあります．
しかし，プロセスに相当するリソース抽象化概念がありません．(注: 持っている RTOS もあります)</p>

<p>また，POSIX や Windows も，OS の内部では，スレッドに相当する概念はありますが，リソース抽象化の概念は無いか，希薄です．
OSが抽象化を提供しているので，当然です．</p>

<p><img src="asymmetric.png" alt="非対称なスレッド" /></p>

<h2>mruby のスレッドバインディングとmrbgems</h2>

<p>mruby は，言語としては，今のところスレッドを提供していません．
しかし，マルチスレッディングの要求は，上記の2通りのいずれにせよ，間違いなくあります．</p>

<p>mruby を下位 OS のスレッドとバインドする典型的手法として，スレッド毎に mrb_state を割り当てる手法があります．</p>

<p>私は mod_mruby のソースコードを精読したわけではないですが．
サーバへの mruby 活用の代表である， mod_mruby も，Apache のワーカースレッドに対し 1 つの mrb_state を割り当てているようです．
この場合は，各スレッドは「対称」です．
全ての mrb_state は，同じように初期化されて構いません．
使える mrbgems も全てのスレッド(mrb_state)で同じもので構いません．</p>

<h2>さて，本稿の本題．</h2>

<p>非対称なスレッド構成を取ったシステムを考えてみます．</p>

<p>実例として，uITRON, OSEK/VDX クラスの RTOS 上にファイルシステムとユーザアプリを mruby のみで作るとします．</p>

<p>構成としては，デバドラ + ファイルシステム + ユーザアプリになります．</p>

<p>デバドラとファイルシステムは，再利用性が高いので，おそらく mrbgems として実装するでしょう．
そして，非同期処理になりますので，(デバドラ + ファイルシステム)のスレッドと，ユーザアプリのスレッドに分けるでしょう．スレッド間通信も mrbgems として提供するかもしれません．
常識的な RTOS のアプリ設計です．</p>

<p>ここで，思い出してみましょう．
現在の mruby では，全ての mrb_state で，全ての mrbgems を共有します．
つまり，スレッドを分けても，ユーザアプリは，ファイルシステムを迂回して直接デバドラのメソッドを叩けます．</p>

<p><img src="sandbox.png" alt="sandboxの有無と非対称スレッド" /></p>

<p>これを気持ち悪くないと思う開発者が居たとしたら，別の職種にジョブチェンジしたほうがよいでしょう．</p>

<h2>なぜ他のmruby開発者はsandboxを必要と思わないのか．</h2>

<p>今のところ，mruby へ sandbox を仕掛ける実装は殆どみかけません．
mattn 氏が <a href="https://github.com/mattn/mruby-sandbox">mruby-sandbox</a> なる実験をしてはいますけれども．
私はかつて，<a href="https://github.com/mruby/mruby/pull/1844">lazy initialization なる提案</a>をしていて，これは sandbox を狙ったものだったのですが，意図がうまく伝わらなかったのか，フルボッコに終わりました．</p>

<p>実のところ，彼らでないので真の理由は解りません．
しかし，私の想像が及ぶ限りにおいて，必要と思わない理由は，2種類あります．</p>

<h3>説: Web サーバくらいまでしか考えてない</h3>

<p>ひとつは，&#8221;くみこみ！&#8221;など言いながらも，結局 web サーバのことまでしか考えが及ばないから．
対称なスレッドだけですむ世界なら，今の実装でも十分です．</p>

<p>もちろん，世界最高水準の開発者集団ですから，非対称スレッドの設計についても，頭では理解できておられるでしょう．
それと，腹に落として理解できるというのは，必ずしも一致しません．
技術というものの難しいところであります．</p>

<h3>説: コードゴルフに偏りすぎている</h3>

<p>もう一つは，組み込み系技術者たちは，小さな機器組み込みに偏りすぎているから．
ちっちゃいもの好きは，ニッポンの組み込みのガラパゴ特徴ですが，mruby も漏れずに思えます．
Mindstorms/NXT やらFM3-USBSTICKやら STM32F4 やら，RTOSを載せるのさえも一苦労な環境に，開発者たちの視線が集中しています．</p>

<p>コードゴルフは私も嫌いではないですが．
現在でもオンチップ 256KB は珍しくないマイコン世界．
MB 級の RAM がオンチップになるのは時間の問題なのになぁ…．
盆栽みたいなものですかね．</p>

<p>ともあれ，mrb_state をひとつ持たせるのがやっとの環境では，スレッドと mrb_state の組が複数存在する環境で起こることを想定するのは難しいでしょう．
私は，Mocloudos や mruby + TOPPERS + Blackfin といった，潤沢なスペックを持つ(とはいってもデスクトップやサーバに比べると極めて貧弱な)環境上で mruby を動作させています．
そのため，早期に気がついた，ということはあるでしょう．</p>

<h2></h2>

<p>というわけで，mruby で sandbox が何故必要なのか，なぜ本家に登場しないのか，ざざっと意見表明いたしました．</p>

<p>こう言ってはナンですが，今の体制のままだと，本家mrubyがベアメタルな機器組み込みに応用されるようになるのは，ずいぶんと先になるんじゃないかな…．</p>

<p>まあ，別に，&#8221;本家&#8221;に拘る必要も無いといえば無いのですが．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb での sandbox サポート]]></title>
    <link href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support/"/>
    <updated>2014-06-15T08:45:14+09:00</updated>
    <id>http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support</id>
    <content type="html"><![CDATA[<p>たぶん会社の公式サイトに乗るべき情報のような気もしますが．
まだ master ブランチどころか develop ブランチにも入っていないので，メモとして，こちらに書いておきます．</p>

<p>mruby の機器組み込み向け fork である monami-ya.mrb に，mrbgems の sandbox 機能を追加しました．
何故この機能が必要なのか，という話は<a href="http://www.monaka.org/blog/2014/06/15/monami-ya-dot-mrb-sandbox-support-2/">後日する</a>として，どう使うかということを記しておきます．
master ブランチに入るまでに，API 等の変更があるかもしれません．</p>

<p>また，mruby 本体に取り込まれるかどうかは，解りません．</p>

<h2>機能概要</h2>

<!-- more -->


<h3>前提知識</h3>

<p>本家 mruby では，mrbgems による機能拡張がサポートされています．
これは，monami-ya.mrb でも同様です．</p>

<p>mruby は，複数の実行環境を持てます．
実行環境は mrb_state という構造体が代表します．</p>

<p>mrb_state は，mrb_open() の呼び出しによって作成されます．
mrb_open() の実行時には，build_config.rb で静的に指定した全ての mrbgems が，
mrb_state で使用するものとして初期化されます．</p>

<h3>sandbox が提供する機能</h3>

<p>mrb_state ごとに，利用する mrbgems を限定できます．
限定する mrbgems は，静的に指定します．</p>

<h2>実装</h2>

<p>実例として，monami-ya-mrb/mruby-sqlite3 と monami-ya-mrb/mruby-bin-sqlite3 のみを含む sandbox を挙げます．</p>

<p>monami-ya-mrb/mruby-sqlite3 は monami-ya-mrb/mruby-bin-sqlite3 に依存しています．</p>

<h3>build_config.rb への記述</h3>

<p>build_config.rb に，sandbox メソッドを記述できるようになりました．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MRuby::CrossBuild.new('jsp-bfin') do |conf|
</span><span class='line'>...
</span><span class='line'>  conf.sandbox('sqlite') do
</span><span class='line'>    gem :github =&gt; 'monami-ya-mrb/mruby-sqlite3'
</span><span class='line'>    gem :github =&gt; 'monami-ya-mrb/mruby-bin-sqlite3'
</span><span class='line'>  end
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>この例では &lsquo;sqilte&rsquo; という名前の sandbox を指定しています．
ブロック内の gem は，従来のと同じです．</p>

<p>このような記述があるとき，minirake を実行すると，build/jsp-bfin/mrbgems/gem_init.c には，従来に加えていくつかの定義が生成されます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void
</span><span class='line'>mrb_init_sqlite_sandbox(mrb_state *mrb) {
</span><span class='line'>  GENERATED_TMP_mrb_mruby_bin_sqlite3_gem_init(mrb);
</span><span class='line'>  GENERATED_TMP_mrb_mruby_sqlite3_gem_init(mrb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>mrb_final_sqlite_sandbox(mrb_state *mrb) {
</span><span class='line'>  GENERATED_TMP_mrb_mruby_bin_sqlite3_gem_final(mrb);
</span><span class='line'>  GENERATED_TMP_mrb_mruby_sqlite3_gem_final(mrb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>struct mrb_sandbox_inib mrb_sandbox_inib_array[] = {
</span><span class='line'>  {
</span><span class='line'>    mrb_init_sqlite_sandbox,
</span><span class='line'>    mrb_final_sqlite_sandbox,
</span><span class='line'>  },
</span><span class='line'>  { NULL, NULL }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>さらに， build/jsp-bfin/mrb_sandbox_id.h というヘッダファイルが生成されます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * IMPORTANT:
</span><span class='line'> *   This file was generated!
</span><span class='line'> *   All manual changes will get lost.
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>#define MRB_SANDBOX_SQLITE (1u)</span></code></pre></td></tr></table></div></figure>


<h3>依存性チェック</h3>

<p>もし， mruby-sqlite3 のみを指定し，依存性のある mruby-bin-sqlite3 を
含め忘れたとします．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MRuby::CrossBuild.new('jsp-bfin') do |conf|
</span><span class='line'>...
</span><span class='line'>  conf.sandbox('sqlite') do
</span><span class='line'>    gem :github =&gt; 'monami-ya-mrb/mruby-sqlite3'
</span><span class='line'>  end
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>このような依存性の破れを含む記述で minirake を実行した場合には，エラーとなります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(in /Users/monaka/git/monami-ya.mrb/monami-ya.mrb)
</span><span class='line'>rake aborted!
</span><span class='line'>GEM mruby-bin-sqlite3 not found in the sandbox `sqlite'
</span><span class='line'>rakefile:27:in `load'</span></code></pre></td></tr></table></div></figure>


<h3>実行時の sandbox 生成</h3>

<p>API として mrb_open_sandbox() および mrb_open_sandbox_allocf() が追加になりました．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mrb_state* mrb_open_sandbox(unsigned int sandbox_id);
</span><span class='line'>mrb_state* mrb_open_sandbox_allocf(mrb_allocf, uintptr_t ud, unsigned int sandbox_id);</span></code></pre></td></tr></table></div></figure>


<p>引数 sandbox_id は，mrb_sandbox_id.h にある定義を与えます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  mrb = mrb_open_sandbox(MRB_SANDBOX_SQLITE);</span></code></pre></td></tr></table></div></figure>


<p>sandbox_id が 0 のときは，mrb_open() を呼んだ時と同じになります．
すなわち，登録されている全ての mrbgems が初期化されます．</p>

<p>どの sandbox を指定したかは，mrb_state に保持されます．
そのため，mrb_state を破棄する際には，単に mrb_close() を呼び出してください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[過去の事例だとこの手のOSSは長期的には失われる結果になりそうです]]></title>
    <link href="http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly/"/>
    <updated>2014-05-31T18:52:30+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/31/fork-will-dead-itself-exactly</id>
    <content type="html"><![CDATA[<p>おお，さすが OSS 世界の長老．キレの良い予言でございます．</p>

<p><a href="https://twitter.com/yukihiro_matz/status/472033974219325440""><a href="https://twitter.com/yukihiro_matz/status/472033974219325440">https://twitter.com/yukihiro_matz/status/472033974219325440</a>&#8221;</a></p>

<!--
https://twitter.com/yukihiro_matz/status/472033974219325440
@monamour555 まあ、どうforkするかはご自由で私から強制することはできませんが、過去の事例だとこの手のforkしたOSSは長期的には失われる結果になりそうです。
-->


<p>全く御意でございます．低頭拝聴です．</p>

<p>賤民である私も，OSS という言葉が無かったころ，Ruby が世に放流された頃には，この世界を見ていた気も無くもないですが．
きっと気のせいですね．
uClinux, Xen, Android で kernel の fork が起こったのは，失われる運命だったのですね．だめだ fork はダメだ．失われる！だめだ！</p>

<h2>やっぱ fork はダメだ失われる！</h2>

<p>あーやっぱり，私が書いたコードなんて，消えちゃうよなー．すべからく，そういう人生だったしなー．何しろ長老がそう言っているもんなー．
って陰惨に思いながら，残りのコードを書いていたのですが．</p>

<p>…あれ?</p>

<!-- more -->


<p>コンパイルが通らないよ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mrb_proc_new(mrb, mrb-&gt;irep[n], </span></code></pre></td></tr></table></div></figure>


<blockquote><p>んー? んー? ググル先生に聞いても解法がわからないよー．コピペできなよー．えーん．
こんな単純なところでコピペできない OSS なんか，使えないよー．マサカリ担いだ人しか使えない処理系なんてー (棒</p></blockquote>

<h2>自分で fork しまくる OSS は長期的には失われれる運命になりそうです．</h2>

<p>あはは，忘れていました．
IREP の扱い方，途中で，変わりました．
mruby のコア開発者なら，当たり前の知識ですよね．アテクシ，死ねばいいのに．</p>

<p>コードベースの進化は，OSS の華です．いいんじゃないですかね，
ただし，ユーザがその変更についていけていない OSS が，長期的には失われなかったのかな．</p>

<h2>タマにはマジメに．</h2>

<p>賤民の私に言わせてもらえるなら，これ，良くない兆候ですよ．</p>

<p>この節だけは，マジメに言いますけれど．</p>

<p>私が fork したコードなんてどうでもよいです．</p>

<p>良くない兆候ですよ． マージされ得ないオレオレ fork を繰り返して周りがついてこれなくなっている，<strong><em>本家のコード</em></strong> が．</p>

<p>過去の事例によると．
ブログエントリって，エッジ効いた技術に平民がどれだけついてこれているかを示す，解りやすい指標ですからね．</p>

<p>何言ってやがるんだと思うなら， mrb_proc_new か何かでググりゃいいんじゃないですかね．
軒なみ mrb->irep[n] ですから，記述が．少なくとも本稿執筆時点では．</p>

<p>角が立つのを承知で，(でももう，どーでもいいので)，事例を言えば，uT 以降の T-kernel とか，新世代以降の TOPPERS とかですね．
技術的に正しいながらも，説明不十分でプレゼンスを落としたOSS，しばしば見かけるのは気のせいですかね．</p>

<p>mruby，どうなのですかね? &ldquo;長期的な視点&#8221;を持っているグルには，答えが見えているに違いない．信じるのじゃ．
…ので，大丈夫ですかね．</p>

<p>どうなのですかね?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[機器組み込み屋がRailsアプリを出した理由]]></title>
    <link href="http://www.monaka.org/blog/2014/05/24/why-i-create-rails-app/"/>
    <updated>2014-05-24T14:57:08+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/24/why-i-create-rails-app</id>
    <content type="html"><![CDATA[<p>会社名義で出したサービスの裏話．</p>

<p>機能としては，ソフト屋さんから別段の注目を浴びるほどのものでもなく．
プレスリリース等派手なことはしませんでしたが．
<a href="http://www.monami-ya.jp/blog/2014/05/24/movsign-map-redirect-beta/">合同会社もなみ屋の名義で，Webアプリをリリース</a>しました．</p>

<!-- more -->


<p>ほんと，機能としては大したものではないです．</p>

<ul>
<li>緯度経度情報に対して，短縮URLを発行する．発行した人しか編集はできない．</li>
<li>短縮URLの呼び元のHTTPヘッダを読んで，適切なURL (Android だったら Android Mapsとか，フィーチャーフォンなら Google Static Maps とか)に飛ばす．</li>
<li>どの短縮URLが何回呼ばれたか，統計を取る．</li>
</ul>


<p>やる気になれば，誰でもやれるネタです．
しかし，調べてみたところ，意外なことに，全く同一の機能を提供するサービスは無いようです．</p>

<h2>別に遊んでいるわけではなくて</h2>

<p>たぶん，もなみ屋を知っている人にとって，リリース告知を受け取った時の第一声は，「機器組み込み屋がなに Rails で遊んでんの?」かなと思います．</p>

<p>でもこれ，実は，(もなみ屋にしては珍しく!)，技術先行ではなくて，需要先行のサービスだったりします．
ファーストユーザが既に決まっています．どうしたんだ，地に足付けているなんて，弊社らしくないぞ．</p>

<h2>やっぱり紙は最強だから．</h2>

<p>もなみ屋の活動拠点は，浅草が近くてスカイツリーも近く，外国人向けのゲストハウスも多いという，IT活用型観光にとっては最高のテスト環境だったりするわけです．</p>

<p>そんななかで，徐々に判ってきたことなのですが．
スマホ街歩きって，技術者と一部のオタクだけが盛り上がりはするけれども，実用的ではないのですよ．
(別に特定地区の頑張りを dis る意図は無いです)</p>

<p>紙，印刷物っていうのは，やはり最強です．
シャチハタスタンプのスタンプラリー，最強です．
A3折りたたみのグルメマップ，最強です．</p>

<p>次点で，パッシブNFCタグ辺りかな…．電池交換不要なパッシブタグは，紙に準じます．
使える端末が少ないじゃん，というデメリットもありますが．</p>

<p>BLE…うーん．まあ，保守体制が盤石なら．</p>

<p>専用スマホアプリ? ダメでしょ．全然ダメ．
地図の AR マッピングとか，カメラと液晶をブン回して，どんだけ電池持つと思ってるのよ，って話ですよね．(…言っちゃった)</p>

<p>しかし，道案内(ナビアプリ)は，重要です．
特に土地勘のない人を相手にする観光分野では．
この点で，スマホ・タブレット・ガラケーは大事．</p>

<p>そんなわけで，「観光客の満足度を高めたまま帰途について頂くには，offine to online の連続性を持たせつつ，どれだけ offilne の情報で済ませるかというのが重要である．」
てなことが見えてきたわけです．バッテリーを使わないことの正義，みたいなものを．</p>

<p>具体的に言うなら，印刷物や掲示物として存在するQRコードやパッシブNFCタグから，地図アプリへのスムーズな連携，とかですね．</p>

<h2>でも，統計情報が取れないと</h2>

<p>じゃあ QRコードに Google Maps へのリンクを込めときゃいいじゃん，という話なのですが．
それには 2つほど課題があります．</p>

<p>一つは，デバイスの多様性．
ガラケーとAndroidとiOSとで，ユーザにとって自然と思えるリダイレクト先が違うわけです．
Android と iOS については，吸収するバッドノウハウがありますけれど，ガラケーはつらい．
しかも地方から上京する方の中には，ガラケー所持の方も少なくないわけです．</p>

<p>あともう一つは，統計情報取得の問題．
観光って，概ね何かしら自治体からの公金が入ります．
そうすると，成果の測定が求められます．
しかし，QR コードに Google Maps へのリンクを含めるだけだと，どこにもログが残らないわけです．</p>

<p>短縮URLサービスの多くは，統計機能を持っています．
しかし，観光担当の方はITに詳しいとは限らないので，いろいろとつらい．
できれば専用サービスで，地名，緯度経度情報くらいで管理したい，と．
それなら，パート職員の方でも片手間でできるわけです．</p>

<h2>てなかんじで</h2>

<p>もなみ屋というのは，RTOS やら開発ツールやらのサポートという，ハードボイルドな商品も
取り扱ってはいるのですが．
結局のところ，人々の生活を愉しくするためのお手伝いを，ソフトウェアを通じて提供するというのがミッションなのであります．</p>

<p>スマホがパッテリー食いで，バッテリーのエネルギー密度が今のままなら，スマホを使わないシステムを提供する．これはミッションに矛盾しないので，始めたわけなのであります．</p>

<p>この話に限らず，地元で観光資料を作ろうとしているのだけれど…．
という方のご相談にも乗れますので，ご縁がありましたらお声掛け下さい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファンディングのためのファンディング，始めます．(その2)]]></title>
    <link href="http://www.monaka.org/blog/2014/05/19/funding-for-funding-2/"/>
    <updated>2014-05-19T16:09:22+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/19/funding-for-funding-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org//blog/2014/05/19/funding-for-funding/">前回</a>の続きです．</p>

<!-- more -->


<h2>オンラインのカード決済サービス，日本の状況</h2>

<p>前回，米国での状況は説明しました．
小規模法人や個人が，ネット通販のサイトを開いていることからお判り頂ける通り，
オンラインのカード決済サービスは，いくつかあります．</p>

<p>しかし，目標額達成後，速やか(数営業日以内)に代金を回収できるのは，今のところ，
<a href="http://webpay.jp">WebPay</a> と <a href="https://fastpay.yahoo.co.jp/">Yahoo!ウォレットFastPay</a> の2社に限られます．とはいえ，今後，類似のサービスは，日本国内でも増えていくことでしょう．</p>

<p>現存する両社のAPIは，かなり似通っています．
(<a href="http://blog.webpay.co.jp/post/webpay%E3%81%A8yahoo%E3%82%A6%E3%82%A9%E3%83%AC%E3%83%83%E3%83%88fastpay%E3%81%AF%E7%AB%B6%E5%90%88%E3%81%A7%E3%81%99%EF%BC%81%E6%AD%93%E8%BF%8E%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81%E5%BE%B9%E5%BA%95">WebPayの運営者ブログで示唆</a>されているとおり，FastPay が WebPay の互換を狙っているように見えます．)</p>

<p>しかしながら，クラウドファンディングサイト構築のためのオープンソースが用いている <a href="https://www.balancedpayments.com/">Balanced Payment</a> や <a href="https://payments.amazon.com/home">Amazon Payments</a> とは，すくならず API が異なります．</p>

<p>やや悲観的な状況です．
しかし，逆説的にいうと，この部分を突破すれば，日本でもクラウドファンディングサイトの構築は圧倒的に容易になるということでもあります．</p>

<h2>この問題の解決って，もしかして社会起業的．</h2>

<p>例えば，地方自治体で，地元の産業活性化のために，クラウドファンディングを使いたいというような案件は，既にいくつかあります．最近だと<a href="http://www.city.yubari.lg.jp/contents/municipal/funding/">夕張市</a>や<a href="http://www.pref.hokkaido.lg.jp/kz/csk/crowdfundingsogyoumodel.htm">北海道</a>で見かけました．
各地観光協会や商工会など含めれば，潜在需要は大きなものでしょう．
それと，Fablab や発明クラブのような，民間団体にも需要はあるでしょう．</p>

<p>しかし，私は，それらの大きな潜在需要に食い込もうという気は，今のところ，ありません．
それは自分のビジネスではありません．</p>

<p>私は，単に私のビジネスのスタートアップの問題を解決したいだけなのです．
日本で使えるカード決済のモジュールを，既存のオープンソースに付け加えたい．</p>

<p>しかし，その副産物には，社会起業的なインパクトが…そんな気がしているのですが，どうでしょうか．</p>

<h2>問題: 日本人は，放っておいても作る人に寄付/投資をするか</h2>

<p>という感じで，話が大きくなりました．巻き戻しまして…．</p>

<p>私には，私が行おうとするビジネスに対して，一つだけ不安があります．
それは，「日本人は，放っておいても作る人に寄付/投資をするか否か」という点です．</p>

<p>また海外の比較になりますが，海外では，無料で入手できるオープンソース製品に対して，
バグフィックスや機能拡張に対してお金を払える，または投資を募ることができるという
サイトがいくつかあります．しかし，それらのサイトで，日本人らしきアカウントの姿は
見かけません．</p>

<p>言語の壁ということもあるかもしれませんが，もしや，</p>

<blockquote><p>どうせ，作りたい奴は勝手に作るし，できあがった成果(回路図やソースコードなど)が無料でwebサイトに上がったら使わせてもらうわ</p></blockquote>

<p>というメンタリティが主流だとすると，日本では，「電子工作好きのための小規模クラウドファンディング」は，成り立たないかもしれません．
その辺りについて，読みきれずにいます．</p>

<h2>お願い: テストマーケティングをさせてください</h2>

<p>「長々文章を読ませておいて，さいご，これかよ…」ということで，すみません．</p>

<ul>
<li>私は，オープンソースのクラウドファンディングサイトを日本で使えるようにするための決済モジュールを，夏前を目処に，作ります．</li>
<li>決済モジュールは WebPay に対応させます．FastPay は互換路線なので，追って使えるようになるはずです．</li>
<li>サイト用のオープンソース製品として，<a href="https://github.com/crowdtilt/crowdtiltopen">CrowdtitltOpen</a> を使います．</li>
<li>決済モジュールは，MIT License として公開します．改変も含めて自由にお使いいただけます．</li>
<li>目標額に未達でも，おそらく作ります．作りたいので．ただもしかすると，少し馬力は下がります．</li>
<li>目標額を超えたら，その分は，メッセージ和訳など，広く日本国内で使えるようにするために使います．</li>
</ul>


<p>ちなみに，作業は私が行う想定です．誰かに頼むにしても私が監修します．
本件に関する私のスペックは，下記のとおりです．</p>

<ul>
<li>Lokitron が提供しているサイトを FastPay に対応させるという hack をしました．(未運用:デモサイトは上がっています．)</li>
<li>Ruby on Rails のスキルは，そこそこ．</li>
<li>Ruby のスキルは，そこそこ．</li>
<li>mruby については，全網羅のスキル．</li>
</ul>


<p>本件のクラウドファンディングのサイトとして，オープンソース向けののクラウドファンディング機能がある <a href="https://www.bountysource.com/">Bountysource</a>を使います．
国内のほうが心理的に安心かもしれないと思いつつ，このお話を国内の大手クラウドファンディングサイトに持ちかけるほど，私の心臓は強くはありませんでした．</p>

<p><a href="https://www.bountysource.com/teams/crowdtiltopen-ja/fundraiser">ファンディングサイトへのリンクはこちら</a>です．</p>

<p>極めて勝手なお願いですが，ご協力頂ければ幸いです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファンディングのためのファンディング，始めます．(その1)]]></title>
    <link href="http://www.monaka.org/blog/2014/05/19/funding-for-funding/"/>
    <updated>2014-05-19T14:43:18+09:00</updated>
    <id>http://www.monaka.org/blog/2014/05/19/funding-for-funding</id>
    <content type="html"><![CDATA[<p><strong>社会起業を行おう，という結論に達しました．</strong></p>

<p>いや，いまさら，意識高い大学生のようなことを思い立ったわけではありません．
また，まだ40代前半ですから，社会貢献の余生を模索するには早すぎます．
私は私のビジネスも続けます．</p>

<p>ただ，私が取り掛かりたいビジネスの <strong><em>副産物</em></strong> に，社会起業的価値があるかもしれないと，ふと思いついたのです．</p>

<h2>当初，私が考えたこと</h2>

<!-- more -->


<p>私が何を考えたのかは，既に tweet し，<a href="http://togetter.com/li/668857">「クラウドファンディングサイトの未来」というタイトルで togetter にまとめました</a>．</p>

<p>一連の Tweet に対して，いくつかの反応も頂きました．
それぞれのご意見(共感も反論も総論賛成各論反対も)に傾聴した上で，小規模クラウドファンディングサイトの登場は必然だろうと思うようになりました．</p>

<p>当初，私が必要性を感じているのは，個人レベルの電子工作のコミュニティへの，クラウドファンディングでした．
このコミュニティは，オンライン/オフライン問わず，ソーシャルネットが，ある程度できています．
よって，「〇〇を作ります」と言っている人の技術レベルも，プロジェクトのリスクも，投資する側は，ある程度分かります．
大手サイトでは緻密に行わなければ担保できないリスク管理のコストは，ある程度低減できます．
低コストは，手数料を下げたり，より良いサービスの提供に振り分けたりできる，ということに繋がります．</p>

<p>このサービスは，大化けはしないでしょうけれども，赤字にはならない程度の需給はありそうに，私は思います．
なので，私は(もしくは私の会社は)，上記のクラウドファンディングサイトの構築に向けて，一定量の開発リソースを割り振ることにしました．</p>

<h2>クラウドファンディングサイトを構築する方法</h2>

<p>実は，海外では，クラウドファンディングは，もっと気楽に立ち上げられます．
そのための，オープンソースや決済基盤が存在しています．</p>

<p>有名どころを挙げるなら，<a href="http://lockitron.com/">Lockitron</a> があります．
彼らは，自社製品のためのクラウドファンディングサイトを作って，<a href="https://github.com/lockitron/selfstarter">オープンソースで公開</a>しています．</p>

<p>Lockitron のサイトを応用して自社のためのクラウドファンディングサイトを作った例は，記事となり， <a href="http://makezine.jp/blog/2013/03/roll-your-own-crowdfunding-the-scout-story.html">makezine.jp で読むことができます</a>．</p>

<p>また，<a href="http://www.moongift.jp/2014/03/crowdtiltopen-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%95%E3%82%A1%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/">クラウドファンディングサイトのための，もっと大規模なオープンソース製品</a>もあります．</p>

<h2>日本で構築する際の障壁</h2>

<p>ところが，日本では，大きな障壁があります．</p>

<p>それは，決済手段です．</p>

<p>クラウドファンディングは，当たり前ですが，クレジットカードへ課金をし(正確にはオーソリをかけ)，目標額の達成如何で集金をしたり返却をしたりという機能が不可欠です．</p>

<p>このような決済サービスは，米国では数多くあります．
しかし，先ほどご紹介した <a href="http://togetter.com/li/668857">togetter に含まれる tweet</a>でも示唆したのですが，日米の金融行政や租税関係により，日本から，米国のサービスを使うには，様々な制約があります．</p>

<p>具体的には，米国の金融機関に口座を持つ必要がある，租税に関する書類を米国に出す必要がある，送金に時間がかかることがある，などです．</p>

<p>つまり，日本では，海外(主に米国)では簡単に行えるクラウドファンディングサイトの構築が，容易ではありません．</p>

<p>もちろん，決済手段だけが問題というわけではありません．</p>

<p>集客のようなビジネス的な問題は当然として，特定商取引法を始めとする消費者保護行政や，言語(日本語と英語)の問題など，課題はいくつかあります．
しかし，特定商取引法は適切に表示すればよいですし，サイトに表示される文字は技術的には解決可能な問題です．</p>

<p>やはり，決済手段は，大きな課題として立ちはだかります．</p>

<h2></h2>

<p>以上，私がクラウドファンディングについて発言をしだした経緯と，海外での状況，日本での障壁について簡単にまとめました．</p>

<p>ここまでの話でしたら，「アメリカは，いいなぁ．それに引き換えニッポンときたら」という愚痴です．</p>

<p>長くなりましたので，<a href="http://www.monaka.org//blog/2014/05/19/funding-for-funding-2%0A/">次回</a>と2回に分けたいと思います．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ピザ屋がお酒も始めました]]></title>
    <link href="http://www.monaka.org/blog/2014/04/30/pizzafactory-meets-brew/"/>
    <updated>2014-04-30T16:56:48+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/30/pizzafactory-meets-brew</id>
    <content type="html"><![CDATA[<p>たまには技術の話．
PizzaFactory の話は pizzafactory.jp に書くべきなのだけれども，諸般(外部)の事情で正式リリースとは言えないので．</p>

<h2>PizzaFactory for Homebrew アルファリリース</h2>

<h3>背景</h3>

<!-- more -->


<p>私個人としては，OSX でパッケージ管理ソフトを使うのは，PPC だった時代に fink を使ってあまりよい印象を持っておりませんでした．
そんなわけで，<a href="http://sourceforge.jp/projects/pf3gnuchains/releases/">OSX版のPizzaFactoryも，pkg を作って配ってきた</a>わけです．</p>

<p>しかし，pkg は，それなりに手間のかかること．
更新頻度が私の忙しさで決まってしまうのが悩みでした．</p>

<h3>Homebrew</h3>

<p>で，最近になって，TOPPERS のカーネルコンフィギュレータを作らねばならなくなって，boost のインストールが必要になり，ココロが折れました．
そして Homebrew に助けてもらいました．</p>

<p>OSXのデフォルトのコマンドを上書きしないという方針，気に入りました．
あと，Formula 既述の簡潔さも．</p>

<p>それに，Linux や MinGW/MSYS への対応も，そこそこ進んでいる様子．</p>

<p>ああ，もう PizzaFactory も Homebrew で配っちゃえばいいんじゃないの? と．</p>

<h3>PizzaFactory for Homebrew のインストール方法</h3>

<p>Homebrew のインストール方法は割愛します．
brew doctor の対応がある程度済んだら，PizzaFactory 用の tap を追加します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap PizzaFactory/commandline</span></code></pre></td></tr></table></div></figure>


<p>つらつらと読み込まれてきます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cloning into '/usr/local/Library/Taps/pizzafactory/homebrew-commandline'...
</span><span class='line'>remote: Counting objects: 114, done.
</span><span class='line'>remote: Compressing objects: 100% (39/39), done.
</span><span class='line'>remote: Total 114 (delta 82), reused 104 (delta 73)
</span><span class='line'>Receiving objects: 100% (114/114), 11.70 KiB | 0 bytes/s, done.
</span><span class='line'>Resolving deltas: 100% (82/82), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>Tapped 67 formula</span></code></pre></td></tr></table></div></figure>


<p>続いて インストール可能なツールチェインの一覧を得ます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew search 'pf-gnuchains4x-' | grep -v 'lib$'</span></code></pre></td></tr></table></div></figure>


<p>ズラズラっと出てきます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pf-gnuchains4x-arm-eabi
</span><span class='line'>pf-gnuchains4x-arm-elf
</span><span class='line'>pf-gnuchains4x-avr-elf
</span><span class='line'>pf-gnuchains4x-bfin-elf
</span><span class='line'>pf-gnuchains4x-fr30-elf
</span><span class='line'>pf-gnuchains4x-h8300-elf
</span><span class='line'>pf-gnuchains4x-i386-elf
</span><span class='line'>pf-gnuchains4x-lm32-elf
</span><span class='line'>pf-gnuchains4x-m32c-elf
</span><span class='line'>pf-gnuchains4x-m32r-elf
</span><span class='line'>pf-gnuchains4x-m68k-elf
</span><span class='line'>pf-gnuchains4x-microblaze-elf
</span><span class='line'>pf-gnuchains4x-mips-elf
</span><span class='line'>pf-gnuchains4x-mips64-elf
</span><span class='line'>pf-gnuchains4x-mips64-toppershrp
</span><span class='line'>pf-gnuchains4x-nios2-elf
</span><span class='line'>pf-gnuchains4x-powerpc-elf
</span><span class='line'>pf-gnuchains4x-rx-elf
</span><span class='line'>pf-gnuchains4x-sh-elf
</span><span class='line'>pf-gnuchains4x-v850-elf
</span><span class='line'>pf-gnuchains4x-xstormy16-elf
</span><span class='line'>pf-gnuchains4x-xtensa-elf</span></code></pre></td></tr></table></div></figure>


<p>arm-eabi ならば，次のようにしてインストールします．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install pf-gnuchains4x-arm-eabi</span></code></pre></td></tr></table></div></figure>


<p>お手軽ですが，本稿執筆時点では，ソースコードからビルドします．
1〜2時間は覚悟してください．</p>

<p>この点が，正式リリースと言わない理由です．
Homebrew には，bottle と呼ばれる，バイナリパッケージによるインストールのサポートがあります．
しかし，これが <a href="https://github.com/travis-ci/travis-ci/issues/2202">Travis-CI のバグ修正のため</a>滞っています．</p>

<p>なので，今のところは，どうしても欲しくて欲しくてという方のみお勧めします．</p>

<p>あと，<a href="https://github.com/PizzaFactory/homebrew-commandline/">tapへのプルリクは歓迎</a>です．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[失敗分析: 債務のこと]]></title>
    <link href="http://www.monaka.org/blog/2014/04/20/postmortem-3/"/>
    <updated>2014-04-20T23:59:59+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/20/postmortem-3</id>
    <content type="html"><![CDATA[<p>破産という不幸ネタであんまり引っ張るのは，なんか下品だなぁと思いつつ．
という前口上は<a href="http://www.monaka.org//blog/2014/04/11/postmortem-1/">毎度のこと</a>なので省略です．</p>

<p>そして，いつもながら，ご指摘頂いた方のお名前は伏せます．</p>

<h2>前回のおさらい</h2>

<blockquote><p>破産後に社会からどんな制裁を受けると予想しているのか…とか、債権者に対する申し訳ないという気持ちが全く無いのか…とか</p></blockquote>

<p>このtweet，<a href="http://www.monaka.org//blog/2014/04/20/you-may-kill-someone/">前回</a>も引用しましたが，質問に答えませんでした．</p>

<p>「ねえねえ，今どんな気持ち？」というアスキーアートが想起されるような，軽率な質問．
一般論として，こういう質問は危険です．
野放しにすると死人が出かねないので．</p>

<p>その点，重々に押さえた上で．</p>

<p>しかし，私は，(手続きの全てを終えておらず，渦中のまっただ中ですが)，心理的には整理がついています．
2つの質問に答えておきたいと思います．</p>

<h2>Q. 破産後に社会からどんな制裁を受けると予想しているのか</h2>

<p>質問の1つめについては，質問が「社会から」という曖昧模糊な表現なので答えづらい…．</p>

<p>答えづらいというのは，都合が悪いというのではなくて，曖昧過ぎて具体的に答えようがないわけです．
普通の破産は民事事案であり刑法事案ではありません．
国家が代表するような種類の社会から制裁を受けることは無いので．</p>

<p>とはいえ，曖昧模糊を解釈した上で言うならば，という見解はあって，それは本稿の後半で．</p>

<h2>Q. 債権者に対する申し訳ないという気持ちが全く無いのか</h2>

<p>質問の2つめについて，ストレートにいえば，申し訳ないと思いますよ．
建前でなく，本音で．
借りたものは返す，払うものは払う．
これ，言うまでもなく，商売のキホンのキですからね．</p>

<p>申し訳ないと思わないはずがないです．
日本の義務教育を受けて，通信簿の道徳の欄に問題がない人なら．</p>

<p>最初の起業をしてから約12年，急激に資金繰りが悪化してギブアップまで2年として差し引き，ざっくり10年間です．
この期間は，綱渡りながらも信用を得て商売していたわけですし．信用を得る程度の，最低限の商倫理はある(あった)ってことです．</p>

<h2>己の商倫理と現実との折り合いの付け方と，教訓</h2>

<!-- more -->


<blockquote><p>ということは、お役所なり裁判所なりというのは、結婚という、ひとつの法に定められた形式をとった男女に関しては、愛情という接着剤の効果をこの上なく信じているのか、ああしなさい、こうしなさいということは言わないけれども、一度、離婚という、社会の慣習を破り秩序を乱すような行動に出る者がいると、そんな奴の責任感なぞとても信じられないから、きちんと文書にして年数まで明記して</p></blockquote>

<p>上記は，小説家/エッセイストの景山民夫氏が書いたエッセイに「<a href="http://www.amazon.co.jp/o/ASIN/4041736013/monamour555-22">離婚調停書</a>」の引用です．</p>

<p>離婚と破産は違いますが，似たところがあります．
「オマエは社会の慣習を破るダメなヤツだから，代わりに裁判所が一線を引いてやろう．」という点で．</p>

<p>刑事にせよ，民事にせよ，裁判所は，その国家の良心の代表です．ときどき，変な判決を出すのも含めて．
「&#8221;申し訳ない&#8221;という気持ちに高低などないっ！」とドヤ顔するのも正論ですが，日本の良心たる裁判所，その論拠となる破産法が回収の優先度を決めていることもまた事実です．</p>

<p>破産法の条文や運用について文句のある方は，裁判所に駆けこむなり，最高裁判所裁判官国民審査のときに全員に×をつけるなり，国政選挙に積極的に関わるなりして頂ければ宜しいかと思います．</p>

<h2>残債との折り合いの付け方の方針</h2>

<p>極端にシンプルに考える．
これは，精神状態が不安定になるような事態にあって，自壊せずに過ごす唯一の方法です．</p>

<p>残債についても，シンプルに考えると，
「残債があるところとは，未来永劫，お付き合いの余地は頂けません」ということになります．</p>

<p>当たり前のことです．
約束の不履行があれば，その相手とはその先お付き合いできません．
裁判所が介入するような事案でなくても，同様ですし．</p>

<blockquote><p>免責5年過ぎたらまた元通りになるとでも思っているのだろうか</p></blockquote>

<p>などいうtweetも見かけましたが，「そんなわけないでしょw．そんな仮定を思いつくほうがどうかしてるwwww」です．</p>

<h3>金融系残債との折り合い</h3>

<p>開き直りと自分でも思いつつ，しかし「すみません．でも優先度は低いです」</p>

<p>金融系負債，つまり融資やクレジットカードなどは，利子に，保険料に相当する額(リスクプレミアム)が含まれています．</p>

<p>ふつう，怪我をして生命保険を使うときに，保険会社に「損をさせてすみません」とは言いません．
もちろん，頻繁に怪我をしたり，大病をしたりすると，生命保険の更新は拒否されることがあります．</p>

<p>同様に，免責から5年経ったからといって，お金を借りられるとかクレジットカードが作れる，なんて有り得ません．
貸し手にとってみれば，リスク管理上，当然の判断でしょう．</p>

<p>加えて，信用情報データは，相互接続されていて，別の会社ならOKというものでもありません．
つまり，人生を通じて，短期長期を問わず，金融機関から融資を受けるという選択肢は，ほぼ無くなります．</p>

<p>これを「社会からの制裁」と受け取るかは，その人次第でしょう．
私は，私自身のことを「制裁などではなく社会の合理であり，自業自得だ」としか思いませんが．</p>

<p>もし仮に，5年経って，借りられる日が来たとしても，私はたぶん融資での資金調達は行わないでしょう．
既に，私は私のことを，どこか信用していませんから．</p>

<p>そんなわけで，折り合いの付け方は，「これからは無借金でやっていきます」と．</p>

<h3>未納税等との折り合いの付け方</h3>

<p>倒産というのは，突然死ですから，未納税(社会保険料や労働保険料など含む)の未納は残ります．
国家から見れば，法人というのは，稼いで納税するための機械です．
それを履行できないということは，恥ずかしいことです．
しかも，旧破産法では，税金関係は，分配の優先度が高かったものでした．</p>

<p>しかし，現破産法では，労働債権よりも地位が下がっています．
折り合いの付け方としては，法律がそのように変わるものならば，労働債権を，その瞬間は優先すべきである．</p>

<p>折り合いの付け方は，「納税での貢献は，改めて頑張ろう．」</p>

<h3>買掛金との折り合いの付け方</h3>

<p>買掛金についてトラブルが起こると，同業では再起不能です．
そのことは，業績が良い時でも自覚的でした．
なので，自社開発を常としていましたし，買掛金が長く残らないよう，支払いサイトはなるべく短くするようにしていました．</p>

<p>しかし，結果として1社であれ残債が残ったのは，痛恨の極みです．
(まだ債権者集会前なので集計が取れていませんが，今回，2社破産のうち，未払い買掛金は1社数万円だろうと思います．)</p>

<p>金融系の残債ほどには，リスクプレミアムは乗っかっていないと思うので，申し訳ないとは思うのですが．
折り合いとしては金融系と同じになります．</p>

<h3>労働債権との折り合いの付け方</h3>

<p>労働債権…言い換えると，未払い給与です．
新破産法では，ほぼ最優先の債権です．
しかし私は，この辺りで，今も悔やむミスをいくつかしています．</p>

<p>長くなりましたので，その辺りは，次回以降に．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[無責任な倫理観は，'無責任な'人を殺すかもしれない]]></title>
    <link href="http://www.monaka.org/blog/2014/04/20/you-may-kill-someone/"/>
    <updated>2014-04-20T17:10:00+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/20/you-may-kill-someone</id>
    <content type="html"><![CDATA[<p>今回の日記，書くべきかどうかものすごく悩みました．
自己擁護とギリギリの話なので．</p>

<p>「当事者であるオマエが言うな」という反応は，折込み済みとして，書き始めます．</p>

<h2>Twitterで頂いた反応(mention)と私の感想</h2>

<blockquote><p>破産後に社会からどんな制裁を受けると予想しているのか…とか、債権者に対する申し訳ないという気持ちが全く無いのか…とか</p></blockquote>

<p>この方，既に当該 tweet を消しておられるようなので，お名前は伏せます．
軽くググッたところ，粘着荒らし系で単独スレが立つくらいの方なので，言いたいことと tweet とに乖離があるのかもしれません．</p>

<p>私は，鈍感力はあるほうです．
また，破綻してから2年近く経っていますから，いろいろとココロの整理がついています．</p>

<p>そんな私の，読後の第一印象は，「あんた，ヘタすると，人殺すよ．もしかすると，あんた自身も」です．</p>

<h2>倒産社長の心理</h2>

<p>「社長」と一口に言っても，個体差がものすごくあります．
また「倒産」と一口にいっても，その理由は様々です．</p>

<!-- more -->


<p>とはいえ，日本人で普通に公教育を受けて何らかの理由で起業して雇用して，というパターンの社長が，資金繰りに行き詰まって負債を抱えて倒産する．
こういう筋書きに直面した瞬間の反応には，それほどバリエーションは無いだろうと思います．</p>

<p>私が事務所を畳んだ直後は，かなり凹みました．
心理的に凹むだけでなく，いろいろ身体症状が出てきます．
へんな空咳がでる(たぶん逆流性食道炎になっている)とか，身体が強張るとか，不眠とか寝過ぎとか．
ふと我に返ると，ネガティブな独り言をブツブツ言っていて，自分に驚く，とか．</p>

<p>妻子が居なかったら，自死していてもおかしくないかもしれません．</p>

<h2>倒産したらどうなるのか，という不安</h2>

<p>倒産件数は，近年減少傾向があるとはいえ，年1万件を超えます．
その中で7割以上が，破産です．
日本の中小企業の場合，会社の破産は代表の破産なので，同じくらいの社長が破産していることになります．
しかし，倒産したらどうなるのか，破産したらどうなるのか，は，あまり情報共有されません．</p>

<p>情報が伏せられている世界に突入するのは，かなりの心理ストレスです．
「破産後に社会からどんな制裁を受けるのか…」を考えて，答えが出ず，しかし選択をすることになります．</p>

<p>心理ストレスがかかっている状態で，医者に行けば鬱病の診断書が出かねない状態で，
「破産後に社会からどんな制裁を受けるのか…」と不安で煽る．
これは，一番まずい対応です．
死にかねません．</p>

<h2>倫理観を問う無責任</h2>

<p>色々なタイプの社長は居ると思いますが，概ね3年を超えて事業が続く会社というのは，取引している顧客や金融機関から信用を得ています．
少なくとも，会社が傾くまでは信用を得ていたはずです．
倫理観の無い会社は，反社会的勢力は別として，長く持ちません．
逆説的に，潰れる会社の社長も商売に関する倫理観は，普通に持っています．</p>

<p>それでも会社は潰れます．
社長にとって，倒産というのは，自分が持っている倫理観を，実力では達成できなかったことを意味します．
正しい倫理観を持っていればいるほど，その挫折感は大きくなるはずです．</p>

<p>そこに「債権者に対する申し訳ないという気持ちが全く無いのか…」と畳み込むのは，その人に自殺教唆をするようなものです．</p>

<h2>そういうことにしたい，という心理</h2>

<p>…と，ここまで自己擁護とスレスレの話でした．
ここから先が，割と本題．</p>

<p>今回の日記の元になった tweet で，本当に怖いなと思ったことがあります．</p>

<p>件の彼としばらくtweetのやり取りをして，徐々に枠組みが見えてきたのですが．
彼は，私が無責任で「何の罪の意識もなく」破産し，「免責のあと5年でまた借金ができる」と思うくらい無知で，どうしようもない人だ．と，必死に思いたがっている…のでは? と．
(や，一般論として，私が無知でどうしようもないというのは否定しませんが．それはさておき．)</p>

<p>様々な情報を総合すると，発言者は，私と同様に小規模な会社をやっていて，どうやら同様に妻子がいるようです．</p>

<p>&ldquo;転んだ奴は馬鹿で無能だ．その点，オレは大丈夫．奴とは違う．&rdquo;
…なるほどそういうことにしたいのですね．と考えると，彼のtweetの一つ一つについて，割とすんなり合点がいきます．
(残念ながら彼はtweetのほとんどを削除しています．)</p>

<p>彼の中の私は，今このエントリを書いている私ではありません．
なので，どういうことにしておいて貰っても，私には実害は無いのですが．</p>

<p>ただ，彼の考えは，彼が万一の不可抗力で会社を畳まざるをえないような事態になった時，彼自身を追い詰めてしまい得ます．</p>

<p>彼がどうなっても，これまた私には実害はないのですが．</p>

<p>ただまあ彼にせよ誰にせよ，自死を考えるにまで追い詰められる，なんていうリスクは現代法治国家では気軽く負わせるべきではないと思うのです．
私の倫理観として．</p>

<h2></h2>

<p>「じゃああなたは，破産に際して，どういうふうに己の倫理観と折り合いつけたのよ．」という点については，たぶんそのうち書きます．
(<em>追記</em>: <a href="http://www.monaka.org//blog/2014/04/20/postmortem-3/">書きました</a> )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[失敗分析:経理のこと]]></title>
    <link href="http://www.monaka.org/blog/2014/04/12/postmortem-2/"/>
    <updated>2014-04-12T21:21:37+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/12/postmortem-2</id>
    <content type="html"><![CDATA[<p>破産という不幸ネタであんまり引っ張るのは，なんか下品だなぁと思いつつ．
という前口上は<a href="http://www.monaka.org//blog/2014/04/11/postmortem-1/">前回と同じ</a>なので省略です．</p>

<p>そして，前回同様，ご指摘頂いた方のお名前は伏せます．</p>

<h2>経理のこと</h2>

<blockquote><p>もそっと経理を学ぶべきだったんじゃないかとか。</p></blockquote>

<p>そのとおり．</p>

<p>しかし，「もっと〇〇を学ぶべき」という指摘は，ワイルドカードなのですよね．</p>

<p>大事なところでコケちゃった浅田真央選手に「もっとジャンプを練習すべき」は正しいです．
でも，そこには，情報量が無いですね．</p>

<p>…や，浅田真央選手を持ちだしたのは，ちょっとミスリードでした．
でも，資格試験に落ちたとか，恋人に振られたとか，全てにおいて「もっと〇〇すべきだった」という指摘は，常に当てはまります．ワイルドカードなのですよね．</p>

<!-- more -->


<p>実際の私はどうだったか．
たぶん簿記3級は確実に受かります．
資格試験には，実務知識以外の，試験のための勉強というものもあります．
ですから，今日受験して受かるとまでは言いません．</p>

<p>でもまあしかし，2週間くらいの余裕があれば，対策はつくレベルです．
もなみソフトウェアの最初の2年くらいは，顧問税理士はつかず，私が確定申告書を書いていましたから．</p>

<p>2級が受からないという理由は，在庫の扱いについて疎いからです．
経営としても，可能な限りの無在庫は標榜していましたので．
その部分を除くと…というと，何も残らないかもしれませんが…歯が全く立たないというわけでもないです．</p>

<h2>売掛回収の実態</h2>

<p>でも，もなみソフトウェアは，潰れました．</p>

<p>その事実をもって，これから起業する方に，私が言えることがあるとすれば．</p>

<p>「大事なのは，経理担当としての知識レベルではない」ということだろうと思います．</p>

<p>「回収済みの売掛金が何年にも残っていた」という事実を自分で見つけられなかったことは，経営者としてとても恥ずかしいものです．
しかしながら，&#8221;回収サイトが長期に渡る売掛金は発生させてこなかった&#8221;ということの裏返しでもあります．</p>

<p>売掛の回転率は，資金繰りにおいて，大きな問題です．
多く零細の場合，回収サイトの長い売掛を発生させて，資金繰りを悪化させます．</p>

<p>しかし，もなみソフトウェアの場合，締日から50日を超える案件は，ほぼ0でした．
失礼な言い方ですが，取引先も選びました．その点でのリスク管理は万全でした．</p>

<p>お役所案件の場合は，そうもいかず，回収サイトは長くなります．0というのは，企業間取引の場合です．
しかし，お役所案件の場合は，単年度主義です．
どんなに長くても，365.25日以上の回収サイトにはなりません．</p>

<p>ですので，売掛金が2期以上残ったままになるということが，私の頭の中には，有り得ないわけです．</p>

<h1>経営と信任</h1>

<p>元を正せば，経営者として，エンジニアとして，さらには経理担当として．
全ての業務を全うするのは無理でした．
そのため，経理のうち，帳簿に関するところは，お任せすることにしました．</p>

<p>ここまでは，経営としては普通の話です．
そして，売掛回収管理という点では，営業も見ている経営者として，きちんとお仕事ができていました．</p>

<p>ところが，お任せしたところ，ある時点で振り返ってみたら，帳簿に関するところで，色々と漏れがありました．
それによって，無罪の税務調査が入ったり，メインバンクが激怒したり，ひいては資金繰りに行き詰まりました．
実態は，こんなところです．</p>

<p>もちろん，税理士事務所さんのほうにも言い分はあるのだろうと思います．
きちんと情報をくれなかった，とか．</p>

<p>それら諸々ひっくるめて，最後は印鑑を押した私が悪いと認めた上で．</p>

<p>…<em>信任と丸投げを混同すると，会社は潰れる</em></p>

<p>ということなのだろうと思っています．
仕事の規模が大きくなって，いろいろと忙しくなって，信任から丸投げになっていました．
私は，簿記会計の知識よりも，丸投げ化の事実のほうが，致命傷になったと今は思っています．</p>

<p>「まさか，回収サイト50日未満の会社なのに，前期と今期の売掛金残高が一緒だということに不思議を感じない税理士は居ないだろう」
「まさか，税法の取扱いの変更について，通達を理解していない税理士事務所は無いだろう」</p>

<p>…でも，ありました．</p>

<p>経営者は，自分以外の存在は，たとえ専門家であっても，士業であったとしても，信じてはいけない．そういうことです．</p>

<h1>任せる度量と，矛盾する猜疑</h1>

<p>&ldquo;任せる度量と，矛盾する猜疑&rdquo; ，それが経営者に求められるものだと思いますし，私に足りなかったものだろうと思います．
なんだかんだ言って，信じてしまい，甘えていたのでしょう．</p>

<p>なので，起業を考えている方，起業してこれから伸ばそうと思っている方には，こう提言します．</p>

<p><strong>もそっと経理を学ぶべきだろうけれども，経理を学ぶ以上に大切な思考がある．</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[失敗分析:リスクのこと]]></title>
    <link href="http://www.monaka.org/blog/2014/04/11/postmortem-1/"/>
    <updated>2014-04-11T23:02:30+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/11/postmortem-1</id>
    <content type="html"><![CDATA[<p><strong>2014-04-12 リンクの追加や，ちょっとした補足</strong></p>

<p>破産という不幸ネタであんまり引っ張るのは，なんか下品だなぁと思いつつ．
でも，書いておくべきなのだろうなと思うので．</p>

<p>何故書くべきと思うかというとですね．
成功する人が出てくるためには，失敗事例の分析が大事だと思うのです．
「破産とか怖いから起業はダメだ」とは思う人が増えてしまうと，私は完全に無駄死ですので．</p>

<p>ですので．自分で自分の検死をする．
…なんかグロテスクですが…．</p>

<p>リスタートをかけている私にとっても，それは大事だと思ったりします．</p>

<p>事後分析(検死)については，コンピュータ業界では，日経BPさんの「動かないコンピュータ」系列，経営だと同じく日経BPさんの「敗戦の将，兵を語る」辺りは有名で，各回の内容も蓄積も濃いと思うのですけれども．
たぶんスタートアップがだめになる経緯を記した和書って，板倉雄一郎さんの「社長失格」が突出した名著で，あとは在りましたっけかなぁ，という感じではないかなと思っています．
(「この本を読め！」というお心当たりがある方は，はてブやtwitterで教えてください)</p>

<p>とはいえ，何から書くべきなのか，また何が大事なポイントなのか，私自身，十分に整理がついていません．</p>

<p>なので，<a href="http://www.monaka.org/blog/2014/04/09/startup-and-angel/">前回</a>，<a href="http://www.monaka.org//blog/2014/04/07/i-am-finally-restart-from-bung/">前々回</a>の日記に対して頂いたはてブやtwitterでのご意見について，書いてみようかなと思います．</p>

<!-- more -->


<p>通常の私の場合，前回のように，あまりにも的はずれなtweetは温和ながらもハッキリと晒します．
しかし，今回から数回で取り上げるご意見の，引用元のお名前は伏せます．
私の舌足らずな日記へのコメントがズバリ正解だとしたら，その方はエスパーか何かでしょう．
また，私も，ご指摘の内容は(条件付きながらも)正しいと思っています．
もし，私が引用したtweetの主で，正しい引用でのご紹介をお望みの方がいらっしゃいましたら，お知らせください．</p>

<h2>お金のこと</h2>

<blockquote><p>社長の賃金を資産計上できず倒れたってこと？CFがマイナスって時点で、リスクの大きい経営だったんだなあと思ってしまったりも。</p></blockquote>

<p>社長だけではなくて，取締役級の1名も，大幅な減額になっています．
社長以下4〜5名の会社で半分の給与が確保できない(そもそも研究開発助成なので，その他社員の給与も満額は出ない)となると，さすがにキツいです．</p>

<p>この辺りの事情は，記録も残っていることですし，機会があれば取り上げはできますが…．</p>

<p>ですが，経済産業省のスキームはたぶん変わります．
事情通によると，私以外にも，潰れる寸前まで追い詰められた組込みソフト会社さんがあるそうです．
このサイトの日記も，たぶん霞ヶ関の情報感度の高い方々には，既に伝わっています．
ですので，過去の話をしても，あんまり役に立たないかなぁと．</p>

<p>お役人さんを叩いても，潰れた会社は帰ってきませんし．</p>

<p>そもそも，0円査定の原因となった，無茶な単価設定をしたというどこかに居るバカ社長が悪いのであります．
そいつには窒息するまでパイ投げしてやりたいとは思いますけれどもね．</p>

<h2>高リスクであること，それは全くもって意識的でした．</h2>

<p>で，リスクの大きい経営だったかというと．ええ，リスクの大きい経営でした．
誤解を招く表現ですが，「我ながら，よく10年続いたな」と．</p>

<p>既にざっくりと tweet しています．</p>

<blockquote class="twitter-tweet"><p>ハイリスクな経営だったというのは，全くその通りで，そこはまったくもって自覚的だった．&#10;ニッポンの組込みシステムというガチガチの保守層にOSSをぶつける，という発想からして，ハイリスクだったわけだから．&#10;皿回しをしない人は，皿を割らない．</p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/453856186874351616">April 9, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>全くもって無鉄砲かというと，そういうわけでもなかったりはします．</p>

<p>組込みシステムにオープンソースを適用するというのは，今は RedHat に買収された <a href="">Cygnus solutions</a> の<a href="http://www.law.co.jp/okamura/OpenSource_Web_Version/chapter06/chapter06.html">成功事例</a>が，起業した 2000 年の段階でありました．
加えて，ちょうど <a href="http://toppers.jp/">TOPPERS プロジェクト</a> が興る頃でした．世間よりも少し早くソースコードを読む機会があって「これは業界の空気を変えられる」と確信しました．</p>

<p>ただし，ARMやMIPSといった海外セミコンダクタに比べて，日本のセミコンダクタ各社は，極めて保守的でした．それは起業時点で判っていたことでした．
(だから日本のセミコン会社は，危機的状況に陥っているのですよね，みたいな話は，また別の機会に)</p>

<p>その各社が作るチップを使う日本の組込み業界も，医療，航空宇宙，自動車，のみならず，白物家電のレベルまで，保守的なのも，自明でした．</p>

<p>そこに，まだ Linux でさえ十分に受け入れられていなかった2000年の段階で，オープンソースの旗を振って参入したわけです．
経済的な後ろ盾のない零細が．
これを高リスクでないという人は，きっとアタマがおかしいです．</p>

<p>高リスクであること，それは全くもって意識的でした．</p>

<p>意識的だったので，もなみソフトウェアは，常に結果を出しました．
私が，ではないです．…私も，ですが．
もなみソフトウェアには，優れたエンジニアが集っていましたから，</p>

<p>成果を出して次に繋げていかないと，保守の力に負けて潰れる，そういう危機感が常にありました．</p>

<p>TOPPERS/FI4 カーネルは，楽器店にならぶ<a href="http://www.toppers.jp/press/release-0504-2.pdf">シンセサイザ・デジタルピアノ・PA卓</a>や，ネットワークカメラ，等々幅広く採用されました．白物家電レベルには，ソリューションを出しました．</p>

<p><a href="http://www.toppers.jp/press/release-0504-2.pdf">実働するまでの多くの箇所で貢献した</a> TOPPERS/HRP カーネルは，航空宇宙系と言っても誰も異議を挟まない，<a href="http://ja.wikipedia.org/wiki/H-IIB%E3%83%AD%E3%82%B1%E3%83%83%E3%83%88">JAXAのH2Bロケットに採用されました</a>．
(いつのまにか，公式発表からは，もなみソフトウェアの記述が消え，ウィキペには名大の名前さえ消えていますが．どういうことなのでしょうかね)</p>

<p>PizzaFactory は，gcc や gdb などの上流にコントリビュートしながら，教材から，プラント制御のようなミッションクリティカルな現場まで，幅広く使われました．</p>

<p>あえなく潰えましたが，<a href="http://www.chubu.meti.go.jp/interface/php/chubu/kikai/sapoin/index.php/program/detail/37">サポイン事業でのメインターゲットは，自動車業界</a>でした．</p>

<p>設立当時3万円，最終的には903万円しか資本金がなかった会社が，保守でガチガチな日本の組込み業界に切り込む．
そして目に見える結果を出す．
その10年間，毎日が薄氷を踏むようでした．
資金繰りがよくて数日間の温泉旅行に出た日も，気持ちは薄氷の上でした．</p>

<p>高リスクでしたよ．仰るとおりです．</p>

<p>でも，私，思うのですよ．
皿を回さない人は，皿を割りません．</p>

<p>割っちゃダメなのですけれども．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[社長と投資家の役割，その理解なく明日は来ない]]></title>
    <link href="http://www.monaka.org/blog/2014/04/09/startup-and-angel/"/>
    <updated>2014-04-09T00:30:00+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/09/startup-and-angel</id>
    <content type="html"><![CDATA[<p>昨日のエントリの反響は大きく，色々な意見がありました．
多くは暖かいご支援で涙が出てきました．</p>

<p>もちろん様々な意見はあり，そのほうが世の中としては健全と思います．</p>

<blockquote><p>そうは言っても経産省悪くないし</p></blockquote>

<p>的な意見もありました．
私もそう思います．
見積もりを出してきちんと名簿も積算もしたのに，後出しジャンケンをする．
これは，個人的には卑劣だと思いますが， <strong>_だってこの国ニッポンの商習慣じゃないですか，これ</strong>__ ．
(と同様のご意見も頂きました)</p>

<p>別に経産省は悪く無いです．
ニッポンの商習慣を踏襲しただけです．
昨日のエントリにも書きましたが，私は，黙って机を蹴って退席し，契約印を推さなきゃ良かっただけです．</p>

<p>…だからこそ，この国ニッポンには，未来がない．
とも，思いますけれどね．</p>

<p>そんな感じではあるのですが，一つだけ，いい大人がこの理解は無いわ，というご意見があったので，マイルドに晒します．</p>

<!-- more -->


<blockquote class="twitter-tweet"><p>サポイン事業って研究開発に金出すっていってくれてるんじゃないの？なんで社長の経費が0円で怒ってるのかよくわからないんだよなぁ。</p>&mdash; hashimoto kenichi (@h_kenken) <a href="https://twitter.com/h_kenken/statuses/453515308435652608">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>サポイン事業って研究開発に金出すっていってくれてるんじゃないの？なんで社長の経費が0円で怒ってるのかよくわからないんだよなぁ。</p></blockquote>

<blockquote class="twitter-tweet"><p>別に怒っちゃいないのだがぬ．&#10;ポイントは，研究開発に必要な人件費が，そいつが社長という理由で0円になる根拠．&#10;加えて，申請時の見積には，社長の人件費も計上するし経産省も見て採択を決めるわけ．なのに後出しで社長の人件費は0円です，っていうのがフェアか． <a href="https://twitter.com/h_kenken">@h_kenken</a></p>&mdash; もなか (@monamour555) <a href="https://twitter.com/monamour555/statuses/453522491638439936">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>別に怒ってないです．まあ，ネットではよくある誤読です．活字には感情が出てこないですからね．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> 企業の社長が研究するから金出してくださいっていのもどうかなと思いまして。</p>&mdash; hashimoto kenichi (@h_kenken) <a href="https://twitter.com/h_kenken/statuses/453537535856087041">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>企業の社長が研究するから金出してくださいっていのもどうかなと思いまして。</p></blockquote>

<p>ん? なんか変なこと言い出して…ますね…．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> 社長さん(経営者)は投資する側じゃないんですか？</p>&mdash; hashimoto kenichi (@h_kenken) <a href="https://twitter.com/h_kenken/statuses/453539545221312512">April 8, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>社長さん(経営者)は投資する側じゃないんですか？</p></blockquote>

<p>…なるほど，判りました．
この方，技術には明るいようですが，
社会の仕組みが解っていないようです．</p>

<p>その後も，</p>

<blockquote><p>ってか自分質問しかしてないのに、なんで怒られたんだろ？サポイン事業の意義とか教えて欲しかったのに。</p></blockquote>

<p>とか</p>

<blockquote><p>まいいや、ちかよらんとこ</p></blockquote>

<p>など続くのですが，私としては別に怒っちゃいなくて．
というか私としては， tweet が，怒るレベルよりも低くて．</p>

<p>ところで，ちょっと何か言われると怒られていると思う人って多いですよね．
よほど好戦的なご友人に囲まれた人生を歩まれたのでしょうか．</p>

<p>閑話休題．
「ああ，この国ニッポンって，こういう方，多いよね」って白目になっていただけなのです．
とある記事を思い出しながら．</p>

<h2>それを聞いて，面白い調査結果を思い出しました．</h2>

<p><a href="https://cakes.mu/posts/4241">https://cakes.mu/posts/4241</a> を思い出していました．
引用します．</p>

<blockquote><p><strong><em>藤野</em></strong>　それを聞いて、おもしろい調査結果を思いだしました。3、4年前に、東大の学者や東京証券取引所が協力して、アメリカと日本で経済の知識についての大規模な調査をしたんです。その報告書を見たら、日米の起業家に対する意識の違いが如実に表れていました。「経済における起業家の役割はどれか」という、4択の問題があったんです。1「政府に対して事業機会を伝える人」、２「事業機会に対してリスクを負う人」、３「株の売買をする人」、４「投資家に対してリスクを限定させる人」という選択肢です。</p>

<p><strong><em>堀江</em></strong>　２以外は、よくわからない選択肢ですね。</p>

<p><strong><em>藤野</em></strong>　そうですよね。「株の売買をする人」って、ねえ（笑）。もちろん２が正解なんですが、この問題のアメリカの正答率は約90％、日本は約36％だったんです。問題は正答率の低さだけでなく、36％という率が中学、高校、大学、社会人とまったく変化しないことです。</p>

<p><strong><em>堀江</em></strong>　アメリカの場合はどうなんですか？</p>

<p><strong><em>藤野</em></strong>　年齢が上がるに従って、正答率が上がっていきます。アメリカでは学校の授業で、経済について教えるんですよね。日本では、資本市場や企業について義務教育の中でほとんど習わない。社会の教科書では2ページしかその部分に割かないんですよ。だから経済についての理解のベースの部分で、日本とアメリカにこれだけの差がある。</p></blockquote>

<p>「ひふみ投信」で知られる藤野氏と，「ほりえもん」で知られる堀江氏との対談記事です．</p>

<p>私は，アメリカが常に良いとは思いません．</p>

<p>でも，どの国との比較においても，知識が無いほうが良いとは，私はいかなる場面でも，思いません．
知識は大事．それはエンジニアとして生きるための立脚点ですから．</p>

<h2>社長さん(経営者)は投資する側じゃないんですか？</h2>

<p>いいえ違います．
私の主義主張ではなく，法人というものの成り立ちからして否定できます．</p>

<p>簿記や経営の初歩向けの本を読むと，だいたい最初に，人的会社ができた経緯のエピソードが出てきます．</p>

<p>曰く，</p>

<ul>
<li>大航海時代に，船長が，貴族から資金を調達した．</li>
<li>船長は，船が沈んだら死ぬ(無限責任)，けれども航海中の権力は絶大．貴族への配当をし終えたら，残りは船長のもの．</li>
<li>貴族は，船が沈んでも死なない．出資の範囲でしか損をしない(有限責任)．けれど金は出すので配当を得られる．</li>
</ul>


<p>現代の先進国は物的会社への移行が概ね済んでおり，社長(代表者・船長)でも有限責任を選択できます．
…ああ，代表者に連帯責任を取らせないと何も進まない，この国ニッポンという例外はありますね(頭痛い)．</p>

<p>ええと，大筋に戻ると，社長は，投資を受ける側で，投資をする側ではありません．
大航海時代の昔からです．</p>

<p>もちろん，社長が投資側に廻る，つまりキャピタリストやエンジェルになるというケースはあります．
これは将棋でいう金成りですね．&#8221;と金&#8221;は成った時点で&#8221;金&#8221;であり&#8221;歩&#8221;   ではありません．</p>

<p>金成りを成功事例と呼ぶのが相応しいのかには論の余地があると思いますが，少なくともIT業界では成功と見做されがちです．
一方で，広く世間を見渡すと，生涯社長で終わるのも，それはそれで評価を受けます．</p>

<h2>てなことを</h2>

<p>Web日記1日分を使って説明しなきゃいけない世の中って，たぶんどこかで公教育が歪んでいると思いますし，そういう説明が必要な大人が多数派であるならば，この国ニッポンが再浮上することもないのかなと思います．個人的には好きなのだけれどな，日本という国は．</p>

<p>怒っているわけではないのです．
悲嘆に暮れているのですよ．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[経済産業省に引導を渡された私，やっと，経済的な死亡宣告が出ました．]]></title>
    <link href="http://www.monaka.org/blog/2014/04/07/i-am-finally-restart-from-bung/"/>
    <updated>2014-04-07T22:22:47+09:00</updated>
    <id>http://www.monaka.org/blog/2014/04/07/i-am-finally-restart-from-bung</id>
    <content type="html"><![CDATA[<p>一般的には，黙り通す人のほうが大多数な話ですが．
業界のディープな方々は「どうなっちゃったの? 顛末がよく分からん」って永く思っていらっしゃるでしょうし，珍しい名字ですし，検索エンジンは非情ですので早晩，私の名前は出てきます．
官報の破産情報だけ転載し続けているwebサイトとか，ありますからね．</p>

<p>なので，言っちゃいます．
わたくし，やっと破産手続き，開始しました．</p>

<!-- more -->


<ul>
<li>平成26年(フ)第2841号</li>
<li>平成26年(フ)第2842号</li>
<li>平成26年(フ)第2843号</li>
</ul>


<p>なんで3つあるかというと，私の分．私が代表だった会社2つ分，合計3つだからです．
ややこしいです．
「東京地方裁判所民事第20部」でさえも，封書で誤記して，二重線訂正で送ってきましたから．</p>

<h2>原因</h2>

<p>まあいろいろあるのですけれど．
致命傷となったものを下記列挙しますが，結局は，私が，経営者として未熟だったということに尽きます．
〇〇が悪かったとは言っても，決断しハンコを押したのは，私ですから．</p>

<h3>税理士への丸投げ</h3>

<p>担当税理士が酷かったのを私が見抜けなかった，っていうのは，じわじわと効いてきました．
破産管財人さんに言われて気づいたのですが，固定資産の償却が一切行われていないとか，</p>

<p>回収済みの売掛金が数年に渡って残ったままだったとか．
これは知った私も唖然としましたが，それ以上にメインバンクが激怒しました．</p>

<p>そういえば，税務調査が入った時も，なんもしてくれなかったなぁ．
国税官の早とちりで，会社としては無実だったので，私が全面的に闘いましたが．</p>

<p>日々の記帳は会社(というか私)がやっていたので，両成敗の話なのですが．
月々数万円を払って，結局何も見てもらえていなかったという．</p>

<p>もとをたとれば，社員の友達が税理士事務所に勤めている，という縁故での契約だったのでした．
そういう契約は，とても良い結果がでるか，酷いことになるか，両極端ですね．</p>

<h3>サポイン事業</h3>

<p>急速に資金繰りが悪くなった直接の原因は，経済産業省の「戦略的基盤技術高度化支援事業」，いわゆるサポイン事業の採択でした．</p>

<p>私が代表を務めていた零細企業である，もなみソフトウェアは，典型的な，技術指向の会社でした．
代表者である私は，会社での仕事のほぼ全ては技術者としての実務でしたし，取締役(合資会社ですから正確には有限責任社員)にもエンジニアがいます．
会社組織なので，分担はしますが，会社の顔になるような技術の多くで，私がプロジェクトリーダとして動いていました．</p>

<p>サポイン事業の申請内容には，Eclipse が技術要素として入っていました．これは，私が，というよりも申請者の中で私だけが技術内容を十分に内容を理解していました．
当然のことながら，私はサポイン事業に100%コミットする予定で，申請書もそのようにかきました．</p>

<p>しかしながら，経済産業省は，採択が決定し，その契約説明会の段になって，以下のように知らせてきました．</p>

<blockquote><p>企業代表者の作業については，時間単価は 0 円とする．
取締役級の作業者については，時間単価を減ずる．</p></blockquote>

<p>どうやら，私の会社が採択される前年に，社長の単価を不当に釣り上げた事例があったようです．
あとから事情通から聞きました．
社長の報酬は，税法による縛りはあるものの，社長が勝手に決められますから．</p>

<p>もなみソフトウェアとしては，盛大な，とばっちりを受ける格好になりました．</p>

<p>説明会の席上で，机を蹴飛ばして出て行けばよかったのにと，他人には言われますし，私も今は思います．
「事業は1年あるから，その間に別の案件を取れば帳尻あうかな．それに製品化を急げば…」など思ったのが甘かったのでした．
アドバイザに，名だたる大手セミコンダクタ数社や自動車系企業が名を連ねていて，降りるとは言い出せなかったという，心の弱さもありました．</p>

<p>結局のところ，全責任は私にあります．
とはいえ，契約の直前になって，いきなり単価を0にしてくれといいだすというのは，社会通念上，ありえない話です．</p>

<p>サポイン以前も，そんなに経営的に安定しているわけでもない会社でしたが，
技術指向の零細である，もなみソフトウェアにトドメを刺したのは，経済産業省の事業の制度設計でした．</p>

<p>経済産業省としては，社長が技術者でもあるような会社は，消えてしまえばよいと思っているのでしょうね．
そりゃベンチャーが育たないわけですわ．</p>

<h3>弁護士介入から遅れた理由</h3>

<p>2012年に弁護士介入で，今になって手続き開始です．随分と間があります．</p>

<p>その理由も，一つはサポイン事業です．
サポイン事業は，お金が出る期間と，事業計画の期間にズレがあります．
事業計画の期間が終わるまで，会社を潰せなかったというのが理由の一つです．</p>

<p>あともう一つは，会社を潰す，つまり破産するにもお金がいるということです．
少しの余力も残さず破綻したので，破産管財人に支払う予納金も用意できない
というところまで追い詰められました．
個人なら法テラスに頼ることもできますが，法人にはそのような支援はありません．
この点も，今振り返れば，うまくできた気もします．
経験値は積めましたが，もう2度と使うことは無いので，まさにトリビア，ムダ知識です．</p>

<h2>この先，どうするの?</h2>

<p>すでに，合同会社もなみ屋という会社を作って，今までと似たような技術分野で仕事をしています．</p>

<p>1年半くらい前から，自分が作った会社の葬式の準備をしながら，新しく自分で作った会社を産み育てるという，相反する2つの作業を並行していた形になります．
片方だけでも精神的につらい作業なので，自己が崩壊するのではと思う時もありましたが，やっと人並みの追い詰められ方になりそうです．</p>

<p>ブラックリスト入りですから，強制的に無借金経営をすることになります．
クレジットカードも作れないのでカード決済が多いIT業界では自営は無理かな，と思っていたのですが，VISAデビなど上手く使うとそれなりになんとかなるということも判りました．
売上も社員も0からのスタートですが，肝心要の知財は残りました．</p>

<p>技術分野がオープンソース・ソフトウェアだったというのは不幸中の幸いでした．
プロプライエタリ・ソフトウェアであれば，それは会社の資産であり，継続することは不可能でした．
オープンソースの耐リスク性を，身を持って知りました．
そもそも会社を潰すなよ，という話ではあるのですが．</p>

<p>技術がダメで潰れたとしたら，たぶん足を洗って何か別の仕事に就いたかもしれません．
経営者としてはダメだったので，経営から足を洗うべきか真剣に考えました．
しかし，私が持っている技術を活かせそうな経営者が，周りにいませんでした．
無借金経営という枷がかけられている状態なら，以前のような過ちは起こしようがないかなと，自分に言い聞かせることにしました．</p>

<p>経営者としては控えめにコツコツと，技術者としては以前と同様に荒ぶって，日々を過ごせればと思っています．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[橋渡しとしてのAPI]]></title>
    <link href="http://www.monaka.org/blog/2014/03/23/api-as-glue/"/>
    <updated>2014-03-23T18:03:49+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/23/api-as-glue</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org//blog/2014/03/21/types-generated-by-compiler/">前回</a> の続き．
たぶんこれで本件に関する一応の最終回．</p>

<h2>APIは世界の境界線</h2>

<p>異なる世界観の端境にあって，両者の言い分を理解して橋渡しをする．
API の設計は，端的には橋渡しに尽きる．</p>

<p>API の直交性など，細かく言うと設計上気をつけるべき点はある．
しかし，それは，より美しく使いやすい API であるための付加価値である．
大事だけれども本質ではない．</p>

<p>API の代表例として，OS が提供するものがある．
システムコールとかサービスコールという名で呼ばれる．</p>

<p>フリーダムなユーザランドと，好き勝手されては困るOSとの間の橋渡しをする．
一例として，リアルタイムカーネル TOPPERS/JSP のサービスコール関数の冒頭を引用する．</p>

<p>心配ない．
RTOSのコードなんて読んだことが無いよ，という方でもざっくりと理解できれば十分．</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> *  メールボックスへの送信
</span><span class='line'> */
</span><span class='line'>#ifdef __snd_mbx
</span><span class='line'>
</span><span class='line'>SYSCALL ER
</span><span class='line'>snd_mbx(ID mbxid, T_MSG *pk_msg)
</span><span class='line'>{
</span><span class='line'>    MBXCB   *mbxcb;
</span><span class='line'>    TCB *tcb;
</span><span class='line'>    ER  ercd;
</span><span class='line'>    
</span><span class='line'>    LOG_SND_MBX_ENTER(mbxid, pk_msg);
</span><span class='line'>    CHECK_TSKCTX_UNL();
</span><span class='line'>    CHECK_MBXID(mbxid);
</span><span class='line'>    mbxcb = get_mbxcb(mbxid);
</span><span class='line'>    CHECK_PAR((mbxcb-&gt;mbxinib-&gt;mbxatr & TA_MPRI) == 0
</span><span class='line'>        || (TMIN_MPRI &lt;= MSGPRI(pk_msg)
</span><span class='line'>            && MSGPRI(pk_msg) &lt;= mbxcb-&gt;mbxinib-&gt;maxmpri));
</span><span class='line'>
</span><span class='line'>    t_lock_cpu();</span></code></pre></td></tr></table></div></figure>


<p>まず，関数に入った直後で，CHECK_* マクロの洗礼がある．
ここで，アプリケーションから渡された引数に，OS内部にとって不都合がないかどうかを調べる．
マクロだから見えないが，不都合な引数があった場合には，即座にエラーリターンとなる．</p>

<p>次に，t_lock_cpu() で，割込みが発生しない状況にする．
つまり，カーネルが CPU を独り占めする．
ここから先はカーネルの世界である．アプリケーションからは不可侵．</p>

<p>このような引数チェックは，API が備えるべき基本的な機能だ．
API の向こうは，全く違った世界観で動いている．
つまり，悪意，未必の故意，不理解により，有り得ないような引数で呼び出される可能性がある．
API は，どんな引数で呼び出されるかは判らないし，信用してもいけない．
上記のリストはシンブルなほうで，マルチプロセッサやメモリ保護など加わればその分だけ，チェックの量は増える．</p>

<p>呼び出し元を信用しない．
これが，単なる関数呼び出しとAPIとを分ける，ほぼ唯一の，しかし決定的な違いとなる．
APIの設計経験が浅い人は，呼び出し元を信用しがちである．
そして，呼び出し元のアプリケーションのせいで起きたバグなのに，APIの内側でのバグだとの冤罪を受け，無罪証明のために膨大な時間を費やしたりする．</p>

<h2>API と&#8221;ヒゲ&#8221;とC言語</h2>

<p>API の内外は，異なる世界観である．
だから，相手側の世界には，なるべく自分側の世界観を押し付けないように設計すべきだ．</p>

<p>けれども，何事にも限度というものがある．</p>

<p>例えば，mruby の API には，ほぼ全てに mrb_state 型のポインタがついている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* mruby/include/mruby.h から引用 */
</span><span class='line'>typedef mrb_value (*mrb_func_t)(mrb_state *mrb, mrb_value);
</span><span class='line'>struct RClass *mrb_define_class(mrb_state *, const char*, struct RClass*);
</span><span class='line'>struct RClass *mrb_define_module(mrb_state *, const char*);
</span><span class='line'>mrb_value mrb_singleton_class(mrb_state*, mrb_value);
</span><span class='line'>void mrb_include_module(mrb_state*, struct RClass*, struct RClass*);</span></code></pre></td></tr></table></div></figure>


<p>これを，C99 標準には mrb_state なんて型はない，など言って無理やり合わせようとするのは，筋が良くない考え方だ．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* こういう変更はよくない */
</span><span class='line'>typedef mrb_value (*mrb_func_t)(void *mrb, mrb_value);
</span></code></pre></td></tr></table></div></figure>


<p>(C言語の基礎が解ればすぐに判るだろうけれども，念の為に理由を示すならば)
mrb_state * から void * に型を変更することで，コンパイラによる型チェックが効かなくなり，mruby の内側を危険に晒す．</p>

<p>こういった，API を跨いで漏れだしてしまう変数型を，私は密かに「ヒゲ」と呼んでいる．
個人的に用いている語で，たぶん他の誰にも通じない．</p>

<p>「ヒゲ」は可能な限り少ないほうが，APIとしては優れた設計と言える．
C言語の標準ライブラリは，コンパイラが生成する型を完全に理解していて，C言語向けのAPIとしては優れている．
POSIX の各種 API は，独自の型はあるものの，それらの命名規則はC言語の標準ライブラリを踏襲しており，優れている．</p>

<p>しかし，あったほうが魅力的だったり安全になったりする「ヒゲ」もある．
mruby の C言語APIにある，mrb_state ポインタがその例といえる．
Windows API は，独自型の乱発など，現代的なC言語仕様から見ると眉をひそめたくなる部分もある．
しかし，ISO C 標準よりも先に存在していたAPI仕様なので，仕方がない部分もある．安全を求めた結果の「ヒゲ」の部類だ．
μITRON仕様も Windows API と同様．</p>

<p>そして，「鼻毛」もある．
「鼻毛」は，APIの内外にある世界観，ならびに言語仕様を考えた上で，どう考えても魅力がない…というか残念というか危険結果しか想像できない場合．
前回取り上げた，size_t の代わりに mrb_int を使おうとした例がこれに当たる…</p>

<p>…のだが，「ヒゲ」が「鼻毛」か否かは，立ち位置によって，変わりうる．</p>

<h2>長さに関する立ち位置の違い</h2>

<p>当然ながら Ruby は C言語ではないので，size_t なんていう型はない．符号なし整数型もない．Fixnum 型となる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mirb - Embeddable Interactive Ruby Shell
</span><span class='line'>
</span><span class='line'>&gt; [].length.class
</span><span class='line'> =&gt; Fixnum</span></code></pre></td></tr></table></div></figure>


<p>mruby の内部では，Fixnum の値は mrb_int 型として格納される．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* include/mruby/value.h から引用 */
</span><span class='line'>typedef union mrb_value {
</span><span class='line'>  union {
</span><span class='line'>    void *p;
</span><span class='line'>    struct {
</span><span class='line'>      unsigned int i_flag : MRB_FIXNUM_SHIFT;
</span><span class='line'>      mrb_int i : (MRB_INT_BIT - MRB_FIXNUM_SHIFT);  /* ←これが Fixnum の実体 */
</span><span class='line'>    };
</span><span class='line'>    struct {</span></code></pre></td></tr></table></div></figure>


<p>したがって，文字列の長さも，mrb_int 型で格納されている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* include/mruby/string.h から引用 */
</span><span class='line'>struct RString {
</span><span class='line'>  MRB_OBJECT_HEADER;
</span><span class='line'>  union {
</span><span class='line'>    struct {
</span><span class='line'>      mrb_int len; /* ←これが長さ */
</span><span class='line'>      union {
</span><span class='line'>        mrb_int capa;
</span><span class='line'>        struct mrb_shared_string *shared;
</span><span class='line'>      } aux;
</span><span class='line'>      char *ptr;
</span><span class='line'>    } heap;
</span><span class='line'>    char ary[RSTRING_EMBED_LEN_MAX + 1];
</span><span class='line'>  } as;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>ここで，視点の差に基づく見解の相違について，可能性が見えてくる．</p>

<p>C言語標準の側から見れば size_t を使わないのはどう考えでも「鼻毛」なのだが，敢えて，Ruby の内側から見てみよう．
<strong>外側にあるC言語の連中は，mrb_int を使いやがれ．お前らmrubyに依存しているんだろう?</strong> という意見には，一定の合理性がある．</p>

<p>ああ，Matz氏とは面識もあるし，ジェントルな方である．
上記太字は，私が相当に盛った表現だ．
皆さんご存知だろうが一応補足．</p>

<p>表現はさておき，世間一般の論として「APIの内側と外側で，どちらが主人でどちらが従属か」というのは，API設計で，必ず出てくる悩みどころといえる．</p>

<h2>API の主従と設計</h2>

<p>実例を挙げる．</p>

<p>μITRON仕様OSは，UW, UH, UB など，uint32_t, uint16_t, uint8_t で済む型を，独自に定義している．
これは，C99標準よりも遥かに前からμITRON仕様が存在したためである．
同様のオレオレ型定義は Windows などにも見られる．</p>

<p>しかし，μITRON仕様の系譜を汲む TOPPERS カーネルは，第2世代カーネル (ASPカーネルベース)を境に，
μITRON仕様流の定義を捨てた．
現世代のTOPPERSカーネルは，全てC99標準に準拠したデータ型で API を定義している．
(構造体などで，独自定義の型もある．)</p>

<p>一方，同じくμITRON仕様の系譜を汲む T-Kernel は，今でもμITRON仕様の流儀で API のデータ型を定義している．</p>

<p>T-Kernel は，OSが主であるという考え方であるといえる．
この場合，しもべたるアプリケーションは，OSが定義した型に則るのがスジである．
他環境で動くライブラリを移植する際に悩ましかろうが，そんなことは知ったことではない．</p>

<p>一方，TOPPERSの第2世代以降の仕様は，API仕様から見ると，アプリケーション，もしくはC言語処理系の都合が主である．
仕様策定者たちの正確な意図は判らない．
size_tなどコンパイラが生成する型との摺り合わせについて考えたり，MISRA系のコーディングガイドラインとの整合性を考えたり，いくつかの要因があるのだろう．
しかし，結果として，ベアメタル(フリースタンディング)環境のC言語アプリケーションのための，
スレッドライブラリとして，TOPPERSカーネルのAPIは，自然にフィットする．
他のライブラリを応用する際にも，ライブラリがC99が推奨するデータ型にそっている限り，悩む箇所は多くない．</p>

<p>T-kernel と TOPPERS という，2つのカーネルのAPIは，その視点の違いで，使う型が異なる．
同じRTOS仕様を起源とし，今でも提供する機能に大差がないにも関わらず，である．
この例は，APIの主従関係の捉えかたがデータ型の選び方に影響することを，示している．</p>

<h2>mruby と C言語アプリの主従，そしてAPI設計</h2>

<p>というわけで，mruby へのコミットで，size_t から mrb_int へ変えたいと思ったことには，一定の妥当性がある，
というか，API設計をするものとして，気持ちは判る．
Matz 氏は，自他共に認める「Ruby のパパ」であり，彼が Ruby 世界を中心に mruby を考えるのは仕方がない．
仕方がないというか，そういう立ち位置でいて頂かないと皆困る．</p>

<p>一方で，mruby は，アプリケーションに組込むライブラリであり，そのAPIは，結合先の言語(今回の場合はC言語)を無視することができない．
C言語もれっきとした言語であり仕様標準があり，コーディングパターンもある．</p>

<p>片方の世界でベストプラクティスだったとしても，片方の世界でアンチパターンになることは，少なくない．
API設計の最も難しく，かつ醍醐味であるところ，それは，2つの世界を理解して橋渡しすることにある．</p>

<p>ここまでザザッと説明して，最後に2つほど質問．</p>

<p>mruby で mrb_int を使うのが「鼻毛」なのに，μITRON仕様やWindows API では「鼻毛」にはならないのは何故か?
これをスラっと回答できるのは，少なくともデータ型に関しては API 設計をするに十分なスキルのある人であろう．</p>

<p>μITRON仕様のAPIには，「鼻毛」と呼ぶのにふさわしいサービスコール群がある．それはどれか．
本稿読者の多くはμITRON仕様を知らないかもしれないが，批判な目で知らないAPIレビューできるのは，API設計者に
必要なスキルである．</p>

<h2></h2>

<p>てな感じで，結論があるような，無いような，けむに巻いた感じで，一連の話は終わり．</p>

<p>今回はC言語APIを題材にしたが，ビルド構成ファイルである build_config.rb に与える機能の話など，Ruby を使った DSL の設計に関わる話題もある．でもそちら方面は私の得意分野ではないので，割愛．</p>

<p>mruby の面白いところは，Matz 氏が作った世界である Ruby は当然のこととして，プルリクを送る開発者たちの多様性にあると個人的には思っている．
Cのほうが得意な人．C++のほうが得意な人．運用系への適用に興味を持つ人，gemsを量産する人，JITに魂を売った人，ちっちゃいものクラブ会員，などなど．
こういう状況だと，mruby に興味がなくても，プルリクを眺めているだけで，プログラミングの学習になりうる．
専門分野に属すると，その分野の定石みたいなものに縛られてしまう．
今のところ，mruby には，それがない．</p>

<p>大した分量ではない 2つのコミットから，ここまで話を伸ばせる．
他のコミットも，たとえ数行の変更でも，深い洞察の末だったりすることも，しばしばある．
C言語を覚えたけれども，その先の学習で伸び悩んでいるという向きにとって，mruby はなかなかよい教材だろうと思う．</p>

<p>最近，涼風 ( @suzukaze_jp )氏が，<a href="http://mruby-master-changes.hatenablog.com/">mruby masterの変更履歴を定期的にまとめている</a>ようなので，気が向いたらご参考に．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コンパイラが生成する型とAPI]]></title>
    <link href="http://www.monaka.org/blog/2014/03/21/types-generated-by-compiler/"/>
    <updated>2014-03-21T07:53:49+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/21/types-generated-by-compiler</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org//blog/2014/03/20/type-conversion-warning/">前回</a> の続き．</p>

<h2>C言語のおさらい</h2>

<p>繰り返しすぎてそろそろクドいかもしれないが，C言語は，いろいろとフリーダムすぎて扱いづらい．</p>

<p>にも関わらず，UnixというOSの記述言語を超えて広く使われた理由の一つに，ポインタを用いた自由なメモリアクセスがある．</p>

<!-- more -->


<p>OSやハードウェアの制約がなければ，プログラム自身を含む，全てのメモリは参照可能で，書き込みもできる．
ポインタは，加減算によってアドレスを変更できる．ポインタ同士の加減算も可能だ．</p>

<p>自らが管理する変数を，ポインタを用いて，書き換えることもできる．
そのような操作を支援するために，特定の変数が専有しているメモリサイズを取得することが可能だ．…など書くと無駄にややこしいが，要するに sizeof 演算子がある．</p>

<p>sizeof は sizeof(foo) など括弧を添える書き方が一般的なので，ときどき関数やマクロと誤解されるが，<strong>演算子</strong> である．本稿では，この事実が大きな意味を持つ．</p>

<h2>sizeof によって得られる値は?</h2>

<p>sizeof の演算結果は，正整数となることは確実だ．マイナスのサイズなんてありえない．
さて，では，unsigned int が適切だろうか? それとも unsigned long?</p>

<p>ここで，C言語の整数型のフリーダムっぷりが仇となる．
まず，unsigned long が扱える範囲が処理系定義だ．
加えて，仮想記憶などの技術で，またはムーアの法則に沿って，実装可能なメモリの量は爆発的に増えた．
そのため sizeof の結果が unsigned long の上限を超える可能性が出てきた．</p>

<p>たとえば，unsigned long がUnix系の慣習に沿って32ビットだとしたら，4GB以上のメモリを占める配列の sizeof の結果は格納できない．
本稿読者には言うまでもないが，4GB以上のRAMを持つ機器は，いまや珍しくない．</p>

<p>このような問題への対処として，sizeof の結果を保存するための型を，C言語仕様は導入した．
それが，size_t である．</p>

<p>size_t は，多くの場合，符号なし整数型の typedef となる．
しかしどの型の typedef なのかは，処理系次第である．
動作するCPUが扱えるメモリサイズによって，処理系の作者が決める．</p>

<p>たとえば，メモリアドレスの上限が65535なのに 32ビット分を割り当てても無駄だろう．
16ビットのメモリ空間なら，uint16_t 相当になる可能性はある．同様に 32ビットなら uint32_t 相当だろうし，もし 24ビットのメモリ空間なら uint24_t になるかもしれない．でも24ビットの型を作るのは面倒だからuint32_t相当にしました，という実装もあるかもしれない．</p>

<p>こんな按配なので，C言語を用いるプログラマは，size_t の最大値を決め打ちしたコーディングをしてはいけない．
そのコーディングの典型が，(値チェックを伴わない)size_t 以外の整数型変数への代入である．</p>

<p>これは好みの問題ではない．
仕様から容易に導き出される，事実だ．</p>

<p>蛇足になるが，このように演算結果により処理系が生み出す型は，ptrdiff_t など他にもある．
移植性を保ったAPIを考える際には，これらの型についても十分に理解しておく必要がある．</p>

<h2>いつになく噛み付いた理由</h2>

<p>ここまでくると，<a href="https://github.com/mruby/mruby/commit/048bca43c9438b1245fec92d8f05ca0cc0b929d2">mruby の API 変更を意図した Matz 氏のコミット</a>について，私が噛み付いた理由が見えてくるだろう．</p>

<p>mruby の mrb_int 型は，実際は符号付き整数型の typedef だ．
しかも，mruby の実行環境に合わせて，ビット幅は変えてもよい造りになっている．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* 参考: include/mruby/value.h から引用 */
</span><span class='line'>
</span><span class='line'>#if defined(MRB_INT64)
</span><span class='line'># ifdef MRB_NAN_BOXING
</span><span class='line'>#  error Cannot use NaN boxing when mrb_int is 64bit
</span><span class='line'># else
</span><span class='line'>   typedef int64_t mrb_int;
</span><span class='line'>#  define MRB_INT_BIT 64
</span><span class='line'>#  define MRB_INT_MIN INT64_MIN
</span><span class='line'>#  define MRB_INT_MAX INT64_MAX
</span><span class='line'>#  define PRIdMRB_INT PRId64
</span><span class='line'>#  define PRIiMRB_INT PRIi64
</span><span class='line'>#  define PRIoMRB_INT PRIo64
</span><span class='line'>#  define PRIxMRB_INT PRIx64
</span><span class='line'>#  define PRIXMRB_INT PRIX64
</span><span class='line'># endif
</span><span class='line'>#elif defined(MRB_INT16)
</span><span class='line'>  typedef int16_t mrb_int;
</span><span class='line'># define MRB_INT_BIT 16
</span><span class='line'># define MRB_INT_MIN INT16_MIN
</span><span class='line'># define MRB_INT_MAX INT16_MAX
</span><span class='line'>#else
</span><span class='line'>  typedef int32_t mrb_int;
</span><span class='line'># define MRB_INT_BIT 32
</span><span class='line'># define MRB_INT_MIN INT32_MIN
</span><span class='line'># define MRB_INT_MAX INT32_MAX
</span><span class='line'># define PRIdMRB_INT PRId32
</span><span class='line'># define PRIiMRB_INT PRIi32
</span><span class='line'># define PRIoMRB_INT PRIo32
</span><span class='line'># define PRIxMRB_INT PRIx32
</span><span class='line'># define PRIXMRB_INT PRIX32
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>一方，size_t は，符号なし整数型の typedef だ．
しかも，ビット幅は判らない．</p>

<p>これらを，API 関数呼び出しという，値チェックを伴わない(実質的な)代入を行った時，何が起こるか．</p>

<p><a href="http://www.monaka.org//blog/2014/03/19/implicit-type-conversion-in-c/">先日</a>とりあげた，暗黙的なダウンキャストが，起こる．
特定環境のみ，かつ特定のアプリケーションのみで．</p>

<p>「概ね大丈夫だが，たまに致命的に動かない．」
こういう挙動は，ライブラリとしては，忌み嫌われる最悪のパターンである．</p>

<h2>strlen は問題ではない．</h2>

<p><a href="https://github.com/mruby/mruby/commit/180b3d5678d613b79593ef202089e93abb4eacfc">この問題に対し Matz 氏が一部を revert した際のコミットメッセージ</a>は下記のとおりだ．</p>

<blockquote><p>change mrb_int to size_t that would take strlen()</p></blockquote>

<p>コミットメッセージなんて，ちゃっちゃっと済ますものなので，筆が滑ることはよくある．
Matz 氏は実は理解しておられるだろうが，そうでない人もいるだろうから，書いておく．</p>

<p>strlen() の返値も，size_t ではある．
しかし，別に strlen() はどうでもよい．
なぜならば，strlen() は関数だから．
mrb_int を返す strlen() の代替を作るのは，難しい作業ではない．</p>

<p>しかし，sizeof は演算子である．
Cにはそもそも演算子オーバーロードの機能が無いし，C++ でさえオーバーロードできない．
だから，sizeof 演算子の結果の型を size_t 以外にすることは，不可能である．</p>

<p>そして，mruby の文字列系・シンボル系の長さには sizeof 演算子が使われる可能性が極めて高い．
なにしろ，mruby の API 自身に， sizeof を内包するものもあるのだから．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define mrb_strlen_lit(lit) (sizeof(lit "") - 1)</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<p>というわけで，C言語仕様の視点から，なぜ私が一連のAPI変更に異議を立てたのかということを纏めた．
本件は，好みの問題ではない．
ISO Cの仕様を踏まえると，自明として適切な結果が浮かび上がる．</p>

<p>とはいえ，mrb_int にしたくなる気持ちも解らなくもない．
明日以降，その辺りの，わりと人情系というかピープルウェア的な話で，一連の話題を閉じたいと思っている．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[-Wconversion は，いかがでしょう?]]></title>
    <link href="http://www.monaka.org/blog/2014/03/20/type-conversion-warning/"/>
    <updated>2014-03-20T12:08:52+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/20/type-conversion-warning</id>
    <content type="html"><![CDATA[<p>ちょいと寄り道して，<a href="http://www.monaka.org//blog/2014/03/19/implicit-type-conversion-in-c/">前回</a>の補足．</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/monamour555">@monamour555</a> gccのversionは何をお使いですか？4.3以降だと-Wconversionとか使えませんかね。。</p>&mdash; ぬん。 (@amasawa_seiji) <a href="https://twitter.com/amasawa_seiji/statuses/446205477546762240">March 19, 2014</a></blockquote>


<script async src="http://www.monaka.org///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>鋭い．(汗</p>

<p>はい．<code>-Wconversion</code> ，使えます．記憶が正しければ GCC 2.95.x から．
ただ，検出が割と難しいようで，3.4系でパッチが出て，立ち消えになったり．
当時の経緯は<a href="http://d.hatena.ne.jp/yupo5656/20040830/p2">このエントリが詳しい</a>です．</p>

<p>また，GCC 4.3 以降では，挙動が微妙に変わったりしています．
変更内容の詳細は，<a href="http://gcc.gnu.org/wiki/NewWconversion">GCC Wiki</a> を．</p>

<p>GCC は，そんな事情なので，前回の記述</p>

<blockquote><p>もしかしたら気の利いた処理系では警告を出してくれるかもしれないが．</p></blockquote>

<p>は，完全に筆が滑っております．
お詫びします…が，必ずしも訂正はしません．</p>

<p>今回の後半は，その辺りについて．</p>

<!-- more -->


<h2>-Wconversion の頼りなさ</h2>

<p>確かに -Wconversion オプションは，暗黙的なダウンキャストについて警告してくれる．
なので，gcc/g++ を使ってコーディングする場合には，可能な限り付けておくべきだ．</p>

<p>しかし，API 設計という今回の話題では，-Wconversion は必ずしも頼りにはならない．</p>

<p>例示しよう．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 65535;
</span><span class='line'>  long b;
</span><span class='line'>
</span><span class='line'>  b = a;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これを手元の XCode の gcc (Apple LLVM version 5.1 (clang-503.0.38) (based on LLVM 3.4svn) Target: x86_64-apple-darwin13.1.0) でコンパイルする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc -Wconversion test.c
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>warning は出ない．</p>

<p>Renesas製 H8/300 というマイコン向けのクロス gcc (gcc version 4.6.4 20130204 (prerelease) (GCC) )でコンパイルしてみる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /pizza/bin/h8300-pizzafactory-elf-gcc -Wconversion test.c 
</span><span class='line'>test.c: In function 'main':
</span><span class='line'>test.c:4:3: warning: conversion to 'int' alters 'long int' constant value [-Wconversion]
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>今度は warning が出る．</p>

<p>この差異は，gcc のバージョン違いに因るものではない．</p>

<p>前回，C言語仕様の整数型は，決っているようで何も決まっていないことに言及した．
char も int も short も long も，それぞれどんな範囲の整数を保持できるかは，実行対象のCPUの特性に合わせて，処理系(コンパイラ)が勝手に決めて良いのだ．</p>

<p>(…まあ完全にフリーダムかというとそうでもなくて，long 型より広い範囲の整数を格納できる short 型はダメとか，制約はある．
商業誌掲載原稿なら，このへんの細かいことも書く．けれども，本稿は日記なので割愛．ご興味ある方はGoogle先生へ．)</p>

<p>H8/300 という系列のCPUは int が 16ビットであるほうが都合が良いので，デフォルトではそのようになっている．つまり 32767 までしか格納できない変数に 65535 を代入しようとしている．
結果，警告が出る．</p>

<p>ちなみにH8/300 は動作クロック 25MHz という，今や貧弱なCPUだが，有志のご尽力により Linux が動く．
Linux は，元が i386 アーキテクチャ向けだったこともあって， int が 32ビット以上あることを暗に期待しているフシがある．
そんな理由…だけではないだろうが，int を 32 ビットとみなしてコンパイルするオプション <code>-mint32</code> が用意されている．これを使ってコンパイルしてみる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /pizza/bin/h8300-pizzafactory-elf-gcc -Wconversion -mint32 test.c 
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>XCode の環境と同じく，警告は出なくなる．
暗黙のダウンキャストが起きなくなるのだから，当然ではある．</p>

<h2>API 設計者は，-Wconversion には頼れない</h2>

<p>つまり，-Wconversion は，<strong>今まさにコンパイルしようとしている環境において</strong>，暗黙のダウンキャストを検知する．
<strong>他の処理系で何が起こるかは関知しない</strong> ．
H8/300 の例から判るとおり，同じコンパイラの同じターゲットでも，ABI (アプリケーション・バイナリ・インタフェース)が違えば，検出したりしなかったりする．</p>

<p>このような動作では，API の移植性を担保できない．</p>

<p>アプリケーションの開発者にとっては，-Wconversion で少なからずのミスは見つかるかもしれない．
ただし，C 言語 API の設計者は，特に移植性を問われる種類の API の設計者にとって，-Wconversion は，頼りない．</p>

<p>もう少し踏み込んで言ってもよい，頼ってはいけない．</p>

<p>蛇足だが，この点について，コンパイラの開発者を責めるのはお門違いだろうと，私は思う．
責めるとしたら，整数型についてほぼフリーダムとした，最初期にC言語の仕様を決定した面々だろう．</p>

<h2>API 設計者が取りうる態度は，2つある</h2>

<p>よく言えばターゲットアーキテクチャに対して柔軟，悪く言えば何も決めてない優柔不断な，C言語の整数型．
これに直面する際に， API 設計者が取りうるアプローチは 2つある．</p>

<h3>完璧な移植性は諦める派</h3>

<p>一つは，動作環境に期待する整数型を明示してしまうというアプローチ．</p>

<blockquote><p>char は 8ビット符号付き・int は 32ビット・short は16ビット・long は32ビット・ポインタは32ビット．それ以外は認めない．以上</p></blockquote>

<p>これは，20世紀のUnix世界ではしばしば見られる態度だった．
C言語といえばUnix．そのUnix動作マシンが概ね備える整数型を前提にすれば，世の中のほとんどをカバーできるではないか，と．</p>

<p>そのため，int やポインタが 16ビットであることが自然である MS-DOS の世界には移植できないソフトが山盛りになったりした．
まあでも，MS-DOS なんて，俺らが使う Unix からみればオモチャだし，みたいな．</p>

<h3>意地でも移植性を追い求める派</h3>

<p>永らくC言語といえばUnixだったが，ゲーム機や組込みシステム開発に使われるようになるにつれ，話が若干違ってくる．</p>

<blockquote><p>C99準拠って言っているのだから，それを達成するのがエンジニアとしての誠意ってモンだろう?
DSPからスパコンまでで同じソースコードが動かなきゃ認めない．以上</p></blockquote>

<p>冷蔵庫サイズのワークステーションよりも，ゲーム機やケータイのほうが出荷台数が多いのは，いくら世間に疎くても判る話だ．
Unix も，ゲーム機やケータイの高機能化に助けられて，それらの中に入れるようにはなった．
しかし，同時に組込みシステムの広がりも爆発的なものがある．
いまやクルマはコンピュータなしには動かない．エンジンの環境性能を満たせない．
ゲーム機本体がUnixでも，周辺機器を動かしているマイコンには Unix は入らない．</p>

<p>このような，非Unixな世界では，整数型に前提を設けることなんてできない．
移り変わりの早いマイコンの世界で，特定のアーキテクチャに依存するコードなんて，リスクが高すぎて書けない．
ライブラリも同様に，アーキテクチャ独立が求められる．</p>

<h2>C言語 API 設計者の異文化が交わる場所としてのmruby</h2>

<p>実際には，このような2つの派閥の極端に立つ人は，まず居ないだろう．
これがトレードオフの問題だということに気づけない人は，ソフト屋には向かない．
だが，両極端の間のどこに重心を置くかというのは，人により，またはプロジェクトにより，分かれる．</p>

<p>mruby というのは，立ち位置として面白いと，個人的には思っている．</p>

<p>mruby が処理する Ruby 言語は，Unix 文化の代表的側面である Little Language がその根底にあるように思える．
また，LAMP から Rails へという，Unix 系文化の進化に添って大きくなってきた．
だから，その API 設計が，理屈は判っていながらも Unix 的な方向に時々流れるのは，不思議なことではない．
私の好みはさておき．</p>

<p>同時に，mruby は<em>組込み向け</em>言語処理系でもある．
利用者の少なからずは，移植性が担保されていないなら魅力を感じない．
API は，C99に準拠する限りのあらゆる処理系であっても耐えうる設計か．
そのことを常に問われる分野の人も，コードを観ている．</p>

<p>mrubyでのMatz氏のAPI変更に対して，私が文句を言っているときは，APIに対する2つの派閥を思い浮かべると，解りやすいかなと思う．</p>

<p>a bit philosophical とか言われて，まあそうだよなと心の何処かで思いつつも，あるんだよ．広大な組込み世界には．びっくりするような構成のアーキテクチャってのが．</p>

<h2></h2>

<p>ちょいと脇道に逸れたけれど，@amasawa_seiji さんから mention 頂かなかったら書きそびれたはずの話題に言及できた．
あと1回…2回…くらい? あんまり長くても飽きるので．私が．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C言語における暗黙の型変換とAPI設計]]></title>
    <link href="http://www.monaka.org/blog/2014/03/19/implicit-type-conversion-in-c/"/>
    <updated>2014-03-19T14:06:12+09:00</updated>
    <id>http://www.monaka.org/blog/2014/03/19/implicit-type-conversion-in-c</id>
    <content type="html"><![CDATA[<p><a href="http://www.monaka.org/blog/2014/03/18/how-to-write-portable-api-introduction/">前口上</a>の，つづき．</p>

<h2>C言語の整数型に潜む悪夢</h2>

<p>まずは，よく知られているところから．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 65535;
</span><span class='line'>  char b;
</span><span class='line'>
</span><span class='line'>  b = a;
</span><span class='line'>
</span><span class='line'>  printf("%d %d\n", a, b);
</span><span class='line'>
</span><span class='line'>  return EXIT_SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>「a に 65535 を代入し，b に a の値を代入しているのだから，b も 65535 になるはず．」
などとLL言語(JavaScript や Ruby など)に慣れていると思ってしまいがちだが，そうはならない．</p>

<!-- more -->


<p>なぜなら，一般に，char 型の変数が保持できる値の範囲は，int 型の変数が保持できる値の範囲よりも小さいから．
概ね(…とボカす理由は後述)，char は -128 から 127 までの整数しか保存できない．</p>

<p>この性質は，ときどき，極めて恐ろしい．
C言語は，上の例のように保持できる値の範囲が小さい変数への代入を，エラーとして扱わない．しかしその結果は，おそらく，プログラマの期待とは異なる．
こういう挙動によるバグは，発見するのが困難なものとなる．</p>

<p>もしかしたら気の利いた処理系では警告を出してくれるかもしれないが．
しかし，私の手元にあった XCode の gcc では，割と厳格な警告を出すようオプションとして <code>-pedantic -std=c99 -W -Wall</code> を指定したが，素通りした．</p>

<p>(2014-Mar-20 補足: 上記，ちょっと筆が滑っている．ダウンキャストへの警告については<a href="http://www.monaka.org//blog/2014/03/20/type-conversion-warning/">こちらのエントリ</a>もご参照頂きたい)</p>

<p>さて，それでは変数 b の型を int 型にすれば解決か?
残念ながら，それもダメ．なぜなら，int 型が保持できる整数の範囲は処理系定義であるから．
int 型のサイズが 16 ビットだったなら，保持できる整数の範囲は -32768 から 32767 までしかない．a への代入の時点で，数値が期待と異なる．
つまり，上記のリストは，ある環境では動くかもしれないが，別の環境では動かない．</p>

<p>さらに疑心暗鬼になると，char 型のサイズも実はC言語仕様は決めていない．
だからもしかすると，int 型と char 型のサイズが共に17ビット以上ある処理系なら，上記のリストは期待通りに動くかもしれない．
DSP など特殊用途のプロセッサでは，char 型が 24 ビットだったり 32 ビットだったりというのは，十分に有り得る．</p>

<p>このように，学校などで無邪気に語られる「C言語には移植性がある」などというのは嘘っぱちも甚だしい．
C言語プログラマは，細心の注意をもって，自ら移植性を担保しなければならない．</p>

<p>さて，上記をまとめると，C言語プログラミングには，次のような鉄則がある．</p>

<blockquote><p>整数型変数の代入の際には，右辺にある数値が，左辺にある変数の型に収まるかどうかを，しつこいほど気にしなければならない．</p></blockquote>

<p>以上が前提知識．本題に入る．</p>

<h2>移植性が確保できる C 言語 API</h2>

<p>C 言語 API は，(プリプロセッサマクロで書けなくも無いが)普通はC言語の関数として用意する．</p>

<p>C 言語の関数呼び出しは，値渡しだ．ポインタ渡しも，ポインタの値を渡している．
つまり，関数呼び出しにおいて，代入と同じことが起こる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>foo(char b)
</span><span class='line'>{
</span><span class='line'>  printf("%d\n", b);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int
</span><span class='line'>main(void)
</span><span class='line'>{
</span><span class='line'>  int a = 65535;
</span><span class='line'>
</span><span class='line'>  foo(a);
</span><span class='line'>
</span><span class='line'>  return EXIT_SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このリストも，エラーも(GCCでは警告も)出ずにリンクまで通る．
代入に関する話題から判る通り printf の出力は，65535 にはならないかもしれないし，なるかもしれない．</p>

<p>ここで C言語での API 設計における鉄則が見えてくる．</p>

<blockquote><p>APIでは，暗黙の型変換を誘ってしまうような，関数宣言をしてはいけない．</p></blockquote>

<p>この鉄則を守る方法として，安直なのは，API が受け取る整数型を大きめにとっておくこと．
ダウンキャストでは値が落ちるが，アップキャスト(大きな範囲を取れる型へのキャスト)では整数が確実に代入できることは保証されている．
しかし，&#8221;安直&#8221;である理由が2つあり，お薦めはしない．</p>

<p>まず，大きな整数型というのは，コストが高いから．
CPUから見て計算コストが高い．メモリも余計に消費する．</p>

<p>そして，古めのC言語仕様では，最大の数値型が何なのか実は判らないから．
C99標準以降，処理系が扱える最大の整数型 uintmax_t ならびに intmax_t という型が規定された．しかし，分野によっては無視できないシェアを誇る Microsoft Visual C++ は，C99 への対応が中途半端で，umaxint_t, intmax_t は，定義されていない．</p>

<p>そんなわけで，API は，関数呼び出し時に，整数型のアップキャストもダウンキャストも，させてはいけない．</p>

<p>暗黙の型変換が無いとC言語のコーディングは酷く窮屈になる．
だから，C言語仕様も，容認している．
しかし，こと API についていえば，暗黙の型変換は，害悪でしかない．</p>

<p>結論として，APIでは，ユーザの関数呼び出し時に使うであろう型を，そのまま用いる，というのが唯一無二の選択となる．</p>

<h2></h2>

<p>さて，長くなった．
Matz 氏と私が，mruby の API についてどのように考えたのか．
それは<a href="http://www.monaka.org//blog/2014/03/20/type-conversion-warning/">明日</a> 以降に．</p>
]]></content>
  </entry>
  
</feed>
